// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/DoEncounterHookQuestTask.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/DoEncounterHookQuestTask.proto</summary>
  public static partial class DoEncounterHookQuestTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/DoEncounterHookQuestTask.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DoEncounterHookQuestTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixXVVByb3Rvcy9EYXRhL0RvRW5jb3VudGVySG9va1F1ZXN0VGFzay5wcm90",
            "bxINV1VQcm90b3MuRGF0YSJQChhEb0VuY291bnRlckhvb2tRdWVzdFRhc2sS",
            "GAoQZW5jb3VudGVyX2dtdF9pZBgBIAEoCRIaChJyZXF1aXJlZF93aW5fY291",
            "bnQYAiABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.DoEncounterHookQuestTask), global::WUProtos.Data.DoEncounterHookQuestTask.Parser, new[]{ "EncounterGmtId", "RequiredWinCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DoEncounterHookQuestTask : pb::IMessage<DoEncounterHookQuestTask> {
    private static readonly pb::MessageParser<DoEncounterHookQuestTask> _parser = new pb::MessageParser<DoEncounterHookQuestTask>(() => new DoEncounterHookQuestTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoEncounterHookQuestTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.DoEncounterHookQuestTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoEncounterHookQuestTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoEncounterHookQuestTask(DoEncounterHookQuestTask other) : this() {
      encounterGmtId_ = other.encounterGmtId_;
      requiredWinCount_ = other.requiredWinCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoEncounterHookQuestTask Clone() {
      return new DoEncounterHookQuestTask(this);
    }

    /// <summary>Field number for the "encounter_gmt_id" field.</summary>
    public const int EncounterGmtIdFieldNumber = 1;
    private string encounterGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncounterGmtId {
      get { return encounterGmtId_; }
      set {
        encounterGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "required_win_count" field.</summary>
    public const int RequiredWinCountFieldNumber = 2;
    private long requiredWinCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RequiredWinCount {
      get { return requiredWinCount_; }
      set {
        requiredWinCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoEncounterHookQuestTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoEncounterHookQuestTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncounterGmtId != other.EncounterGmtId) return false;
      if (RequiredWinCount != other.RequiredWinCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EncounterGmtId.Length != 0) hash ^= EncounterGmtId.GetHashCode();
      if (RequiredWinCount != 0L) hash ^= RequiredWinCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EncounterGmtId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EncounterGmtId);
      }
      if (RequiredWinCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RequiredWinCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EncounterGmtId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterGmtId);
      }
      if (RequiredWinCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredWinCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoEncounterHookQuestTask other) {
      if (other == null) {
        return;
      }
      if (other.EncounterGmtId.Length != 0) {
        EncounterGmtId = other.EncounterGmtId;
      }
      if (other.RequiredWinCount != 0L) {
        RequiredWinCount = other.RequiredWinCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncounterGmtId = input.ReadString();
            break;
          }
          case 16: {
            RequiredWinCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
