// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/MapAbilityLevel.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/MapAbilityLevel.proto</summary>
  public static partial class MapAbilityLevelReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/MapAbilityLevel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapAbilityLevelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNXVVByb3Rvcy9EYXRhL01hcEFiaWxpdHlMZXZlbC5wcm90bxINV1VQcm90",
            "b3MuRGF0YRopV1VQcm90b3MvRW51bXMvTWFwQWJpbGl0eVRhcmdldFR5cGUu",
            "cHJvdG8imgEKD01hcEFiaWxpdHlMZXZlbBI5Cgt0YXJnZXRfdHlwZRgBIAEo",
            "DjIkLldVUHJvdG9zLkVudW1zLk1hcEFiaWxpdHlUYXJnZXRUeXBlEg4KBnJh",
            "ZGl1cxgCIAEoAhITCgtjb29sZG93bl9tcxgDIAEoDRISCgpmb2N1c19jb3N0",
            "GAQgASgFEhMKC2J1ZmZfZ210X2lkGAUgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Enums.MapAbilityTargetTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.MapAbilityLevel), global::WUProtos.Data.MapAbilityLevel.Parser, new[]{ "TargetType", "Radius", "CooldownMs", "FocusCost", "BuffGmtId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MapAbilityLevel : pb::IMessage<MapAbilityLevel> {
    private static readonly pb::MessageParser<MapAbilityLevel> _parser = new pb::MessageParser<MapAbilityLevel>(() => new MapAbilityLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapAbilityLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.MapAbilityLevelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapAbilityLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapAbilityLevel(MapAbilityLevel other) : this() {
      targetType_ = other.targetType_;
      radius_ = other.radius_;
      cooldownMs_ = other.cooldownMs_;
      focusCost_ = other.focusCost_;
      buffGmtId_ = other.buffGmtId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapAbilityLevel Clone() {
      return new MapAbilityLevel(this);
    }

    /// <summary>Field number for the "target_type" field.</summary>
    public const int TargetTypeFieldNumber = 1;
    private global::WUProtos.Enums.MapAbilityTargetType targetType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Enums.MapAbilityTargetType TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "cooldown_ms" field.</summary>
    public const int CooldownMsFieldNumber = 3;
    private uint cooldownMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CooldownMs {
      get { return cooldownMs_; }
      set {
        cooldownMs_ = value;
      }
    }

    /// <summary>Field number for the "focus_cost" field.</summary>
    public const int FocusCostFieldNumber = 4;
    private int focusCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FocusCost {
      get { return focusCost_; }
      set {
        focusCost_ = value;
      }
    }

    /// <summary>Field number for the "buff_gmt_id" field.</summary>
    public const int BuffGmtIdFieldNumber = 5;
    private string buffGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BuffGmtId {
      get { return buffGmtId_; }
      set {
        buffGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapAbilityLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapAbilityLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetType != other.TargetType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (CooldownMs != other.CooldownMs) return false;
      if (FocusCost != other.FocusCost) return false;
      if (BuffGmtId != other.BuffGmtId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (CooldownMs != 0) hash ^= CooldownMs.GetHashCode();
      if (FocusCost != 0) hash ^= FocusCost.GetHashCode();
      if (BuffGmtId.Length != 0) hash ^= BuffGmtId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TargetType);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (CooldownMs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CooldownMs);
      }
      if (FocusCost != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FocusCost);
      }
      if (BuffGmtId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BuffGmtId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetType);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (CooldownMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CooldownMs);
      }
      if (FocusCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FocusCost);
      }
      if (BuffGmtId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuffGmtId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapAbilityLevel other) {
      if (other == null) {
        return;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.CooldownMs != 0) {
        CooldownMs = other.CooldownMs;
      }
      if (other.FocusCost != 0) {
        FocusCost = other.FocusCost;
      }
      if (other.BuffGmtId.Length != 0) {
        BuffGmtId = other.BuffGmtId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetType = (global::WUProtos.Enums.MapAbilityTargetType) input.ReadEnum();
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
          case 24: {
            CooldownMs = input.ReadUInt32();
            break;
          }
          case 32: {
            FocusCost = input.ReadInt32();
            break;
          }
          case 42: {
            BuffGmtId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
