// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/GameConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/GameConfig.proto</summary>
  public static partial class GameConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/GameConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XVVByb3Rvcy9EYXRhL0dhbWVDb25maWcucHJvdG8SDVdVUHJvdG9zLkRh",
            "dGEaJVdVUHJvdG9zL0RhdGEvRmxvb05ldHdvcmtDb25maWcucHJvdG8aKVdV",
            "UHJvdG9zL0RhdGEvVGVtcEZsb29OZXR3b3JrQ29uZmlnLnByb3RvGh9XVVBy",
            "b3Rvcy9EYXRhL0JvbnVzQ29uZmlnLnByb3RvIsEPCgpHYW1lQ29uZmlnEiAK",
            "GHJld2FyZHNfdmVzc2VsX2J5X3Jhcml0eRgBIAMoCRIKCgJpZBgCIAEoCRIg",
            "Chhzd2lzaF9zY29yaW5nX3RocmVzaG9sZHMYAyADKAISFAoMcGlja3VwX3Jh",
            "bmdlGAQgASgCEh0KFXN3aXNoX3Njb3JpbmdfYm9udXNlcxgFIAMoAhIXCg9t",
            "YXBfdXBkYXRlX3JhdGUYBiABKAUSJwofZmxvb19jb250cmlidXRpb25fYnV0",
            "dG9uX3ZhbHVlcxgHIAMoAxIdChVtYXBfZXZlbnRfdXBkYXRlX3JhdGUYCCAB",
            "KAUSIgoaZnR1ZV92aWRlb19xdWFsaXR5X2J1Y2tldHMYCSADKAkSHgoWbWFw",
            "X3B1enpsZV91cGRhdGVfcmF0ZRgKIAEoBRIjCht0cnlfYWdhaW5fYm9udXNf",
            "cGVyX2ZhaWx1cmUYCyABKAISFQoNYXJfbW9kZV9yYW5nZRgMIAEoAhIeChZh",
            "cl9tb2RlX21heF9lbmNvdW50ZXJzGA0gASgFEiAKGGV2ZW50X2Nvb2xfZG93",
            "bl9kdXJhdGlvbhgOIAEoBRIYChBjb21iYXRfc3R1bl90aW1lGA8gASgFEh0K",
            "FXByb2Zlc3Npb25zX21pbl9sZXZlbBgQIAEoBRIaChJhY2N1cmFjeV9taW5f",
            "Ym9udXMYESABKAISGgoSYWNjdXJhY3lfbWF4X2JvbnVzGBIgASgCEiMKG2Vu",
            "Y291bnRlcl9taW5fYmFzZV93aW5fcmF0ZRgTIAEoAhIjChtlbmNvdW50ZXJf",
            "bWF4X2Jhc2Vfd2luX3JhdGUYFCABKAISGAoQcGxheWVyX2xldmVsX2NhcBgV",
            "IAEoBRIaChJsZXZlbF9ib251c193ZWlnaHQYFiABKAISHQoVZ2FtZXBsYXlf",
            "Ym9udXNfd2VpZ2h0GBcgASgCEhoKEmdhbWVwbGF5X2JvbnVzX21pbhgYIAEo",
            "AhIaChJnYW1lcGxheV9ib251c19tYXgYGSABKAISKAogcHJvZmVzc2lvbnNf",
            "cnBzX25vbl9tYXRjaF9pbXBhY3QYGiABKAISJAoccHJvZmVzc2lvbnNfcnBz",
            "X21hdGNoX2ltcGFjdBgbIAEoAhIpCiFwdWJfbWVudV9yZWZyZXNoX2ludGVy",
            "dmFsX3NlY29uZHMYHCABKAMSPQoTZmxvb19uZXR3b3JrX2NvbmZpZxgdIAEo",
            "CzIgLldVUHJvdG9zLkRhdGEuRmxvb05ldHdvcmtDb25maWcSRgoYdGVtcF9m",
            "bG9vX25ldHdvcmtfY29uZmlnGB4gASgLMiQuV1VQcm90b3MuRGF0YS5UZW1w",
            "Rmxvb05ldHdvcmtDb25maWcSIQoZbWFwX3Vuc2FmZV9tb3ZlX3NwZWVkX21w",
            "cxgfIAEoAhIqCiJwb3J0a2V5X251bV93cmFja3NwdXJ0c190b19jb2xsZWN0",
            "GCAgASgFEiYKHnBvcnRrZXlfbnVtX3dyYWNrc3B1cnRzX2luX2VudhghIAEo",
            "BRIhChljYXVsZHJvbnNfbnVtX3F1ZXVlX3Nsb3RzGCIgASgFEiEKGXN3aXNo",
            "X2dhbWVfYWNjdXJhY3lfdGllcnMYIyADKAISMAooY2F1bGRyb25zX2luc3Rh",
            "bnRfZmluaXNoX2Nvc3RfcGVyX3NlY29uZBgkIAEoAhIsCiRjYXVsZHJvbnNf",
            "aW5zdGFudF9maW5pc2hfY3VycmVuY3lfaWQYJSABKAkSHQoVdHV0b3JpYWxf",
            "ZW5jb3VudGVyX2lkGCYgASgJEioKInR1dG9yaWFsX2VuY291bnRlcl9mZWF0",
            "dXJlX2ZsYWdfaWQYJyABKAkSMAoMYm9udXNfY29uZmlnGCggASgLMhouV1VQ",
            "cm90b3MuRGF0YS5Cb251c0NvbmZpZxIcChRtYXhfd2Fsa2JveF9jYXBhY2l0",
            "eRgpIAEoBRImCh5jaGFsbGVuZ2VfY29sbGVjdGlvbl9mYW1pbHlfaWQYKiAB",
            "KAkSGwoTZGFpbHlfcXVlc3RfZ210X2lkcxgrIAMoCRIfChdjYXBfcGxheWVy",
            "X2xldmVsX2dtdF9pZBgsIAEoCRIfChdncmVlbmhvdXNlX2Nvb2xfZG93bl9t",
            "cxgtIAEoAxIYChBpbm5fY29vbF9kb3duX21zGC4gASgDEicKH2lubl9tZW51",
            "X3N0YWxlbmVzc190aHJlc2hvbGRfbXMYLyABKAMSJAocZGFpbHlfcmV3YXJk",
            "X3NjaGVkdWxlX2dtdF9pZBgwIAEoCRIuCiZ3Y19lbmNvdW50ZXJfZmlyc3Rf",
            "aW50ZXJhY3RfdGltZW91dF9tcxgxIAEoAxIoCiB3Y19lbmNvdW50ZXJfaW50",
            "ZXJhY3RfdGltZW91dF9tcxgyIAEoAyK+AQoVQ2hhbGxlbmdlU291bmRDb250",
            "ZXh0EhIKDlRISVJUWV9TRUNPTkRTEAASFgoSUExBWUVSX1dJTlNfQkFUVExF",
            "EAESFwoTUExBWUVSX0xPU0VTX0JBVFRMRRACEhMKD1NUQVJUX0NIQUxMRU5H",
            "RRADEhkKFVBMQVlFUl9XSU5TX0NIQUxMRU5HRRAEEhoKFlBMQVlFUl9MT1NF",
            "U19DSEFMTEVOR0UQBRIUChBFTElURV9NT0JfU1BBV05TEAZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.FlooNetworkConfigReflection.Descriptor, global::WUProtos.Data.TempFlooNetworkConfigReflection.Descriptor, global::WUProtos.Data.BonusConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GameConfig), global::WUProtos.Data.GameConfig.Parser, new[]{ "RewardsVesselByRarity", "Id", "SwishScoringThresholds", "PickupRange", "SwishScoringBonuses", "MapUpdateRate", "FlooContributionButtonValues", "MapEventUpdateRate", "FtueVideoQualityBuckets", "MapPuzzleUpdateRate", "TryAgainBonusPerFailure", "ArModeRange", "ArModeMaxEncounters", "EventCoolDownDuration", "CombatStunTime", "ProfessionsMinLevel", "AccuracyMinBonus", "AccuracyMaxBonus", "EncounterMinBaseWinRate", "EncounterMaxBaseWinRate", "PlayerLevelCap", "LevelBonusWeight", "GameplayBonusWeight", "GameplayBonusMin", "GameplayBonusMax", "ProfessionsRpsNonMatchImpact", "ProfessionsRpsMatchImpact", "PubMenuRefreshIntervalSeconds", "FlooNetworkConfig", "TempFlooNetworkConfig", "MapUnsafeMoveSpeedMps", "PortkeyNumWrackspurtsToCollect", "PortkeyNumWrackspurtsInEnv", "CauldronsNumQueueSlots", "SwishGameAccuracyTiers", "CauldronsInstantFinishCostPerSecond", "CauldronsInstantFinishCurrencyId", "TutorialEncounterId", "TutorialEncounterFeatureFlagId", "BonusConfig", "MaxWalkboxCapacity", "ChallengeCollectionFamilyId", "DailyQuestGmtIds", "CapPlayerLevelGmtId", "GreenhouseCoolDownMs", "InnCoolDownMs", "InnMenuStalenessThresholdMs", "DailyRewardScheduleGmtId", "WcEncounterFirstInteractTimeoutMs", "WcEncounterInteractTimeoutMs" }, null, new[]{ typeof(global::WUProtos.Data.GameConfig.Types.ChallengeSoundContext) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameConfig : pb::IMessage<GameConfig> {
    private static readonly pb::MessageParser<GameConfig> _parser = new pb::MessageParser<GameConfig>(() => new GameConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.GameConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig(GameConfig other) : this() {
      rewardsVesselByRarity_ = other.rewardsVesselByRarity_.Clone();
      id_ = other.id_;
      swishScoringThresholds_ = other.swishScoringThresholds_.Clone();
      pickupRange_ = other.pickupRange_;
      swishScoringBonuses_ = other.swishScoringBonuses_.Clone();
      mapUpdateRate_ = other.mapUpdateRate_;
      flooContributionButtonValues_ = other.flooContributionButtonValues_.Clone();
      mapEventUpdateRate_ = other.mapEventUpdateRate_;
      ftueVideoQualityBuckets_ = other.ftueVideoQualityBuckets_.Clone();
      mapPuzzleUpdateRate_ = other.mapPuzzleUpdateRate_;
      tryAgainBonusPerFailure_ = other.tryAgainBonusPerFailure_;
      arModeRange_ = other.arModeRange_;
      arModeMaxEncounters_ = other.arModeMaxEncounters_;
      eventCoolDownDuration_ = other.eventCoolDownDuration_;
      combatStunTime_ = other.combatStunTime_;
      professionsMinLevel_ = other.professionsMinLevel_;
      accuracyMinBonus_ = other.accuracyMinBonus_;
      accuracyMaxBonus_ = other.accuracyMaxBonus_;
      encounterMinBaseWinRate_ = other.encounterMinBaseWinRate_;
      encounterMaxBaseWinRate_ = other.encounterMaxBaseWinRate_;
      playerLevelCap_ = other.playerLevelCap_;
      levelBonusWeight_ = other.levelBonusWeight_;
      gameplayBonusWeight_ = other.gameplayBonusWeight_;
      gameplayBonusMin_ = other.gameplayBonusMin_;
      gameplayBonusMax_ = other.gameplayBonusMax_;
      professionsRpsNonMatchImpact_ = other.professionsRpsNonMatchImpact_;
      professionsRpsMatchImpact_ = other.professionsRpsMatchImpact_;
      pubMenuRefreshIntervalSeconds_ = other.pubMenuRefreshIntervalSeconds_;
      flooNetworkConfig_ = other.flooNetworkConfig_ != null ? other.flooNetworkConfig_.Clone() : null;
      tempFlooNetworkConfig_ = other.tempFlooNetworkConfig_ != null ? other.tempFlooNetworkConfig_.Clone() : null;
      mapUnsafeMoveSpeedMps_ = other.mapUnsafeMoveSpeedMps_;
      portkeyNumWrackspurtsToCollect_ = other.portkeyNumWrackspurtsToCollect_;
      portkeyNumWrackspurtsInEnv_ = other.portkeyNumWrackspurtsInEnv_;
      cauldronsNumQueueSlots_ = other.cauldronsNumQueueSlots_;
      swishGameAccuracyTiers_ = other.swishGameAccuracyTiers_.Clone();
      cauldronsInstantFinishCostPerSecond_ = other.cauldronsInstantFinishCostPerSecond_;
      cauldronsInstantFinishCurrencyId_ = other.cauldronsInstantFinishCurrencyId_;
      tutorialEncounterId_ = other.tutorialEncounterId_;
      tutorialEncounterFeatureFlagId_ = other.tutorialEncounterFeatureFlagId_;
      bonusConfig_ = other.bonusConfig_ != null ? other.bonusConfig_.Clone() : null;
      maxWalkboxCapacity_ = other.maxWalkboxCapacity_;
      challengeCollectionFamilyId_ = other.challengeCollectionFamilyId_;
      dailyQuestGmtIds_ = other.dailyQuestGmtIds_.Clone();
      capPlayerLevelGmtId_ = other.capPlayerLevelGmtId_;
      greenhouseCoolDownMs_ = other.greenhouseCoolDownMs_;
      innCoolDownMs_ = other.innCoolDownMs_;
      innMenuStalenessThresholdMs_ = other.innMenuStalenessThresholdMs_;
      dailyRewardScheduleGmtId_ = other.dailyRewardScheduleGmtId_;
      wcEncounterFirstInteractTimeoutMs_ = other.wcEncounterFirstInteractTimeoutMs_;
      wcEncounterInteractTimeoutMs_ = other.wcEncounterInteractTimeoutMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameConfig Clone() {
      return new GameConfig(this);
    }

    /// <summary>Field number for the "rewards_vessel_by_rarity" field.</summary>
    public const int RewardsVesselByRarityFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_rewardsVesselByRarity_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> rewardsVesselByRarity_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardsVesselByRarity {
      get { return rewardsVesselByRarity_; }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "swish_scoring_thresholds" field.</summary>
    public const int SwishScoringThresholdsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_swishScoringThresholds_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> swishScoringThresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SwishScoringThresholds {
      get { return swishScoringThresholds_; }
    }

    /// <summary>Field number for the "pickup_range" field.</summary>
    public const int PickupRangeFieldNumber = 4;
    private float pickupRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PickupRange {
      get { return pickupRange_; }
      set {
        pickupRange_ = value;
      }
    }

    /// <summary>Field number for the "swish_scoring_bonuses" field.</summary>
    public const int SwishScoringBonusesFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_swishScoringBonuses_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> swishScoringBonuses_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SwishScoringBonuses {
      get { return swishScoringBonuses_; }
    }

    /// <summary>Field number for the "map_update_rate" field.</summary>
    public const int MapUpdateRateFieldNumber = 6;
    private int mapUpdateRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapUpdateRate {
      get { return mapUpdateRate_; }
      set {
        mapUpdateRate_ = value;
      }
    }

    /// <summary>Field number for the "floo_contribution_button_values" field.</summary>
    public const int FlooContributionButtonValuesFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_flooContributionButtonValues_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> flooContributionButtonValues_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> FlooContributionButtonValues {
      get { return flooContributionButtonValues_; }
    }

    /// <summary>Field number for the "map_event_update_rate" field.</summary>
    public const int MapEventUpdateRateFieldNumber = 8;
    private int mapEventUpdateRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapEventUpdateRate {
      get { return mapEventUpdateRate_; }
      set {
        mapEventUpdateRate_ = value;
      }
    }

    /// <summary>Field number for the "ftue_video_quality_buckets" field.</summary>
    public const int FtueVideoQualityBucketsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_ftueVideoQualityBuckets_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> ftueVideoQualityBuckets_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FtueVideoQualityBuckets {
      get { return ftueVideoQualityBuckets_; }
    }

    /// <summary>Field number for the "map_puzzle_update_rate" field.</summary>
    public const int MapPuzzleUpdateRateFieldNumber = 10;
    private int mapPuzzleUpdateRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapPuzzleUpdateRate {
      get { return mapPuzzleUpdateRate_; }
      set {
        mapPuzzleUpdateRate_ = value;
      }
    }

    /// <summary>Field number for the "try_again_bonus_per_failure" field.</summary>
    public const int TryAgainBonusPerFailureFieldNumber = 11;
    private float tryAgainBonusPerFailure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TryAgainBonusPerFailure {
      get { return tryAgainBonusPerFailure_; }
      set {
        tryAgainBonusPerFailure_ = value;
      }
    }

    /// <summary>Field number for the "ar_mode_range" field.</summary>
    public const int ArModeRangeFieldNumber = 12;
    private float arModeRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ArModeRange {
      get { return arModeRange_; }
      set {
        arModeRange_ = value;
      }
    }

    /// <summary>Field number for the "ar_mode_max_encounters" field.</summary>
    public const int ArModeMaxEncountersFieldNumber = 13;
    private int arModeMaxEncounters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ArModeMaxEncounters {
      get { return arModeMaxEncounters_; }
      set {
        arModeMaxEncounters_ = value;
      }
    }

    /// <summary>Field number for the "event_cool_down_duration" field.</summary>
    public const int EventCoolDownDurationFieldNumber = 14;
    private int eventCoolDownDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventCoolDownDuration {
      get { return eventCoolDownDuration_; }
      set {
        eventCoolDownDuration_ = value;
      }
    }

    /// <summary>Field number for the "combat_stun_time" field.</summary>
    public const int CombatStunTimeFieldNumber = 15;
    private int combatStunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CombatStunTime {
      get { return combatStunTime_; }
      set {
        combatStunTime_ = value;
      }
    }

    /// <summary>Field number for the "professions_min_level" field.</summary>
    public const int ProfessionsMinLevelFieldNumber = 16;
    private int professionsMinLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProfessionsMinLevel {
      get { return professionsMinLevel_; }
      set {
        professionsMinLevel_ = value;
      }
    }

    /// <summary>Field number for the "accuracy_min_bonus" field.</summary>
    public const int AccuracyMinBonusFieldNumber = 17;
    private float accuracyMinBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccuracyMinBonus {
      get { return accuracyMinBonus_; }
      set {
        accuracyMinBonus_ = value;
      }
    }

    /// <summary>Field number for the "accuracy_max_bonus" field.</summary>
    public const int AccuracyMaxBonusFieldNumber = 18;
    private float accuracyMaxBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccuracyMaxBonus {
      get { return accuracyMaxBonus_; }
      set {
        accuracyMaxBonus_ = value;
      }
    }

    /// <summary>Field number for the "encounter_min_base_win_rate" field.</summary>
    public const int EncounterMinBaseWinRateFieldNumber = 19;
    private float encounterMinBaseWinRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EncounterMinBaseWinRate {
      get { return encounterMinBaseWinRate_; }
      set {
        encounterMinBaseWinRate_ = value;
      }
    }

    /// <summary>Field number for the "encounter_max_base_win_rate" field.</summary>
    public const int EncounterMaxBaseWinRateFieldNumber = 20;
    private float encounterMaxBaseWinRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EncounterMaxBaseWinRate {
      get { return encounterMaxBaseWinRate_; }
      set {
        encounterMaxBaseWinRate_ = value;
      }
    }

    /// <summary>Field number for the "player_level_cap" field.</summary>
    public const int PlayerLevelCapFieldNumber = 21;
    private int playerLevelCap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLevelCap {
      get { return playerLevelCap_; }
      set {
        playerLevelCap_ = value;
      }
    }

    /// <summary>Field number for the "level_bonus_weight" field.</summary>
    public const int LevelBonusWeightFieldNumber = 22;
    private float levelBonusWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LevelBonusWeight {
      get { return levelBonusWeight_; }
      set {
        levelBonusWeight_ = value;
      }
    }

    /// <summary>Field number for the "gameplay_bonus_weight" field.</summary>
    public const int GameplayBonusWeightFieldNumber = 23;
    private float gameplayBonusWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameplayBonusWeight {
      get { return gameplayBonusWeight_; }
      set {
        gameplayBonusWeight_ = value;
      }
    }

    /// <summary>Field number for the "gameplay_bonus_min" field.</summary>
    public const int GameplayBonusMinFieldNumber = 24;
    private float gameplayBonusMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameplayBonusMin {
      get { return gameplayBonusMin_; }
      set {
        gameplayBonusMin_ = value;
      }
    }

    /// <summary>Field number for the "gameplay_bonus_max" field.</summary>
    public const int GameplayBonusMaxFieldNumber = 25;
    private float gameplayBonusMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameplayBonusMax {
      get { return gameplayBonusMax_; }
      set {
        gameplayBonusMax_ = value;
      }
    }

    /// <summary>Field number for the "professions_rps_non_match_impact" field.</summary>
    public const int ProfessionsRpsNonMatchImpactFieldNumber = 26;
    private float professionsRpsNonMatchImpact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProfessionsRpsNonMatchImpact {
      get { return professionsRpsNonMatchImpact_; }
      set {
        professionsRpsNonMatchImpact_ = value;
      }
    }

    /// <summary>Field number for the "professions_rps_match_impact" field.</summary>
    public const int ProfessionsRpsMatchImpactFieldNumber = 27;
    private float professionsRpsMatchImpact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProfessionsRpsMatchImpact {
      get { return professionsRpsMatchImpact_; }
      set {
        professionsRpsMatchImpact_ = value;
      }
    }

    /// <summary>Field number for the "pub_menu_refresh_interval_seconds" field.</summary>
    public const int PubMenuRefreshIntervalSecondsFieldNumber = 28;
    private long pubMenuRefreshIntervalSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PubMenuRefreshIntervalSeconds {
      get { return pubMenuRefreshIntervalSeconds_; }
      set {
        pubMenuRefreshIntervalSeconds_ = value;
      }
    }

    /// <summary>Field number for the "floo_network_config" field.</summary>
    public const int FlooNetworkConfigFieldNumber = 29;
    private global::WUProtos.Data.FlooNetworkConfig flooNetworkConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.FlooNetworkConfig FlooNetworkConfig {
      get { return flooNetworkConfig_; }
      set {
        flooNetworkConfig_ = value;
      }
    }

    /// <summary>Field number for the "temp_floo_network_config" field.</summary>
    public const int TempFlooNetworkConfigFieldNumber = 30;
    private global::WUProtos.Data.TempFlooNetworkConfig tempFlooNetworkConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.TempFlooNetworkConfig TempFlooNetworkConfig {
      get { return tempFlooNetworkConfig_; }
      set {
        tempFlooNetworkConfig_ = value;
      }
    }

    /// <summary>Field number for the "map_unsafe_move_speed_mps" field.</summary>
    public const int MapUnsafeMoveSpeedMpsFieldNumber = 31;
    private float mapUnsafeMoveSpeedMps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MapUnsafeMoveSpeedMps {
      get { return mapUnsafeMoveSpeedMps_; }
      set {
        mapUnsafeMoveSpeedMps_ = value;
      }
    }

    /// <summary>Field number for the "portkey_num_wrackspurts_to_collect" field.</summary>
    public const int PortkeyNumWrackspurtsToCollectFieldNumber = 32;
    private int portkeyNumWrackspurtsToCollect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PortkeyNumWrackspurtsToCollect {
      get { return portkeyNumWrackspurtsToCollect_; }
      set {
        portkeyNumWrackspurtsToCollect_ = value;
      }
    }

    /// <summary>Field number for the "portkey_num_wrackspurts_in_env" field.</summary>
    public const int PortkeyNumWrackspurtsInEnvFieldNumber = 33;
    private int portkeyNumWrackspurtsInEnv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PortkeyNumWrackspurtsInEnv {
      get { return portkeyNumWrackspurtsInEnv_; }
      set {
        portkeyNumWrackspurtsInEnv_ = value;
      }
    }

    /// <summary>Field number for the "cauldrons_num_queue_slots" field.</summary>
    public const int CauldronsNumQueueSlotsFieldNumber = 34;
    private int cauldronsNumQueueSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CauldronsNumQueueSlots {
      get { return cauldronsNumQueueSlots_; }
      set {
        cauldronsNumQueueSlots_ = value;
      }
    }

    /// <summary>Field number for the "swish_game_accuracy_tiers" field.</summary>
    public const int SwishGameAccuracyTiersFieldNumber = 35;
    private static readonly pb::FieldCodec<float> _repeated_swishGameAccuracyTiers_codec
        = pb::FieldCodec.ForFloat(282);
    private readonly pbc::RepeatedField<float> swishGameAccuracyTiers_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SwishGameAccuracyTiers {
      get { return swishGameAccuracyTiers_; }
    }

    /// <summary>Field number for the "cauldrons_instant_finish_cost_per_second" field.</summary>
    public const int CauldronsInstantFinishCostPerSecondFieldNumber = 36;
    private float cauldronsInstantFinishCostPerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CauldronsInstantFinishCostPerSecond {
      get { return cauldronsInstantFinishCostPerSecond_; }
      set {
        cauldronsInstantFinishCostPerSecond_ = value;
      }
    }

    /// <summary>Field number for the "cauldrons_instant_finish_currency_id" field.</summary>
    public const int CauldronsInstantFinishCurrencyIdFieldNumber = 37;
    private string cauldronsInstantFinishCurrencyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CauldronsInstantFinishCurrencyId {
      get { return cauldronsInstantFinishCurrencyId_; }
      set {
        cauldronsInstantFinishCurrencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tutorial_encounter_id" field.</summary>
    public const int TutorialEncounterIdFieldNumber = 38;
    private string tutorialEncounterId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TutorialEncounterId {
      get { return tutorialEncounterId_; }
      set {
        tutorialEncounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tutorial_encounter_feature_flag_id" field.</summary>
    public const int TutorialEncounterFeatureFlagIdFieldNumber = 39;
    private string tutorialEncounterFeatureFlagId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TutorialEncounterFeatureFlagId {
      get { return tutorialEncounterFeatureFlagId_; }
      set {
        tutorialEncounterFeatureFlagId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bonus_config" field.</summary>
    public const int BonusConfigFieldNumber = 40;
    private global::WUProtos.Data.BonusConfig bonusConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.BonusConfig BonusConfig {
      get { return bonusConfig_; }
      set {
        bonusConfig_ = value;
      }
    }

    /// <summary>Field number for the "max_walkbox_capacity" field.</summary>
    public const int MaxWalkboxCapacityFieldNumber = 41;
    private int maxWalkboxCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxWalkboxCapacity {
      get { return maxWalkboxCapacity_; }
      set {
        maxWalkboxCapacity_ = value;
      }
    }

    /// <summary>Field number for the "challenge_collection_family_id" field.</summary>
    public const int ChallengeCollectionFamilyIdFieldNumber = 42;
    private string challengeCollectionFamilyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChallengeCollectionFamilyId {
      get { return challengeCollectionFamilyId_; }
      set {
        challengeCollectionFamilyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "daily_quest_gmt_ids" field.</summary>
    public const int DailyQuestGmtIdsFieldNumber = 43;
    private static readonly pb::FieldCodec<string> _repeated_dailyQuestGmtIds_codec
        = pb::FieldCodec.ForString(346);
    private readonly pbc::RepeatedField<string> dailyQuestGmtIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DailyQuestGmtIds {
      get { return dailyQuestGmtIds_; }
    }

    /// <summary>Field number for the "cap_player_level_gmt_id" field.</summary>
    public const int CapPlayerLevelGmtIdFieldNumber = 44;
    private string capPlayerLevelGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CapPlayerLevelGmtId {
      get { return capPlayerLevelGmtId_; }
      set {
        capPlayerLevelGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "greenhouse_cool_down_ms" field.</summary>
    public const int GreenhouseCoolDownMsFieldNumber = 45;
    private long greenhouseCoolDownMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GreenhouseCoolDownMs {
      get { return greenhouseCoolDownMs_; }
      set {
        greenhouseCoolDownMs_ = value;
      }
    }

    /// <summary>Field number for the "inn_cool_down_ms" field.</summary>
    public const int InnCoolDownMsFieldNumber = 46;
    private long innCoolDownMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InnCoolDownMs {
      get { return innCoolDownMs_; }
      set {
        innCoolDownMs_ = value;
      }
    }

    /// <summary>Field number for the "inn_menu_staleness_threshold_ms" field.</summary>
    public const int InnMenuStalenessThresholdMsFieldNumber = 47;
    private long innMenuStalenessThresholdMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InnMenuStalenessThresholdMs {
      get { return innMenuStalenessThresholdMs_; }
      set {
        innMenuStalenessThresholdMs_ = value;
      }
    }

    /// <summary>Field number for the "daily_reward_schedule_gmt_id" field.</summary>
    public const int DailyRewardScheduleGmtIdFieldNumber = 48;
    private string dailyRewardScheduleGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DailyRewardScheduleGmtId {
      get { return dailyRewardScheduleGmtId_; }
      set {
        dailyRewardScheduleGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wc_encounter_first_interact_timeout_ms" field.</summary>
    public const int WcEncounterFirstInteractTimeoutMsFieldNumber = 49;
    private long wcEncounterFirstInteractTimeoutMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WcEncounterFirstInteractTimeoutMs {
      get { return wcEncounterFirstInteractTimeoutMs_; }
      set {
        wcEncounterFirstInteractTimeoutMs_ = value;
      }
    }

    /// <summary>Field number for the "wc_encounter_interact_timeout_ms" field.</summary>
    public const int WcEncounterInteractTimeoutMsFieldNumber = 50;
    private long wcEncounterInteractTimeoutMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WcEncounterInteractTimeoutMs {
      get { return wcEncounterInteractTimeoutMs_; }
      set {
        wcEncounterInteractTimeoutMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardsVesselByRarity_.Equals(other.rewardsVesselByRarity_)) return false;
      if (Id != other.Id) return false;
      if(!swishScoringThresholds_.Equals(other.swishScoringThresholds_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PickupRange, other.PickupRange)) return false;
      if(!swishScoringBonuses_.Equals(other.swishScoringBonuses_)) return false;
      if (MapUpdateRate != other.MapUpdateRate) return false;
      if(!flooContributionButtonValues_.Equals(other.flooContributionButtonValues_)) return false;
      if (MapEventUpdateRate != other.MapEventUpdateRate) return false;
      if(!ftueVideoQualityBuckets_.Equals(other.ftueVideoQualityBuckets_)) return false;
      if (MapPuzzleUpdateRate != other.MapPuzzleUpdateRate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TryAgainBonusPerFailure, other.TryAgainBonusPerFailure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ArModeRange, other.ArModeRange)) return false;
      if (ArModeMaxEncounters != other.ArModeMaxEncounters) return false;
      if (EventCoolDownDuration != other.EventCoolDownDuration) return false;
      if (CombatStunTime != other.CombatStunTime) return false;
      if (ProfessionsMinLevel != other.ProfessionsMinLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccuracyMinBonus, other.AccuracyMinBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccuracyMaxBonus, other.AccuracyMaxBonus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EncounterMinBaseWinRate, other.EncounterMinBaseWinRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EncounterMaxBaseWinRate, other.EncounterMaxBaseWinRate)) return false;
      if (PlayerLevelCap != other.PlayerLevelCap) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LevelBonusWeight, other.LevelBonusWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameplayBonusWeight, other.GameplayBonusWeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameplayBonusMin, other.GameplayBonusMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameplayBonusMax, other.GameplayBonusMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProfessionsRpsNonMatchImpact, other.ProfessionsRpsNonMatchImpact)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ProfessionsRpsMatchImpact, other.ProfessionsRpsMatchImpact)) return false;
      if (PubMenuRefreshIntervalSeconds != other.PubMenuRefreshIntervalSeconds) return false;
      if (!object.Equals(FlooNetworkConfig, other.FlooNetworkConfig)) return false;
      if (!object.Equals(TempFlooNetworkConfig, other.TempFlooNetworkConfig)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MapUnsafeMoveSpeedMps, other.MapUnsafeMoveSpeedMps)) return false;
      if (PortkeyNumWrackspurtsToCollect != other.PortkeyNumWrackspurtsToCollect) return false;
      if (PortkeyNumWrackspurtsInEnv != other.PortkeyNumWrackspurtsInEnv) return false;
      if (CauldronsNumQueueSlots != other.CauldronsNumQueueSlots) return false;
      if(!swishGameAccuracyTiers_.Equals(other.swishGameAccuracyTiers_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CauldronsInstantFinishCostPerSecond, other.CauldronsInstantFinishCostPerSecond)) return false;
      if (CauldronsInstantFinishCurrencyId != other.CauldronsInstantFinishCurrencyId) return false;
      if (TutorialEncounterId != other.TutorialEncounterId) return false;
      if (TutorialEncounterFeatureFlagId != other.TutorialEncounterFeatureFlagId) return false;
      if (!object.Equals(BonusConfig, other.BonusConfig)) return false;
      if (MaxWalkboxCapacity != other.MaxWalkboxCapacity) return false;
      if (ChallengeCollectionFamilyId != other.ChallengeCollectionFamilyId) return false;
      if(!dailyQuestGmtIds_.Equals(other.dailyQuestGmtIds_)) return false;
      if (CapPlayerLevelGmtId != other.CapPlayerLevelGmtId) return false;
      if (GreenhouseCoolDownMs != other.GreenhouseCoolDownMs) return false;
      if (InnCoolDownMs != other.InnCoolDownMs) return false;
      if (InnMenuStalenessThresholdMs != other.InnMenuStalenessThresholdMs) return false;
      if (DailyRewardScheduleGmtId != other.DailyRewardScheduleGmtId) return false;
      if (WcEncounterFirstInteractTimeoutMs != other.WcEncounterFirstInteractTimeoutMs) return false;
      if (WcEncounterInteractTimeoutMs != other.WcEncounterInteractTimeoutMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardsVesselByRarity_.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= swishScoringThresholds_.GetHashCode();
      if (PickupRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PickupRange);
      hash ^= swishScoringBonuses_.GetHashCode();
      if (MapUpdateRate != 0) hash ^= MapUpdateRate.GetHashCode();
      hash ^= flooContributionButtonValues_.GetHashCode();
      if (MapEventUpdateRate != 0) hash ^= MapEventUpdateRate.GetHashCode();
      hash ^= ftueVideoQualityBuckets_.GetHashCode();
      if (MapPuzzleUpdateRate != 0) hash ^= MapPuzzleUpdateRate.GetHashCode();
      if (TryAgainBonusPerFailure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TryAgainBonusPerFailure);
      if (ArModeRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ArModeRange);
      if (ArModeMaxEncounters != 0) hash ^= ArModeMaxEncounters.GetHashCode();
      if (EventCoolDownDuration != 0) hash ^= EventCoolDownDuration.GetHashCode();
      if (CombatStunTime != 0) hash ^= CombatStunTime.GetHashCode();
      if (ProfessionsMinLevel != 0) hash ^= ProfessionsMinLevel.GetHashCode();
      if (AccuracyMinBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccuracyMinBonus);
      if (AccuracyMaxBonus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccuracyMaxBonus);
      if (EncounterMinBaseWinRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EncounterMinBaseWinRate);
      if (EncounterMaxBaseWinRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EncounterMaxBaseWinRate);
      if (PlayerLevelCap != 0) hash ^= PlayerLevelCap.GetHashCode();
      if (LevelBonusWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LevelBonusWeight);
      if (GameplayBonusWeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameplayBonusWeight);
      if (GameplayBonusMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameplayBonusMin);
      if (GameplayBonusMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameplayBonusMax);
      if (ProfessionsRpsNonMatchImpact != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProfessionsRpsNonMatchImpact);
      if (ProfessionsRpsMatchImpact != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ProfessionsRpsMatchImpact);
      if (PubMenuRefreshIntervalSeconds != 0L) hash ^= PubMenuRefreshIntervalSeconds.GetHashCode();
      if (flooNetworkConfig_ != null) hash ^= FlooNetworkConfig.GetHashCode();
      if (tempFlooNetworkConfig_ != null) hash ^= TempFlooNetworkConfig.GetHashCode();
      if (MapUnsafeMoveSpeedMps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MapUnsafeMoveSpeedMps);
      if (PortkeyNumWrackspurtsToCollect != 0) hash ^= PortkeyNumWrackspurtsToCollect.GetHashCode();
      if (PortkeyNumWrackspurtsInEnv != 0) hash ^= PortkeyNumWrackspurtsInEnv.GetHashCode();
      if (CauldronsNumQueueSlots != 0) hash ^= CauldronsNumQueueSlots.GetHashCode();
      hash ^= swishGameAccuracyTiers_.GetHashCode();
      if (CauldronsInstantFinishCostPerSecond != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CauldronsInstantFinishCostPerSecond);
      if (CauldronsInstantFinishCurrencyId.Length != 0) hash ^= CauldronsInstantFinishCurrencyId.GetHashCode();
      if (TutorialEncounterId.Length != 0) hash ^= TutorialEncounterId.GetHashCode();
      if (TutorialEncounterFeatureFlagId.Length != 0) hash ^= TutorialEncounterFeatureFlagId.GetHashCode();
      if (bonusConfig_ != null) hash ^= BonusConfig.GetHashCode();
      if (MaxWalkboxCapacity != 0) hash ^= MaxWalkboxCapacity.GetHashCode();
      if (ChallengeCollectionFamilyId.Length != 0) hash ^= ChallengeCollectionFamilyId.GetHashCode();
      hash ^= dailyQuestGmtIds_.GetHashCode();
      if (CapPlayerLevelGmtId.Length != 0) hash ^= CapPlayerLevelGmtId.GetHashCode();
      if (GreenhouseCoolDownMs != 0L) hash ^= GreenhouseCoolDownMs.GetHashCode();
      if (InnCoolDownMs != 0L) hash ^= InnCoolDownMs.GetHashCode();
      if (InnMenuStalenessThresholdMs != 0L) hash ^= InnMenuStalenessThresholdMs.GetHashCode();
      if (DailyRewardScheduleGmtId.Length != 0) hash ^= DailyRewardScheduleGmtId.GetHashCode();
      if (WcEncounterFirstInteractTimeoutMs != 0L) hash ^= WcEncounterFirstInteractTimeoutMs.GetHashCode();
      if (WcEncounterInteractTimeoutMs != 0L) hash ^= WcEncounterInteractTimeoutMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardsVesselByRarity_.WriteTo(output, _repeated_rewardsVesselByRarity_codec);
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      swishScoringThresholds_.WriteTo(output, _repeated_swishScoringThresholds_codec);
      if (PickupRange != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PickupRange);
      }
      swishScoringBonuses_.WriteTo(output, _repeated_swishScoringBonuses_codec);
      if (MapUpdateRate != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MapUpdateRate);
      }
      flooContributionButtonValues_.WriteTo(output, _repeated_flooContributionButtonValues_codec);
      if (MapEventUpdateRate != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MapEventUpdateRate);
      }
      ftueVideoQualityBuckets_.WriteTo(output, _repeated_ftueVideoQualityBuckets_codec);
      if (MapPuzzleUpdateRate != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MapPuzzleUpdateRate);
      }
      if (TryAgainBonusPerFailure != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(TryAgainBonusPerFailure);
      }
      if (ArModeRange != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ArModeRange);
      }
      if (ArModeMaxEncounters != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ArModeMaxEncounters);
      }
      if (EventCoolDownDuration != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EventCoolDownDuration);
      }
      if (CombatStunTime != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CombatStunTime);
      }
      if (ProfessionsMinLevel != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ProfessionsMinLevel);
      }
      if (AccuracyMinBonus != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(AccuracyMinBonus);
      }
      if (AccuracyMaxBonus != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(AccuracyMaxBonus);
      }
      if (EncounterMinBaseWinRate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(EncounterMinBaseWinRate);
      }
      if (EncounterMaxBaseWinRate != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(EncounterMaxBaseWinRate);
      }
      if (PlayerLevelCap != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(PlayerLevelCap);
      }
      if (LevelBonusWeight != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(LevelBonusWeight);
      }
      if (GameplayBonusWeight != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(GameplayBonusWeight);
      }
      if (GameplayBonusMin != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(GameplayBonusMin);
      }
      if (GameplayBonusMax != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(GameplayBonusMax);
      }
      if (ProfessionsRpsNonMatchImpact != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(ProfessionsRpsNonMatchImpact);
      }
      if (ProfessionsRpsMatchImpact != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(ProfessionsRpsMatchImpact);
      }
      if (PubMenuRefreshIntervalSeconds != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(PubMenuRefreshIntervalSeconds);
      }
      if (flooNetworkConfig_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(FlooNetworkConfig);
      }
      if (tempFlooNetworkConfig_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(TempFlooNetworkConfig);
      }
      if (MapUnsafeMoveSpeedMps != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(MapUnsafeMoveSpeedMps);
      }
      if (PortkeyNumWrackspurtsToCollect != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(PortkeyNumWrackspurtsToCollect);
      }
      if (PortkeyNumWrackspurtsInEnv != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(PortkeyNumWrackspurtsInEnv);
      }
      if (CauldronsNumQueueSlots != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(CauldronsNumQueueSlots);
      }
      swishGameAccuracyTiers_.WriteTo(output, _repeated_swishGameAccuracyTiers_codec);
      if (CauldronsInstantFinishCostPerSecond != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(CauldronsInstantFinishCostPerSecond);
      }
      if (CauldronsInstantFinishCurrencyId.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(CauldronsInstantFinishCurrencyId);
      }
      if (TutorialEncounterId.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(TutorialEncounterId);
      }
      if (TutorialEncounterFeatureFlagId.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(TutorialEncounterFeatureFlagId);
      }
      if (bonusConfig_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(BonusConfig);
      }
      if (MaxWalkboxCapacity != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MaxWalkboxCapacity);
      }
      if (ChallengeCollectionFamilyId.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(ChallengeCollectionFamilyId);
      }
      dailyQuestGmtIds_.WriteTo(output, _repeated_dailyQuestGmtIds_codec);
      if (CapPlayerLevelGmtId.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(CapPlayerLevelGmtId);
      }
      if (GreenhouseCoolDownMs != 0L) {
        output.WriteRawTag(232, 2);
        output.WriteInt64(GreenhouseCoolDownMs);
      }
      if (InnCoolDownMs != 0L) {
        output.WriteRawTag(240, 2);
        output.WriteInt64(InnCoolDownMs);
      }
      if (InnMenuStalenessThresholdMs != 0L) {
        output.WriteRawTag(248, 2);
        output.WriteInt64(InnMenuStalenessThresholdMs);
      }
      if (DailyRewardScheduleGmtId.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(DailyRewardScheduleGmtId);
      }
      if (WcEncounterFirstInteractTimeoutMs != 0L) {
        output.WriteRawTag(136, 3);
        output.WriteInt64(WcEncounterFirstInteractTimeoutMs);
      }
      if (WcEncounterInteractTimeoutMs != 0L) {
        output.WriteRawTag(144, 3);
        output.WriteInt64(WcEncounterInteractTimeoutMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardsVesselByRarity_.CalculateSize(_repeated_rewardsVesselByRarity_codec);
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += swishScoringThresholds_.CalculateSize(_repeated_swishScoringThresholds_codec);
      if (PickupRange != 0F) {
        size += 1 + 4;
      }
      size += swishScoringBonuses_.CalculateSize(_repeated_swishScoringBonuses_codec);
      if (MapUpdateRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapUpdateRate);
      }
      size += flooContributionButtonValues_.CalculateSize(_repeated_flooContributionButtonValues_codec);
      if (MapEventUpdateRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapEventUpdateRate);
      }
      size += ftueVideoQualityBuckets_.CalculateSize(_repeated_ftueVideoQualityBuckets_codec);
      if (MapPuzzleUpdateRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapPuzzleUpdateRate);
      }
      if (TryAgainBonusPerFailure != 0F) {
        size += 1 + 4;
      }
      if (ArModeRange != 0F) {
        size += 1 + 4;
      }
      if (ArModeMaxEncounters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ArModeMaxEncounters);
      }
      if (EventCoolDownDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventCoolDownDuration);
      }
      if (CombatStunTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CombatStunTime);
      }
      if (ProfessionsMinLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProfessionsMinLevel);
      }
      if (AccuracyMinBonus != 0F) {
        size += 2 + 4;
      }
      if (AccuracyMaxBonus != 0F) {
        size += 2 + 4;
      }
      if (EncounterMinBaseWinRate != 0F) {
        size += 2 + 4;
      }
      if (EncounterMaxBaseWinRate != 0F) {
        size += 2 + 4;
      }
      if (PlayerLevelCap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerLevelCap);
      }
      if (LevelBonusWeight != 0F) {
        size += 2 + 4;
      }
      if (GameplayBonusWeight != 0F) {
        size += 2 + 4;
      }
      if (GameplayBonusMin != 0F) {
        size += 2 + 4;
      }
      if (GameplayBonusMax != 0F) {
        size += 2 + 4;
      }
      if (ProfessionsRpsNonMatchImpact != 0F) {
        size += 2 + 4;
      }
      if (ProfessionsRpsMatchImpact != 0F) {
        size += 2 + 4;
      }
      if (PubMenuRefreshIntervalSeconds != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PubMenuRefreshIntervalSeconds);
      }
      if (flooNetworkConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FlooNetworkConfig);
      }
      if (tempFlooNetworkConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TempFlooNetworkConfig);
      }
      if (MapUnsafeMoveSpeedMps != 0F) {
        size += 2 + 4;
      }
      if (PortkeyNumWrackspurtsToCollect != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PortkeyNumWrackspurtsToCollect);
      }
      if (PortkeyNumWrackspurtsInEnv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PortkeyNumWrackspurtsInEnv);
      }
      if (CauldronsNumQueueSlots != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CauldronsNumQueueSlots);
      }
      size += swishGameAccuracyTiers_.CalculateSize(_repeated_swishGameAccuracyTiers_codec);
      if (CauldronsInstantFinishCostPerSecond != 0F) {
        size += 2 + 4;
      }
      if (CauldronsInstantFinishCurrencyId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CauldronsInstantFinishCurrencyId);
      }
      if (TutorialEncounterId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TutorialEncounterId);
      }
      if (TutorialEncounterFeatureFlagId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TutorialEncounterFeatureFlagId);
      }
      if (bonusConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusConfig);
      }
      if (MaxWalkboxCapacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxWalkboxCapacity);
      }
      if (ChallengeCollectionFamilyId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChallengeCollectionFamilyId);
      }
      size += dailyQuestGmtIds_.CalculateSize(_repeated_dailyQuestGmtIds_codec);
      if (CapPlayerLevelGmtId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CapPlayerLevelGmtId);
      }
      if (GreenhouseCoolDownMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GreenhouseCoolDownMs);
      }
      if (InnCoolDownMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(InnCoolDownMs);
      }
      if (InnMenuStalenessThresholdMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(InnMenuStalenessThresholdMs);
      }
      if (DailyRewardScheduleGmtId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DailyRewardScheduleGmtId);
      }
      if (WcEncounterFirstInteractTimeoutMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WcEncounterFirstInteractTimeoutMs);
      }
      if (WcEncounterInteractTimeoutMs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WcEncounterInteractTimeoutMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameConfig other) {
      if (other == null) {
        return;
      }
      rewardsVesselByRarity_.Add(other.rewardsVesselByRarity_);
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      swishScoringThresholds_.Add(other.swishScoringThresholds_);
      if (other.PickupRange != 0F) {
        PickupRange = other.PickupRange;
      }
      swishScoringBonuses_.Add(other.swishScoringBonuses_);
      if (other.MapUpdateRate != 0) {
        MapUpdateRate = other.MapUpdateRate;
      }
      flooContributionButtonValues_.Add(other.flooContributionButtonValues_);
      if (other.MapEventUpdateRate != 0) {
        MapEventUpdateRate = other.MapEventUpdateRate;
      }
      ftueVideoQualityBuckets_.Add(other.ftueVideoQualityBuckets_);
      if (other.MapPuzzleUpdateRate != 0) {
        MapPuzzleUpdateRate = other.MapPuzzleUpdateRate;
      }
      if (other.TryAgainBonusPerFailure != 0F) {
        TryAgainBonusPerFailure = other.TryAgainBonusPerFailure;
      }
      if (other.ArModeRange != 0F) {
        ArModeRange = other.ArModeRange;
      }
      if (other.ArModeMaxEncounters != 0) {
        ArModeMaxEncounters = other.ArModeMaxEncounters;
      }
      if (other.EventCoolDownDuration != 0) {
        EventCoolDownDuration = other.EventCoolDownDuration;
      }
      if (other.CombatStunTime != 0) {
        CombatStunTime = other.CombatStunTime;
      }
      if (other.ProfessionsMinLevel != 0) {
        ProfessionsMinLevel = other.ProfessionsMinLevel;
      }
      if (other.AccuracyMinBonus != 0F) {
        AccuracyMinBonus = other.AccuracyMinBonus;
      }
      if (other.AccuracyMaxBonus != 0F) {
        AccuracyMaxBonus = other.AccuracyMaxBonus;
      }
      if (other.EncounterMinBaseWinRate != 0F) {
        EncounterMinBaseWinRate = other.EncounterMinBaseWinRate;
      }
      if (other.EncounterMaxBaseWinRate != 0F) {
        EncounterMaxBaseWinRate = other.EncounterMaxBaseWinRate;
      }
      if (other.PlayerLevelCap != 0) {
        PlayerLevelCap = other.PlayerLevelCap;
      }
      if (other.LevelBonusWeight != 0F) {
        LevelBonusWeight = other.LevelBonusWeight;
      }
      if (other.GameplayBonusWeight != 0F) {
        GameplayBonusWeight = other.GameplayBonusWeight;
      }
      if (other.GameplayBonusMin != 0F) {
        GameplayBonusMin = other.GameplayBonusMin;
      }
      if (other.GameplayBonusMax != 0F) {
        GameplayBonusMax = other.GameplayBonusMax;
      }
      if (other.ProfessionsRpsNonMatchImpact != 0F) {
        ProfessionsRpsNonMatchImpact = other.ProfessionsRpsNonMatchImpact;
      }
      if (other.ProfessionsRpsMatchImpact != 0F) {
        ProfessionsRpsMatchImpact = other.ProfessionsRpsMatchImpact;
      }
      if (other.PubMenuRefreshIntervalSeconds != 0L) {
        PubMenuRefreshIntervalSeconds = other.PubMenuRefreshIntervalSeconds;
      }
      if (other.flooNetworkConfig_ != null) {
        if (flooNetworkConfig_ == null) {
          FlooNetworkConfig = new global::WUProtos.Data.FlooNetworkConfig();
        }
        FlooNetworkConfig.MergeFrom(other.FlooNetworkConfig);
      }
      if (other.tempFlooNetworkConfig_ != null) {
        if (tempFlooNetworkConfig_ == null) {
          TempFlooNetworkConfig = new global::WUProtos.Data.TempFlooNetworkConfig();
        }
        TempFlooNetworkConfig.MergeFrom(other.TempFlooNetworkConfig);
      }
      if (other.MapUnsafeMoveSpeedMps != 0F) {
        MapUnsafeMoveSpeedMps = other.MapUnsafeMoveSpeedMps;
      }
      if (other.PortkeyNumWrackspurtsToCollect != 0) {
        PortkeyNumWrackspurtsToCollect = other.PortkeyNumWrackspurtsToCollect;
      }
      if (other.PortkeyNumWrackspurtsInEnv != 0) {
        PortkeyNumWrackspurtsInEnv = other.PortkeyNumWrackspurtsInEnv;
      }
      if (other.CauldronsNumQueueSlots != 0) {
        CauldronsNumQueueSlots = other.CauldronsNumQueueSlots;
      }
      swishGameAccuracyTiers_.Add(other.swishGameAccuracyTiers_);
      if (other.CauldronsInstantFinishCostPerSecond != 0F) {
        CauldronsInstantFinishCostPerSecond = other.CauldronsInstantFinishCostPerSecond;
      }
      if (other.CauldronsInstantFinishCurrencyId.Length != 0) {
        CauldronsInstantFinishCurrencyId = other.CauldronsInstantFinishCurrencyId;
      }
      if (other.TutorialEncounterId.Length != 0) {
        TutorialEncounterId = other.TutorialEncounterId;
      }
      if (other.TutorialEncounterFeatureFlagId.Length != 0) {
        TutorialEncounterFeatureFlagId = other.TutorialEncounterFeatureFlagId;
      }
      if (other.bonusConfig_ != null) {
        if (bonusConfig_ == null) {
          BonusConfig = new global::WUProtos.Data.BonusConfig();
        }
        BonusConfig.MergeFrom(other.BonusConfig);
      }
      if (other.MaxWalkboxCapacity != 0) {
        MaxWalkboxCapacity = other.MaxWalkboxCapacity;
      }
      if (other.ChallengeCollectionFamilyId.Length != 0) {
        ChallengeCollectionFamilyId = other.ChallengeCollectionFamilyId;
      }
      dailyQuestGmtIds_.Add(other.dailyQuestGmtIds_);
      if (other.CapPlayerLevelGmtId.Length != 0) {
        CapPlayerLevelGmtId = other.CapPlayerLevelGmtId;
      }
      if (other.GreenhouseCoolDownMs != 0L) {
        GreenhouseCoolDownMs = other.GreenhouseCoolDownMs;
      }
      if (other.InnCoolDownMs != 0L) {
        InnCoolDownMs = other.InnCoolDownMs;
      }
      if (other.InnMenuStalenessThresholdMs != 0L) {
        InnMenuStalenessThresholdMs = other.InnMenuStalenessThresholdMs;
      }
      if (other.DailyRewardScheduleGmtId.Length != 0) {
        DailyRewardScheduleGmtId = other.DailyRewardScheduleGmtId;
      }
      if (other.WcEncounterFirstInteractTimeoutMs != 0L) {
        WcEncounterFirstInteractTimeoutMs = other.WcEncounterFirstInteractTimeoutMs;
      }
      if (other.WcEncounterInteractTimeoutMs != 0L) {
        WcEncounterInteractTimeoutMs = other.WcEncounterInteractTimeoutMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardsVesselByRarity_.AddEntriesFrom(input, _repeated_rewardsVesselByRarity_codec);
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26:
          case 29: {
            swishScoringThresholds_.AddEntriesFrom(input, _repeated_swishScoringThresholds_codec);
            break;
          }
          case 37: {
            PickupRange = input.ReadFloat();
            break;
          }
          case 42:
          case 45: {
            swishScoringBonuses_.AddEntriesFrom(input, _repeated_swishScoringBonuses_codec);
            break;
          }
          case 48: {
            MapUpdateRate = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            flooContributionButtonValues_.AddEntriesFrom(input, _repeated_flooContributionButtonValues_codec);
            break;
          }
          case 64: {
            MapEventUpdateRate = input.ReadInt32();
            break;
          }
          case 74: {
            ftueVideoQualityBuckets_.AddEntriesFrom(input, _repeated_ftueVideoQualityBuckets_codec);
            break;
          }
          case 80: {
            MapPuzzleUpdateRate = input.ReadInt32();
            break;
          }
          case 93: {
            TryAgainBonusPerFailure = input.ReadFloat();
            break;
          }
          case 101: {
            ArModeRange = input.ReadFloat();
            break;
          }
          case 104: {
            ArModeMaxEncounters = input.ReadInt32();
            break;
          }
          case 112: {
            EventCoolDownDuration = input.ReadInt32();
            break;
          }
          case 120: {
            CombatStunTime = input.ReadInt32();
            break;
          }
          case 128: {
            ProfessionsMinLevel = input.ReadInt32();
            break;
          }
          case 141: {
            AccuracyMinBonus = input.ReadFloat();
            break;
          }
          case 149: {
            AccuracyMaxBonus = input.ReadFloat();
            break;
          }
          case 157: {
            EncounterMinBaseWinRate = input.ReadFloat();
            break;
          }
          case 165: {
            EncounterMaxBaseWinRate = input.ReadFloat();
            break;
          }
          case 168: {
            PlayerLevelCap = input.ReadInt32();
            break;
          }
          case 181: {
            LevelBonusWeight = input.ReadFloat();
            break;
          }
          case 189: {
            GameplayBonusWeight = input.ReadFloat();
            break;
          }
          case 197: {
            GameplayBonusMin = input.ReadFloat();
            break;
          }
          case 205: {
            GameplayBonusMax = input.ReadFloat();
            break;
          }
          case 213: {
            ProfessionsRpsNonMatchImpact = input.ReadFloat();
            break;
          }
          case 221: {
            ProfessionsRpsMatchImpact = input.ReadFloat();
            break;
          }
          case 224: {
            PubMenuRefreshIntervalSeconds = input.ReadInt64();
            break;
          }
          case 234: {
            if (flooNetworkConfig_ == null) {
              FlooNetworkConfig = new global::WUProtos.Data.FlooNetworkConfig();
            }
            input.ReadMessage(FlooNetworkConfig);
            break;
          }
          case 242: {
            if (tempFlooNetworkConfig_ == null) {
              TempFlooNetworkConfig = new global::WUProtos.Data.TempFlooNetworkConfig();
            }
            input.ReadMessage(TempFlooNetworkConfig);
            break;
          }
          case 253: {
            MapUnsafeMoveSpeedMps = input.ReadFloat();
            break;
          }
          case 256: {
            PortkeyNumWrackspurtsToCollect = input.ReadInt32();
            break;
          }
          case 264: {
            PortkeyNumWrackspurtsInEnv = input.ReadInt32();
            break;
          }
          case 272: {
            CauldronsNumQueueSlots = input.ReadInt32();
            break;
          }
          case 282:
          case 285: {
            swishGameAccuracyTiers_.AddEntriesFrom(input, _repeated_swishGameAccuracyTiers_codec);
            break;
          }
          case 293: {
            CauldronsInstantFinishCostPerSecond = input.ReadFloat();
            break;
          }
          case 298: {
            CauldronsInstantFinishCurrencyId = input.ReadString();
            break;
          }
          case 306: {
            TutorialEncounterId = input.ReadString();
            break;
          }
          case 314: {
            TutorialEncounterFeatureFlagId = input.ReadString();
            break;
          }
          case 322: {
            if (bonusConfig_ == null) {
              BonusConfig = new global::WUProtos.Data.BonusConfig();
            }
            input.ReadMessage(BonusConfig);
            break;
          }
          case 328: {
            MaxWalkboxCapacity = input.ReadInt32();
            break;
          }
          case 338: {
            ChallengeCollectionFamilyId = input.ReadString();
            break;
          }
          case 346: {
            dailyQuestGmtIds_.AddEntriesFrom(input, _repeated_dailyQuestGmtIds_codec);
            break;
          }
          case 354: {
            CapPlayerLevelGmtId = input.ReadString();
            break;
          }
          case 360: {
            GreenhouseCoolDownMs = input.ReadInt64();
            break;
          }
          case 368: {
            InnCoolDownMs = input.ReadInt64();
            break;
          }
          case 376: {
            InnMenuStalenessThresholdMs = input.ReadInt64();
            break;
          }
          case 386: {
            DailyRewardScheduleGmtId = input.ReadString();
            break;
          }
          case 392: {
            WcEncounterFirstInteractTimeoutMs = input.ReadInt64();
            break;
          }
          case 400: {
            WcEncounterInteractTimeoutMs = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ChallengeSoundContext {
        [pbr::OriginalName("THIRTY_SECONDS")] ThirtySeconds = 0,
        [pbr::OriginalName("PLAYER_WINS_BATTLE")] PlayerWinsBattle = 1,
        [pbr::OriginalName("PLAYER_LOSES_BATTLE")] PlayerLosesBattle = 2,
        [pbr::OriginalName("START_CHALLENGE")] StartChallenge = 3,
        [pbr::OriginalName("PLAYER_WINS_CHALLENGE")] PlayerWinsChallenge = 4,
        [pbr::OriginalName("PLAYER_LOSES_CHALLENGE")] PlayerLosesChallenge = 5,
        [pbr::OriginalName("ELITE_MOB_SPAWNS")] EliteMobSpawns = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
