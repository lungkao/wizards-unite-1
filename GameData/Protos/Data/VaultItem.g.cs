// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/VaultItem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/VaultItem.proto</summary>
  public static partial class VaultItemReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/VaultItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VaultItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1XVVByb3Rvcy9EYXRhL1ZhdWx0SXRlbS5wcm90bxINV1VQcm90b3MuRGF0",
            "YRolV1VQcm90b3MvRGF0YS9DdXJyZW5jeVZhdWx0SXRlbS5wcm90bxokV1VQ",
            "cm90b3MvRGF0YS9TdGFtaW5hVmF1bHRJdGVtLnByb3RvGilXVVByb3Rvcy9E",
            "YXRhL0RhcmtEZXRlY3RvclZhdWx0SXRlbS5wcm90bxomV1VQcm90b3MvRGF0",
            "YS9Db250YWluZXJWYXVsdEl0ZW0ucHJvdG8aJldVUHJvdG9zL0RhdGEvUnVu",
            "ZXN0b25lVmF1bHRJdGVtLnByb3RvGipXVVByb3Rvcy9EYXRhL1BvdGlvbi9Q",
            "b3Rpb25WYXVsdEl0ZW0ucHJvdG8aNFdVUHJvdG9zL0RhdGEvUG90aW9uL1Bv",
            "dGlvbkluZ3JlZGllbnRWYXVsdEl0ZW0ucHJvdG8aI1dVUHJvdG9zL0RhdGEv",
            "RW5lcmd5VmF1bHRJdGVtLnByb3RvGiRXVVByb3Rvcy9EYXRhL0NhdWxkcm9u",
            "VGltZUl0ZW0ucHJvdG8ioQYKCVZhdWx0SXRlbRIKCgJpZBgBIAEoCRI5Cg1j",
            "dXJyZW5jeV9pdGVtGAIgASgLMiAuV1VQcm90b3MuRGF0YS5DdXJyZW5jeVZh",
            "dWx0SXRlbUgAEjcKDHN0YW1pbmFfaXRlbRgDIAEoCzIfLldVUHJvdG9zLkRh",
            "dGEuU3RhbWluYVZhdWx0SXRlbUgAEj0KDWRldGVjdG9yX2l0ZW0YBCABKAsy",
            "JC5XVVByb3Rvcy5EYXRhLkRhcmtEZXRlY3RvclZhdWx0SXRlbUgAEjsKDmNv",
            "bnRhaW5lcl9pdGVtGAUgASgLMiEuV1VQcm90b3MuRGF0YS5Db250YWluZXJW",
            "YXVsdEl0ZW1IABI7Cg5ydW5lc3RvbmVfaXRlbRgGIAEoCzIhLldVUHJvdG9z",
            "LkRhdGEuUnVuZXN0b25lVmF1bHRJdGVtSAASPAoLcG90aW9uX2l0ZW0YByAB",
            "KAsyJS5XVVByb3Rvcy5EYXRhLlBvdGlvbi5Qb3Rpb25WYXVsdEl0ZW1IABJM",
            "ChFwb3Rpb25faW5ncmVkaWVudBgIIAEoCzIvLldVUHJvdG9zLkRhdGEuUG90",
            "aW9uLlBvdGlvbkluZ3JlZGllbnRWYXVsdEl0ZW1IABI1CgtlbmVyZ3lfaXRl",
            "bRgKIAEoCzIeLldVUHJvdG9zLkRhdGEuRW5lcmd5VmF1bHRJdGVtSAASPQoS",
            "Y2F1bGRyb25fdGltZV9pdGVtGAsgASgLMh8uV1VQcm90b3MuRGF0YS5DYXVs",
            "ZHJvblRpbWVJdGVtSAASCwoDY2FwGAkgASgDEhYKDnJlbGF0aXZlX3ZhbHVl",
            "GGQgASgFEh0KFXZhdWx0X2NhdGVnb3J5X2dtdF9pZBhlIAEoCSKDAQoPUG90",
            "aW9uU3RhdGVFbnVtEgoKBnVzYWJsZRAAEhAKDG1hcF91bnVzYWJsZRABEhEK",
            "DXBvdGlvbl9hY3RpdmUQAhITCg9zdHJvbmdlcl9hY3RpdmUQAxISCg5ocGFs",
            "cmVhZHlfZnVsbBAEEhYKEmZvY3VzX2FscmVhZHlfZnVsbBAFQg8KDVZhdWx0",
            "SXRlbVR5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.CurrencyVaultItemReflection.Descriptor, global::WUProtos.Data.StaminaVaultItemReflection.Descriptor, global::WUProtos.Data.DarkDetectorVaultItemReflection.Descriptor, global::WUProtos.Data.ContainerVaultItemReflection.Descriptor, global::WUProtos.Data.RunestoneVaultItemReflection.Descriptor, global::WUProtos.Data.Potion.PotionVaultItemReflection.Descriptor, global::WUProtos.Data.Potion.PotionIngredientVaultItemReflection.Descriptor, global::WUProtos.Data.EnergyVaultItemReflection.Descriptor, global::WUProtos.Data.CauldronTimeItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.VaultItem), global::WUProtos.Data.VaultItem.Parser, new[]{ "Id", "CurrencyItem", "StaminaItem", "DetectorItem", "ContainerItem", "RunestoneItem", "PotionItem", "PotionIngredient", "EnergyItem", "CauldronTimeItem", "Cap", "RelativeValue", "VaultCategoryGmtId" }, new[]{ "VaultItemType" }, new[]{ typeof(global::WUProtos.Data.VaultItem.Types.PotionStateEnum) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VaultItem : pb::IMessage<VaultItem> {
    private static readonly pb::MessageParser<VaultItem> _parser = new pb::MessageParser<VaultItem>(() => new VaultItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VaultItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.VaultItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VaultItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VaultItem(VaultItem other) : this() {
      id_ = other.id_;
      cap_ = other.cap_;
      relativeValue_ = other.relativeValue_;
      vaultCategoryGmtId_ = other.vaultCategoryGmtId_;
      switch (other.VaultItemTypeCase) {
        case VaultItemTypeOneofCase.CurrencyItem:
          CurrencyItem = other.CurrencyItem.Clone();
          break;
        case VaultItemTypeOneofCase.StaminaItem:
          StaminaItem = other.StaminaItem.Clone();
          break;
        case VaultItemTypeOneofCase.DetectorItem:
          DetectorItem = other.DetectorItem.Clone();
          break;
        case VaultItemTypeOneofCase.ContainerItem:
          ContainerItem = other.ContainerItem.Clone();
          break;
        case VaultItemTypeOneofCase.RunestoneItem:
          RunestoneItem = other.RunestoneItem.Clone();
          break;
        case VaultItemTypeOneofCase.PotionItem:
          PotionItem = other.PotionItem.Clone();
          break;
        case VaultItemTypeOneofCase.PotionIngredient:
          PotionIngredient = other.PotionIngredient.Clone();
          break;
        case VaultItemTypeOneofCase.EnergyItem:
          EnergyItem = other.EnergyItem.Clone();
          break;
        case VaultItemTypeOneofCase.CauldronTimeItem:
          CauldronTimeItem = other.CauldronTimeItem.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VaultItem Clone() {
      return new VaultItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency_item" field.</summary>
    public const int CurrencyItemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.CurrencyVaultItem CurrencyItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem ? (global::WUProtos.Data.CurrencyVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.CurrencyItem;
      }
    }

    /// <summary>Field number for the "stamina_item" field.</summary>
    public const int StaminaItemFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.StaminaVaultItem StaminaItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem ? (global::WUProtos.Data.StaminaVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.StaminaItem;
      }
    }

    /// <summary>Field number for the "detector_item" field.</summary>
    public const int DetectorItemFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.DarkDetectorVaultItem DetectorItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem ? (global::WUProtos.Data.DarkDetectorVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.DetectorItem;
      }
    }

    /// <summary>Field number for the "container_item" field.</summary>
    public const int ContainerItemFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ContainerVaultItem ContainerItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem ? (global::WUProtos.Data.ContainerVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.ContainerItem;
      }
    }

    /// <summary>Field number for the "runestone_item" field.</summary>
    public const int RunestoneItemFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.RunestoneVaultItem RunestoneItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem ? (global::WUProtos.Data.RunestoneVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.RunestoneItem;
      }
    }

    /// <summary>Field number for the "potion_item" field.</summary>
    public const int PotionItemFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Potion.PotionVaultItem PotionItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem ? (global::WUProtos.Data.Potion.PotionVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.PotionItem;
      }
    }

    /// <summary>Field number for the "potion_ingredient" field.</summary>
    public const int PotionIngredientFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Potion.PotionIngredientVaultItem PotionIngredient {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient ? (global::WUProtos.Data.Potion.PotionIngredientVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.PotionIngredient;
      }
    }

    /// <summary>Field number for the "energy_item" field.</summary>
    public const int EnergyItemFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.EnergyVaultItem EnergyItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem ? (global::WUProtos.Data.EnergyVaultItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.EnergyItem;
      }
    }

    /// <summary>Field number for the "cauldron_time_item" field.</summary>
    public const int CauldronTimeItemFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.CauldronTimeItem CauldronTimeItem {
      get { return vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem ? (global::WUProtos.Data.CauldronTimeItem) vaultItemType_ : null; }
      set {
        vaultItemType_ = value;
        vaultItemTypeCase_ = value == null ? VaultItemTypeOneofCase.None : VaultItemTypeOneofCase.CauldronTimeItem;
      }
    }

    /// <summary>Field number for the "cap" field.</summary>
    public const int CapFieldNumber = 9;
    private long cap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cap {
      get { return cap_; }
      set {
        cap_ = value;
      }
    }

    /// <summary>Field number for the "relative_value" field.</summary>
    public const int RelativeValueFieldNumber = 100;
    private int relativeValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelativeValue {
      get { return relativeValue_; }
      set {
        relativeValue_ = value;
      }
    }

    /// <summary>Field number for the "vault_category_gmt_id" field.</summary>
    public const int VaultCategoryGmtIdFieldNumber = 101;
    private string vaultCategoryGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VaultCategoryGmtId {
      get { return vaultCategoryGmtId_; }
      set {
        vaultCategoryGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object vaultItemType_;
    /// <summary>Enum of possible cases for the "VaultItemType" oneof.</summary>
    public enum VaultItemTypeOneofCase {
      None = 0,
      CurrencyItem = 2,
      StaminaItem = 3,
      DetectorItem = 4,
      ContainerItem = 5,
      RunestoneItem = 6,
      PotionItem = 7,
      PotionIngredient = 8,
      EnergyItem = 10,
      CauldronTimeItem = 11,
    }
    private VaultItemTypeOneofCase vaultItemTypeCase_ = VaultItemTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VaultItemTypeOneofCase VaultItemTypeCase {
      get { return vaultItemTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVaultItemType() {
      vaultItemTypeCase_ = VaultItemTypeOneofCase.None;
      vaultItemType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VaultItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VaultItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(CurrencyItem, other.CurrencyItem)) return false;
      if (!object.Equals(StaminaItem, other.StaminaItem)) return false;
      if (!object.Equals(DetectorItem, other.DetectorItem)) return false;
      if (!object.Equals(ContainerItem, other.ContainerItem)) return false;
      if (!object.Equals(RunestoneItem, other.RunestoneItem)) return false;
      if (!object.Equals(PotionItem, other.PotionItem)) return false;
      if (!object.Equals(PotionIngredient, other.PotionIngredient)) return false;
      if (!object.Equals(EnergyItem, other.EnergyItem)) return false;
      if (!object.Equals(CauldronTimeItem, other.CauldronTimeItem)) return false;
      if (Cap != other.Cap) return false;
      if (RelativeValue != other.RelativeValue) return false;
      if (VaultCategoryGmtId != other.VaultCategoryGmtId) return false;
      if (VaultItemTypeCase != other.VaultItemTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) hash ^= CurrencyItem.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) hash ^= StaminaItem.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) hash ^= DetectorItem.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) hash ^= ContainerItem.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) hash ^= RunestoneItem.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) hash ^= PotionItem.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) hash ^= PotionIngredient.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) hash ^= EnergyItem.GetHashCode();
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) hash ^= CauldronTimeItem.GetHashCode();
      if (Cap != 0L) hash ^= Cap.GetHashCode();
      if (RelativeValue != 0) hash ^= RelativeValue.GetHashCode();
      if (VaultCategoryGmtId.Length != 0) hash ^= VaultCategoryGmtId.GetHashCode();
      hash ^= (int) vaultItemTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) {
        output.WriteRawTag(18);
        output.WriteMessage(CurrencyItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) {
        output.WriteRawTag(26);
        output.WriteMessage(StaminaItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) {
        output.WriteRawTag(34);
        output.WriteMessage(DetectorItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) {
        output.WriteRawTag(42);
        output.WriteMessage(ContainerItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) {
        output.WriteRawTag(50);
        output.WriteMessage(RunestoneItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) {
        output.WriteRawTag(58);
        output.WriteMessage(PotionItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) {
        output.WriteRawTag(66);
        output.WriteMessage(PotionIngredient);
      }
      if (Cap != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Cap);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) {
        output.WriteRawTag(82);
        output.WriteMessage(EnergyItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) {
        output.WriteRawTag(90);
        output.WriteMessage(CauldronTimeItem);
      }
      if (RelativeValue != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(RelativeValue);
      }
      if (VaultCategoryGmtId.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(VaultCategoryGmtId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StaminaItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DetectorItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContainerItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunestoneItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PotionItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PotionIngredient);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnergyItem);
      }
      if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CauldronTimeItem);
      }
      if (Cap != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cap);
      }
      if (RelativeValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RelativeValue);
      }
      if (VaultCategoryGmtId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VaultCategoryGmtId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VaultItem other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Cap != 0L) {
        Cap = other.Cap;
      }
      if (other.RelativeValue != 0) {
        RelativeValue = other.RelativeValue;
      }
      if (other.VaultCategoryGmtId.Length != 0) {
        VaultCategoryGmtId = other.VaultCategoryGmtId;
      }
      switch (other.VaultItemTypeCase) {
        case VaultItemTypeOneofCase.CurrencyItem:
          if (CurrencyItem == null) {
            CurrencyItem = new global::WUProtos.Data.CurrencyVaultItem();
          }
          CurrencyItem.MergeFrom(other.CurrencyItem);
          break;
        case VaultItemTypeOneofCase.StaminaItem:
          if (StaminaItem == null) {
            StaminaItem = new global::WUProtos.Data.StaminaVaultItem();
          }
          StaminaItem.MergeFrom(other.StaminaItem);
          break;
        case VaultItemTypeOneofCase.DetectorItem:
          if (DetectorItem == null) {
            DetectorItem = new global::WUProtos.Data.DarkDetectorVaultItem();
          }
          DetectorItem.MergeFrom(other.DetectorItem);
          break;
        case VaultItemTypeOneofCase.ContainerItem:
          if (ContainerItem == null) {
            ContainerItem = new global::WUProtos.Data.ContainerVaultItem();
          }
          ContainerItem.MergeFrom(other.ContainerItem);
          break;
        case VaultItemTypeOneofCase.RunestoneItem:
          if (RunestoneItem == null) {
            RunestoneItem = new global::WUProtos.Data.RunestoneVaultItem();
          }
          RunestoneItem.MergeFrom(other.RunestoneItem);
          break;
        case VaultItemTypeOneofCase.PotionItem:
          if (PotionItem == null) {
            PotionItem = new global::WUProtos.Data.Potion.PotionVaultItem();
          }
          PotionItem.MergeFrom(other.PotionItem);
          break;
        case VaultItemTypeOneofCase.PotionIngredient:
          if (PotionIngredient == null) {
            PotionIngredient = new global::WUProtos.Data.Potion.PotionIngredientVaultItem();
          }
          PotionIngredient.MergeFrom(other.PotionIngredient);
          break;
        case VaultItemTypeOneofCase.EnergyItem:
          if (EnergyItem == null) {
            EnergyItem = new global::WUProtos.Data.EnergyVaultItem();
          }
          EnergyItem.MergeFrom(other.EnergyItem);
          break;
        case VaultItemTypeOneofCase.CauldronTimeItem:
          if (CauldronTimeItem == null) {
            CauldronTimeItem = new global::WUProtos.Data.CauldronTimeItem();
          }
          CauldronTimeItem.MergeFrom(other.CauldronTimeItem);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            global::WUProtos.Data.CurrencyVaultItem subBuilder = new global::WUProtos.Data.CurrencyVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CurrencyItem) {
              subBuilder.MergeFrom(CurrencyItem);
            }
            input.ReadMessage(subBuilder);
            CurrencyItem = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.StaminaVaultItem subBuilder = new global::WUProtos.Data.StaminaVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.StaminaItem) {
              subBuilder.MergeFrom(StaminaItem);
            }
            input.ReadMessage(subBuilder);
            StaminaItem = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.DarkDetectorVaultItem subBuilder = new global::WUProtos.Data.DarkDetectorVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.DetectorItem) {
              subBuilder.MergeFrom(DetectorItem);
            }
            input.ReadMessage(subBuilder);
            DetectorItem = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.ContainerVaultItem subBuilder = new global::WUProtos.Data.ContainerVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.ContainerItem) {
              subBuilder.MergeFrom(ContainerItem);
            }
            input.ReadMessage(subBuilder);
            ContainerItem = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.RunestoneVaultItem subBuilder = new global::WUProtos.Data.RunestoneVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.RunestoneItem) {
              subBuilder.MergeFrom(RunestoneItem);
            }
            input.ReadMessage(subBuilder);
            RunestoneItem = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.Potion.PotionVaultItem subBuilder = new global::WUProtos.Data.Potion.PotionVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionItem) {
              subBuilder.MergeFrom(PotionItem);
            }
            input.ReadMessage(subBuilder);
            PotionItem = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Potion.PotionIngredientVaultItem subBuilder = new global::WUProtos.Data.Potion.PotionIngredientVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.PotionIngredient) {
              subBuilder.MergeFrom(PotionIngredient);
            }
            input.ReadMessage(subBuilder);
            PotionIngredient = subBuilder;
            break;
          }
          case 72: {
            Cap = input.ReadInt64();
            break;
          }
          case 82: {
            global::WUProtos.Data.EnergyVaultItem subBuilder = new global::WUProtos.Data.EnergyVaultItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.EnergyItem) {
              subBuilder.MergeFrom(EnergyItem);
            }
            input.ReadMessage(subBuilder);
            EnergyItem = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.CauldronTimeItem subBuilder = new global::WUProtos.Data.CauldronTimeItem();
            if (vaultItemTypeCase_ == VaultItemTypeOneofCase.CauldronTimeItem) {
              subBuilder.MergeFrom(CauldronTimeItem);
            }
            input.ReadMessage(subBuilder);
            CauldronTimeItem = subBuilder;
            break;
          }
          case 800: {
            RelativeValue = input.ReadInt32();
            break;
          }
          case 810: {
            VaultCategoryGmtId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VaultItem message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PotionStateEnum {
        [pbr::OriginalName("usable")] Usable = 0,
        [pbr::OriginalName("map_unusable")] MapUnusable = 1,
        [pbr::OriginalName("potion_active")] PotionActive = 2,
        [pbr::OriginalName("stronger_active")] StrongerActive = 3,
        [pbr::OriginalName("hpalready_full")] HpalreadyFull = 4,
        [pbr::OriginalName("focus_already_full")] FocusAlreadyFull = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
