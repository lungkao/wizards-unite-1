// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Loot/LootReward.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Loot {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Loot/LootReward.proto</summary>
  public static partial class LootRewardReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Loot/LootReward.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LootRewardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNXVVByb3Rvcy9EYXRhL0xvb3QvTG9vdFJld2FyZC5wcm90bxISV1VQcm90",
            "b3MuRGF0YS5Mb290GidXVVByb3Rvcy9EYXRhL1ZhdWx0SXRlbUxvb3RSZXdh",
            "cmQucHJvdG8aOVdVUHJvdG9zL0RhdGEvQ29sbGVjdGlvbi9Db2xsZWN0aW9u",
            "RmFtaWx5TG9vdFJld2FyZC5wcm90bxozV1VQcm90b3MvRGF0YS9Db2xsZWN0",
            "aW9uL0NvbGxlY3Rpb25JdGVtUmV3YXJkLnByb3RvGiFXVVByb3Rvcy9EYXRh",
            "L1dhbGtib3hSZXdhcmQucHJvdG8aIVdVUHJvdG9zL0RhdGEvUG9ydGtleVJl",
            "d2FyZC5wcm90bxooV1VQcm90b3MvRGF0YS9Mb290L0xvb3RUYWJsZVJld2Fy",
            "ZC5wcm90bxorV1VQcm90b3MvRGF0YS9WYXVsdENhcGFjaXR5TG9vdFJld2Fy",
            "ZC5wcm90bxoqV1VQcm90b3MvRGF0YS9HZW5lcmljUnVuZXN0b25lUmV3YXJk",
            "LnByb3RvGidXVVByb3Rvcy9EYXRhL1BvdGlvbi9Qb3Rpb25SZXdhcmQucHJv",
            "dG8aLFdVUHJvdG9zL0RhdGEvUG9ydGtleUNvbGxlY3RpYmxlUmV3YXJkLnBy",
            "b3RvGjVXVVByb3Rvcy9EYXRhL0dlbmVyaWNDb2xsZWN0aW9uRmFtaWx5TG9v",
            "dFJld2FyZC5wcm90bxoiV1VQcm90b3MvRGF0YS9DYXVsZHJvblJld2FyZC5w",
            "cm90bxoiV1VQcm90b3MvRGF0YS9DdXJyZW5jeVJld2FyZC5wcm90bxofV1VQ",
            "cm90b3MvRGF0YS9RdWVzdFJld2FyZC5wcm90bxohV1VQcm90b3MvRGF0YS9C",
            "b251c01ldGFkYXRhLnByb3RvIowICgpMb290UmV3YXJkEjkKC2l0ZW1fcmV3",
            "YXJkGAEgASgLMiIuV1VQcm90b3MuRGF0YS5WYXVsdEl0ZW1Mb290UmV3YXJk",
            "SAASWAoYY29sbGVjdGlvbl9mYW1pbHlfcmV3YXJkGAIgASgLMjQuV1VQcm90",
            "b3MuRGF0YS5Db2xsZWN0aW9uLkNvbGxlY3Rpb25GYW1pbHlMb290UmV3YXJk",
            "SAASSwoRY29sbGVjdGlvbl9yZXdhcmQYAyABKAsyLi5XVVByb3Rvcy5EYXRh",
            "LkNvbGxlY3Rpb24uQ29sbGVjdGlvbkl0ZW1SZXdhcmRIABI2Cg53YWxrYm94",
            "X3Jld2FyZBgEIAEoCzIcLldVUHJvdG9zLkRhdGEuV2Fsa2JveFJld2FyZEgA",
            "EjYKDnBvcnRrZXlfcmV3YXJkGAUgASgLMhwuV1VQcm90b3MuRGF0YS5Qb3J0",
            "a2V5UmV3YXJkSAASQAoRbG9vdF90YWJsZV9yZXdhcmQYBiABKAsyIy5XVVBy",
            "b3Rvcy5EYXRhLkxvb3QuTG9vdFRhYmxlUmV3YXJkSAASRwoVdmF1bHRfY2Fw",
            "YWNpdHlfcmV3YXJkGAcgASgLMiYuV1VQcm90b3MuRGF0YS5WYXVsdENhcGFj",
            "aXR5TG9vdFJld2FyZEgAEkIKEWdlbmVyaWNfcnVuZXN0b25lGAggASgLMiUu",
            "V1VQcm90b3MuRGF0YS5HZW5lcmljUnVuZXN0b25lUmV3YXJkSAASOwoNcG90",
            "aW9uX3Jld2FyZBgJIAEoCzIiLldVUHJvdG9zLkRhdGEuUG90aW9uLlBvdGlv",
            "blJld2FyZEgAEkYKE3BvcnRrZXlfY29sbGVjdGlibGUYCiABKAsyJy5XVVBy",
            "b3Rvcy5EYXRhLlBvcnRrZXlDb2xsZWN0aWJsZVJld2FyZEgAElwKIGdlbmVy",
            "aWNfY29sbGVjdGlvbl9mYW1pbHlfcmV3YXJkGAsgASgLMjAuV1VQcm90b3Mu",
            "RGF0YS5HZW5lcmljQ29sbGVjdGlvbkZhbWlseUxvb3RSZXdhcmRIABI4Cg9j",
            "YXVsZHJvbl9yZXdhcmQYDCABKAsyHS5XVVByb3Rvcy5EYXRhLkNhdWxkcm9u",
            "UmV3YXJkSAASOAoPY3VycmVuY3lfcmV3YXJkGA0gASgLMh0uV1VQcm90b3Mu",
            "RGF0YS5DdXJyZW5jeVJld2FyZEgAEjIKDHF1ZXN0X3Jld2FyZBgOIAEoCzIa",
            "LldVUHJvdG9zLkRhdGEuUXVlc3RSZXdhcmRIABIOCgZhbW91bnQYDyABKAMS",
            "NAoOYm9udXNfbWV0YWRhdGEYZSABKAsyHC5XVVByb3Rvcy5EYXRhLkJvbnVz",
            "TWV0YWRhdGFCDAoKUmV3YXJkRGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.VaultItemLootRewardReflection.Descriptor, global::WUProtos.Data.Collection.CollectionFamilyLootRewardReflection.Descriptor, global::WUProtos.Data.Collection.CollectionItemRewardReflection.Descriptor, global::WUProtos.Data.WalkboxRewardReflection.Descriptor, global::WUProtos.Data.PortkeyRewardReflection.Descriptor, global::WUProtos.Data.Loot.LootTableRewardReflection.Descriptor, global::WUProtos.Data.VaultCapacityLootRewardReflection.Descriptor, global::WUProtos.Data.GenericRunestoneRewardReflection.Descriptor, global::WUProtos.Data.Potion.PotionRewardReflection.Descriptor, global::WUProtos.Data.PortkeyCollectibleRewardReflection.Descriptor, global::WUProtos.Data.GenericCollectionFamilyLootRewardReflection.Descriptor, global::WUProtos.Data.CauldronRewardReflection.Descriptor, global::WUProtos.Data.CurrencyRewardReflection.Descriptor, global::WUProtos.Data.QuestRewardReflection.Descriptor, global::WUProtos.Data.BonusMetadataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Loot.LootReward), global::WUProtos.Data.Loot.LootReward.Parser, new[]{ "ItemReward", "CollectionFamilyReward", "CollectionReward", "WalkboxReward", "PortkeyReward", "LootTableReward", "VaultCapacityReward", "GenericRunestone", "PotionReward", "PortkeyCollectible", "GenericCollectionFamilyReward", "CauldronReward", "CurrencyReward", "QuestReward", "Amount", "BonusMetadata" }, new[]{ "RewardData" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LootReward : pb::IMessage<LootReward> {
    private static readonly pb::MessageParser<LootReward> _parser = new pb::MessageParser<LootReward>(() => new LootReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LootReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Loot.LootRewardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootReward(LootReward other) : this() {
      amount_ = other.amount_;
      bonusMetadata_ = other.bonusMetadata_ != null ? other.bonusMetadata_.Clone() : null;
      switch (other.RewardDataCase) {
        case RewardDataOneofCase.ItemReward:
          ItemReward = other.ItemReward.Clone();
          break;
        case RewardDataOneofCase.CollectionFamilyReward:
          CollectionFamilyReward = other.CollectionFamilyReward.Clone();
          break;
        case RewardDataOneofCase.CollectionReward:
          CollectionReward = other.CollectionReward.Clone();
          break;
        case RewardDataOneofCase.WalkboxReward:
          WalkboxReward = other.WalkboxReward.Clone();
          break;
        case RewardDataOneofCase.PortkeyReward:
          PortkeyReward = other.PortkeyReward.Clone();
          break;
        case RewardDataOneofCase.LootTableReward:
          LootTableReward = other.LootTableReward.Clone();
          break;
        case RewardDataOneofCase.VaultCapacityReward:
          VaultCapacityReward = other.VaultCapacityReward.Clone();
          break;
        case RewardDataOneofCase.GenericRunestone:
          GenericRunestone = other.GenericRunestone.Clone();
          break;
        case RewardDataOneofCase.PotionReward:
          PotionReward = other.PotionReward.Clone();
          break;
        case RewardDataOneofCase.PortkeyCollectible:
          PortkeyCollectible = other.PortkeyCollectible.Clone();
          break;
        case RewardDataOneofCase.GenericCollectionFamilyReward:
          GenericCollectionFamilyReward = other.GenericCollectionFamilyReward.Clone();
          break;
        case RewardDataOneofCase.CauldronReward:
          CauldronReward = other.CauldronReward.Clone();
          break;
        case RewardDataOneofCase.CurrencyReward:
          CurrencyReward = other.CurrencyReward.Clone();
          break;
        case RewardDataOneofCase.QuestReward:
          QuestReward = other.QuestReward.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LootReward Clone() {
      return new LootReward(this);
    }

    /// <summary>Field number for the "item_reward" field.</summary>
    public const int ItemRewardFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.VaultItemLootReward ItemReward {
      get { return rewardDataCase_ == RewardDataOneofCase.ItemReward ? (global::WUProtos.Data.VaultItemLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.ItemReward;
      }
    }

    /// <summary>Field number for the "collection_family_reward" field.</summary>
    public const int CollectionFamilyRewardFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Collection.CollectionFamilyLootReward CollectionFamilyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward ? (global::WUProtos.Data.Collection.CollectionFamilyLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CollectionFamilyReward;
      }
    }

    /// <summary>Field number for the "collection_reward" field.</summary>
    public const int CollectionRewardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Collection.CollectionItemReward CollectionReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CollectionReward ? (global::WUProtos.Data.Collection.CollectionItemReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CollectionReward;
      }
    }

    /// <summary>Field number for the "walkbox_reward" field.</summary>
    public const int WalkboxRewardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.WalkboxReward WalkboxReward {
      get { return rewardDataCase_ == RewardDataOneofCase.WalkboxReward ? (global::WUProtos.Data.WalkboxReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.WalkboxReward;
      }
    }

    /// <summary>Field number for the "portkey_reward" field.</summary>
    public const int PortkeyRewardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.PortkeyReward PortkeyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.PortkeyReward ? (global::WUProtos.Data.PortkeyReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.PortkeyReward;
      }
    }

    /// <summary>Field number for the "loot_table_reward" field.</summary>
    public const int LootTableRewardFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootTableReward LootTableReward {
      get { return rewardDataCase_ == RewardDataOneofCase.LootTableReward ? (global::WUProtos.Data.Loot.LootTableReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.LootTableReward;
      }
    }

    /// <summary>Field number for the "vault_capacity_reward" field.</summary>
    public const int VaultCapacityRewardFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.VaultCapacityLootReward VaultCapacityReward {
      get { return rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward ? (global::WUProtos.Data.VaultCapacityLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.VaultCapacityReward;
      }
    }

    /// <summary>Field number for the "generic_runestone" field.</summary>
    public const int GenericRunestoneFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GenericRunestoneReward GenericRunestone {
      get { return rewardDataCase_ == RewardDataOneofCase.GenericRunestone ? (global::WUProtos.Data.GenericRunestoneReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.GenericRunestone;
      }
    }

    /// <summary>Field number for the "potion_reward" field.</summary>
    public const int PotionRewardFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Potion.PotionReward PotionReward {
      get { return rewardDataCase_ == RewardDataOneofCase.PotionReward ? (global::WUProtos.Data.Potion.PotionReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.PotionReward;
      }
    }

    /// <summary>Field number for the "portkey_collectible" field.</summary>
    public const int PortkeyCollectibleFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.PortkeyCollectibleReward PortkeyCollectible {
      get { return rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible ? (global::WUProtos.Data.PortkeyCollectibleReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.PortkeyCollectible;
      }
    }

    /// <summary>Field number for the "generic_collection_family_reward" field.</summary>
    public const int GenericCollectionFamilyRewardFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GenericCollectionFamilyLootReward GenericCollectionFamilyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward ? (global::WUProtos.Data.GenericCollectionFamilyLootReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.GenericCollectionFamilyReward;
      }
    }

    /// <summary>Field number for the "cauldron_reward" field.</summary>
    public const int CauldronRewardFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.CauldronReward CauldronReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CauldronReward ? (global::WUProtos.Data.CauldronReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CauldronReward;
      }
    }

    /// <summary>Field number for the "currency_reward" field.</summary>
    public const int CurrencyRewardFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.CurrencyReward CurrencyReward {
      get { return rewardDataCase_ == RewardDataOneofCase.CurrencyReward ? (global::WUProtos.Data.CurrencyReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.CurrencyReward;
      }
    }

    /// <summary>Field number for the "quest_reward" field.</summary>
    public const int QuestRewardFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.QuestReward QuestReward {
      get { return rewardDataCase_ == RewardDataOneofCase.QuestReward ? (global::WUProtos.Data.QuestReward) rewardData_ : null; }
      set {
        rewardData_ = value;
        rewardDataCase_ = value == null ? RewardDataOneofCase.None : RewardDataOneofCase.QuestReward;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 15;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "bonus_metadata" field.</summary>
    public const int BonusMetadataFieldNumber = 101;
    private global::WUProtos.Data.BonusMetadata bonusMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.BonusMetadata BonusMetadata {
      get { return bonusMetadata_; }
      set {
        bonusMetadata_ = value;
      }
    }

    private object rewardData_;
    /// <summary>Enum of possible cases for the "RewardData" oneof.</summary>
    public enum RewardDataOneofCase {
      None = 0,
      ItemReward = 1,
      CollectionFamilyReward = 2,
      CollectionReward = 3,
      WalkboxReward = 4,
      PortkeyReward = 5,
      LootTableReward = 6,
      VaultCapacityReward = 7,
      GenericRunestone = 8,
      PotionReward = 9,
      PortkeyCollectible = 10,
      GenericCollectionFamilyReward = 11,
      CauldronReward = 12,
      CurrencyReward = 13,
      QuestReward = 14,
    }
    private RewardDataOneofCase rewardDataCase_ = RewardDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardDataOneofCase RewardDataCase {
      get { return rewardDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRewardData() {
      rewardDataCase_ = RewardDataOneofCase.None;
      rewardData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LootReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LootReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ItemReward, other.ItemReward)) return false;
      if (!object.Equals(CollectionFamilyReward, other.CollectionFamilyReward)) return false;
      if (!object.Equals(CollectionReward, other.CollectionReward)) return false;
      if (!object.Equals(WalkboxReward, other.WalkboxReward)) return false;
      if (!object.Equals(PortkeyReward, other.PortkeyReward)) return false;
      if (!object.Equals(LootTableReward, other.LootTableReward)) return false;
      if (!object.Equals(VaultCapacityReward, other.VaultCapacityReward)) return false;
      if (!object.Equals(GenericRunestone, other.GenericRunestone)) return false;
      if (!object.Equals(PotionReward, other.PotionReward)) return false;
      if (!object.Equals(PortkeyCollectible, other.PortkeyCollectible)) return false;
      if (!object.Equals(GenericCollectionFamilyReward, other.GenericCollectionFamilyReward)) return false;
      if (!object.Equals(CauldronReward, other.CauldronReward)) return false;
      if (!object.Equals(CurrencyReward, other.CurrencyReward)) return false;
      if (!object.Equals(QuestReward, other.QuestReward)) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(BonusMetadata, other.BonusMetadata)) return false;
      if (RewardDataCase != other.RewardDataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rewardDataCase_ == RewardDataOneofCase.ItemReward) hash ^= ItemReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) hash ^= CollectionFamilyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) hash ^= CollectionReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) hash ^= WalkboxReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) hash ^= PortkeyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) hash ^= LootTableReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) hash ^= VaultCapacityReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) hash ^= GenericRunestone.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.PotionReward) hash ^= PotionReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) hash ^= PortkeyCollectible.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) hash ^= GenericCollectionFamilyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) hash ^= CauldronReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) hash ^= CurrencyReward.GetHashCode();
      if (rewardDataCase_ == RewardDataOneofCase.QuestReward) hash ^= QuestReward.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (bonusMetadata_ != null) hash ^= BonusMetadata.GetHashCode();
      hash ^= (int) rewardDataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rewardDataCase_ == RewardDataOneofCase.ItemReward) {
        output.WriteRawTag(10);
        output.WriteMessage(ItemReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) {
        output.WriteRawTag(18);
        output.WriteMessage(CollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) {
        output.WriteRawTag(26);
        output.WriteMessage(CollectionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) {
        output.WriteRawTag(34);
        output.WriteMessage(WalkboxReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) {
        output.WriteRawTag(42);
        output.WriteMessage(PortkeyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) {
        output.WriteRawTag(50);
        output.WriteMessage(LootTableReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) {
        output.WriteRawTag(58);
        output.WriteMessage(VaultCapacityReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) {
        output.WriteRawTag(66);
        output.WriteMessage(GenericRunestone);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PotionReward) {
        output.WriteRawTag(74);
        output.WriteMessage(PotionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) {
        output.WriteRawTag(82);
        output.WriteMessage(PortkeyCollectible);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) {
        output.WriteRawTag(90);
        output.WriteMessage(GenericCollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) {
        output.WriteRawTag(98);
        output.WriteMessage(CauldronReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) {
        output.WriteRawTag(106);
        output.WriteMessage(CurrencyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.QuestReward) {
        output.WriteRawTag(114);
        output.WriteMessage(QuestReward);
      }
      if (Amount != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(Amount);
      }
      if (bonusMetadata_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(BonusMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rewardDataCase_ == RewardDataOneofCase.ItemReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WalkboxReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LootTableReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultCapacityReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenericRunestone);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PotionReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PotionReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeyCollectible);
      }
      if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenericCollectionFamilyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CauldronReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyReward);
      }
      if (rewardDataCase_ == RewardDataOneofCase.QuestReward) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuestReward);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (bonusMetadata_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LootReward other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.bonusMetadata_ != null) {
        if (bonusMetadata_ == null) {
          BonusMetadata = new global::WUProtos.Data.BonusMetadata();
        }
        BonusMetadata.MergeFrom(other.BonusMetadata);
      }
      switch (other.RewardDataCase) {
        case RewardDataOneofCase.ItemReward:
          if (ItemReward == null) {
            ItemReward = new global::WUProtos.Data.VaultItemLootReward();
          }
          ItemReward.MergeFrom(other.ItemReward);
          break;
        case RewardDataOneofCase.CollectionFamilyReward:
          if (CollectionFamilyReward == null) {
            CollectionFamilyReward = new global::WUProtos.Data.Collection.CollectionFamilyLootReward();
          }
          CollectionFamilyReward.MergeFrom(other.CollectionFamilyReward);
          break;
        case RewardDataOneofCase.CollectionReward:
          if (CollectionReward == null) {
            CollectionReward = new global::WUProtos.Data.Collection.CollectionItemReward();
          }
          CollectionReward.MergeFrom(other.CollectionReward);
          break;
        case RewardDataOneofCase.WalkboxReward:
          if (WalkboxReward == null) {
            WalkboxReward = new global::WUProtos.Data.WalkboxReward();
          }
          WalkboxReward.MergeFrom(other.WalkboxReward);
          break;
        case RewardDataOneofCase.PortkeyReward:
          if (PortkeyReward == null) {
            PortkeyReward = new global::WUProtos.Data.PortkeyReward();
          }
          PortkeyReward.MergeFrom(other.PortkeyReward);
          break;
        case RewardDataOneofCase.LootTableReward:
          if (LootTableReward == null) {
            LootTableReward = new global::WUProtos.Data.Loot.LootTableReward();
          }
          LootTableReward.MergeFrom(other.LootTableReward);
          break;
        case RewardDataOneofCase.VaultCapacityReward:
          if (VaultCapacityReward == null) {
            VaultCapacityReward = new global::WUProtos.Data.VaultCapacityLootReward();
          }
          VaultCapacityReward.MergeFrom(other.VaultCapacityReward);
          break;
        case RewardDataOneofCase.GenericRunestone:
          if (GenericRunestone == null) {
            GenericRunestone = new global::WUProtos.Data.GenericRunestoneReward();
          }
          GenericRunestone.MergeFrom(other.GenericRunestone);
          break;
        case RewardDataOneofCase.PotionReward:
          if (PotionReward == null) {
            PotionReward = new global::WUProtos.Data.Potion.PotionReward();
          }
          PotionReward.MergeFrom(other.PotionReward);
          break;
        case RewardDataOneofCase.PortkeyCollectible:
          if (PortkeyCollectible == null) {
            PortkeyCollectible = new global::WUProtos.Data.PortkeyCollectibleReward();
          }
          PortkeyCollectible.MergeFrom(other.PortkeyCollectible);
          break;
        case RewardDataOneofCase.GenericCollectionFamilyReward:
          if (GenericCollectionFamilyReward == null) {
            GenericCollectionFamilyReward = new global::WUProtos.Data.GenericCollectionFamilyLootReward();
          }
          GenericCollectionFamilyReward.MergeFrom(other.GenericCollectionFamilyReward);
          break;
        case RewardDataOneofCase.CauldronReward:
          if (CauldronReward == null) {
            CauldronReward = new global::WUProtos.Data.CauldronReward();
          }
          CauldronReward.MergeFrom(other.CauldronReward);
          break;
        case RewardDataOneofCase.CurrencyReward:
          if (CurrencyReward == null) {
            CurrencyReward = new global::WUProtos.Data.CurrencyReward();
          }
          CurrencyReward.MergeFrom(other.CurrencyReward);
          break;
        case RewardDataOneofCase.QuestReward:
          if (QuestReward == null) {
            QuestReward = new global::WUProtos.Data.QuestReward();
          }
          QuestReward.MergeFrom(other.QuestReward);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.VaultItemLootReward subBuilder = new global::WUProtos.Data.VaultItemLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.ItemReward) {
              subBuilder.MergeFrom(ItemReward);
            }
            input.ReadMessage(subBuilder);
            ItemReward = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.Collection.CollectionFamilyLootReward subBuilder = new global::WUProtos.Data.Collection.CollectionFamilyLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.CollectionFamilyReward) {
              subBuilder.MergeFrom(CollectionFamilyReward);
            }
            input.ReadMessage(subBuilder);
            CollectionFamilyReward = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.Collection.CollectionItemReward subBuilder = new global::WUProtos.Data.Collection.CollectionItemReward();
            if (rewardDataCase_ == RewardDataOneofCase.CollectionReward) {
              subBuilder.MergeFrom(CollectionReward);
            }
            input.ReadMessage(subBuilder);
            CollectionReward = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.WalkboxReward subBuilder = new global::WUProtos.Data.WalkboxReward();
            if (rewardDataCase_ == RewardDataOneofCase.WalkboxReward) {
              subBuilder.MergeFrom(WalkboxReward);
            }
            input.ReadMessage(subBuilder);
            WalkboxReward = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.PortkeyReward subBuilder = new global::WUProtos.Data.PortkeyReward();
            if (rewardDataCase_ == RewardDataOneofCase.PortkeyReward) {
              subBuilder.MergeFrom(PortkeyReward);
            }
            input.ReadMessage(subBuilder);
            PortkeyReward = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.Loot.LootTableReward subBuilder = new global::WUProtos.Data.Loot.LootTableReward();
            if (rewardDataCase_ == RewardDataOneofCase.LootTableReward) {
              subBuilder.MergeFrom(LootTableReward);
            }
            input.ReadMessage(subBuilder);
            LootTableReward = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.VaultCapacityLootReward subBuilder = new global::WUProtos.Data.VaultCapacityLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.VaultCapacityReward) {
              subBuilder.MergeFrom(VaultCapacityReward);
            }
            input.ReadMessage(subBuilder);
            VaultCapacityReward = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.GenericRunestoneReward subBuilder = new global::WUProtos.Data.GenericRunestoneReward();
            if (rewardDataCase_ == RewardDataOneofCase.GenericRunestone) {
              subBuilder.MergeFrom(GenericRunestone);
            }
            input.ReadMessage(subBuilder);
            GenericRunestone = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.Potion.PotionReward subBuilder = new global::WUProtos.Data.Potion.PotionReward();
            if (rewardDataCase_ == RewardDataOneofCase.PotionReward) {
              subBuilder.MergeFrom(PotionReward);
            }
            input.ReadMessage(subBuilder);
            PotionReward = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.PortkeyCollectibleReward subBuilder = new global::WUProtos.Data.PortkeyCollectibleReward();
            if (rewardDataCase_ == RewardDataOneofCase.PortkeyCollectible) {
              subBuilder.MergeFrom(PortkeyCollectible);
            }
            input.ReadMessage(subBuilder);
            PortkeyCollectible = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.GenericCollectionFamilyLootReward subBuilder = new global::WUProtos.Data.GenericCollectionFamilyLootReward();
            if (rewardDataCase_ == RewardDataOneofCase.GenericCollectionFamilyReward) {
              subBuilder.MergeFrom(GenericCollectionFamilyReward);
            }
            input.ReadMessage(subBuilder);
            GenericCollectionFamilyReward = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.CauldronReward subBuilder = new global::WUProtos.Data.CauldronReward();
            if (rewardDataCase_ == RewardDataOneofCase.CauldronReward) {
              subBuilder.MergeFrom(CauldronReward);
            }
            input.ReadMessage(subBuilder);
            CauldronReward = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.CurrencyReward subBuilder = new global::WUProtos.Data.CurrencyReward();
            if (rewardDataCase_ == RewardDataOneofCase.CurrencyReward) {
              subBuilder.MergeFrom(CurrencyReward);
            }
            input.ReadMessage(subBuilder);
            CurrencyReward = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.QuestReward subBuilder = new global::WUProtos.Data.QuestReward();
            if (rewardDataCase_ == RewardDataOneofCase.QuestReward) {
              subBuilder.MergeFrom(QuestReward);
            }
            input.ReadMessage(subBuilder);
            QuestReward = subBuilder;
            break;
          }
          case 120: {
            Amount = input.ReadInt64();
            break;
          }
          case 810: {
            if (bonusMetadata_ == null) {
              BonusMetadata = new global::WUProtos.Data.BonusMetadata();
            }
            input.ReadMessage(BonusMetadata);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
