// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/ChamberMobState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/ChamberMobState.proto</summary>
  public static partial class ChamberMobStateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/ChamberMobState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChamberMobStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNXVVByb3Rvcy9EYXRhL0NoYW1iZXJNb2JTdGF0ZS5wcm90bxINV1VQcm90",
            "b3MuRGF0YRonV1VQcm90b3MvRGF0YS9CdWZmL0FjdGl2ZUJ1ZmZMaXN0LnBy",
            "b3RvGiFXVVByb3Rvcy9EYXRhL01vYi9Nb2JSZXdhcmQucHJvdG8imgIKD0No",
            "YW1iZXJNb2JTdGF0ZRIOCgZtb2JfaWQYASABKAwSGAoQZW5jb3VudGVyX2dt",
            "dF9pZBgCIAEoCRIKCgJocBgFIAEoAxIOCgZtYXhfaHAYBiABKAMSDQoFbGV2",
            "ZWwYByABKAUSGAoQZW5jb3VudGVyX3RpY2tldBgIIAEoDBIJCgF4GAkgASgB",
            "EgkKAXkYCiABKAESPAoQYWN0aXZlX2J1ZmZfbGlzdBgLIAEoCzIiLldVUHJv",
            "dG9zLkRhdGEuQnVmZi5BY3RpdmVCdWZmTGlzdBItCgdyZXdhcmRzGAwgAygL",
            "MhwuV1VQcm90b3MuRGF0YS5Nb2IuTW9iUmV3YXJkEhUKDXRpbWVfdG9fc3Bh",
            "d24YZSABKANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Buff.ActiveBuffListReflection.Descriptor, global::WUProtos.Data.Mob.MobRewardReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberMobState), global::WUProtos.Data.ChamberMobState.Parser, new[]{ "MobId", "EncounterGmtId", "Hp", "MaxHp", "Level", "EncounterTicket", "X", "Y", "ActiveBuffList", "Rewards", "TimeToSpawn" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChamberMobState : pb::IMessage<ChamberMobState> {
    private static readonly pb::MessageParser<ChamberMobState> _parser = new pb::MessageParser<ChamberMobState>(() => new ChamberMobState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChamberMobState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.ChamberMobStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberMobState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberMobState(ChamberMobState other) : this() {
      mobId_ = other.mobId_;
      encounterGmtId_ = other.encounterGmtId_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      level_ = other.level_;
      encounterTicket_ = other.encounterTicket_;
      x_ = other.x_;
      y_ = other.y_;
      activeBuffList_ = other.activeBuffList_ != null ? other.activeBuffList_.Clone() : null;
      rewards_ = other.rewards_.Clone();
      timeToSpawn_ = other.timeToSpawn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberMobState Clone() {
      return new ChamberMobState(this);
    }

    /// <summary>Field number for the "mob_id" field.</summary>
    public const int MobIdFieldNumber = 1;
    private pb::ByteString mobId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MobId {
      get { return mobId_; }
      set {
        mobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encounter_gmt_id" field.</summary>
    public const int EncounterGmtIdFieldNumber = 2;
    private string encounterGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncounterGmtId {
      get { return encounterGmtId_; }
      set {
        encounterGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 5;
    private long hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 6;
    private long maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "encounter_ticket" field.</summary>
    public const int EncounterTicketFieldNumber = 8;
    private pb::ByteString encounterTicket_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncounterTicket {
      get { return encounterTicket_; }
      set {
        encounterTicket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 9;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 10;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "active_buff_list" field.</summary>
    public const int ActiveBuffListFieldNumber = 11;
    private global::WUProtos.Data.Buff.ActiveBuffList activeBuffList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Buff.ActiveBuffList ActiveBuffList {
      get { return activeBuffList_; }
      set {
        activeBuffList_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::WUProtos.Data.Mob.MobReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(98, global::WUProtos.Data.Mob.MobReward.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.Mob.MobReward> rewards_ = new pbc::RepeatedField<global::WUProtos.Data.Mob.MobReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.Mob.MobReward> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "time_to_spawn" field.</summary>
    public const int TimeToSpawnFieldNumber = 101;
    private long timeToSpawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeToSpawn {
      get { return timeToSpawn_; }
      set {
        timeToSpawn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChamberMobState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChamberMobState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MobId != other.MobId) return false;
      if (EncounterGmtId != other.EncounterGmtId) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Level != other.Level) return false;
      if (EncounterTicket != other.EncounterTicket) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!object.Equals(ActiveBuffList, other.ActiveBuffList)) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if (TimeToSpawn != other.TimeToSpawn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MobId.Length != 0) hash ^= MobId.GetHashCode();
      if (EncounterGmtId.Length != 0) hash ^= EncounterGmtId.GetHashCode();
      if (Hp != 0L) hash ^= Hp.GetHashCode();
      if (MaxHp != 0L) hash ^= MaxHp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (EncounterTicket.Length != 0) hash ^= EncounterTicket.GetHashCode();
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (activeBuffList_ != null) hash ^= ActiveBuffList.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (TimeToSpawn != 0L) hash ^= TimeToSpawn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MobId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MobId);
      }
      if (EncounterGmtId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EncounterGmtId);
      }
      if (Hp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Hp);
      }
      if (MaxHp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxHp);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (EncounterTicket.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(EncounterTicket);
      }
      if (X != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Y);
      }
      if (activeBuffList_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ActiveBuffList);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (TimeToSpawn != 0L) {
        output.WriteRawTag(168, 6);
        output.WriteInt64(TimeToSpawn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MobId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MobId);
      }
      if (EncounterGmtId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterGmtId);
      }
      if (Hp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
      }
      if (MaxHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (EncounterTicket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncounterTicket);
      }
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (activeBuffList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveBuffList);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (TimeToSpawn != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TimeToSpawn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChamberMobState other) {
      if (other == null) {
        return;
      }
      if (other.MobId.Length != 0) {
        MobId = other.MobId;
      }
      if (other.EncounterGmtId.Length != 0) {
        EncounterGmtId = other.EncounterGmtId;
      }
      if (other.Hp != 0L) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0L) {
        MaxHp = other.MaxHp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.EncounterTicket.Length != 0) {
        EncounterTicket = other.EncounterTicket;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.activeBuffList_ != null) {
        if (activeBuffList_ == null) {
          ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
        }
        ActiveBuffList.MergeFrom(other.ActiveBuffList);
      }
      rewards_.Add(other.rewards_);
      if (other.TimeToSpawn != 0L) {
        TimeToSpawn = other.TimeToSpawn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MobId = input.ReadBytes();
            break;
          }
          case 18: {
            EncounterGmtId = input.ReadString();
            break;
          }
          case 40: {
            Hp = input.ReadInt64();
            break;
          }
          case 48: {
            MaxHp = input.ReadInt64();
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 66: {
            EncounterTicket = input.ReadBytes();
            break;
          }
          case 73: {
            X = input.ReadDouble();
            break;
          }
          case 81: {
            Y = input.ReadDouble();
            break;
          }
          case 90: {
            if (activeBuffList_ == null) {
              ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
            }
            input.ReadMessage(ActiveBuffList);
            break;
          }
          case 98: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 808: {
            TimeToSpawn = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
