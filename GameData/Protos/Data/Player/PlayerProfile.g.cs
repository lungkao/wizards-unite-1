// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Player/PlayerProfile.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Player {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Player/PlayerProfile.proto</summary>
  public static partial class PlayerProfileReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Player/PlayerProfile.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerProfileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihXVVByb3Rvcy9EYXRhL1BsYXllci9QbGF5ZXJQcm9maWxlLnByb3RvEhRX",
            "VVByb3Rvcy5EYXRhLlBsYXllchodV1VQcm90b3MvRGF0YS9FbWFpbE9wdHMu",
            "cHJvdG8i6AUKDVBsYXllclByb2ZpbGUSEAoIbmlja25hbWUYASABKAkSDQoF",
            "bGV2ZWwYAiABKAUSGgoSZGlzdGFuY2Vfd2Fsa2VkX2ttGAMgASgCEg4KBm1h",
            "eF9ocBgEIAEoAxIUCgxhdHRhY2tfcG93ZXIYBSABKAMSFgoOcGxheWVyX3Rl",
            "YW1faWQYBiABKAkSFQoNcHJvZmVzc2lvbl9pZBgHIAEoCRIQCgh0aXRsZV9p",
            "ZBgIIAEoCRIaChJ1bmxvY2tlZF90aXRsZV9pZHMYCSADKAkSEAoIdGhlbWVf",
            "aWQYCiABKAkSGgoSdW5sb2NrZWRfdGhlbWVfaWRzGAsgAygJEhAKCGhvdXNl",
            "X2lkGAwgASgJEj0KBHdhbmQYDSABKAsyLy5XVVByb3Rvcy5EYXRhLlBsYXll",
            "ci5QbGF5ZXJQcm9maWxlLldhbmRPcHRpb25zEhoKEmZhdm9yaXRlX2JhZGdl",
            "X2lkcxgOIAMoCRIaChJ1bmxvY2tlZF9iYWRnZV9pZHMYDyADKAkSGgoSZmF2",
            "b3JpdGVfdGl0bGVfaWRzGBAgAygJEhIKCmZpcnN0X25hbWUYESABKAkSEQoJ",
            "bGFzdF9uYW1lGBIgASgJEiEKGXByb2ZpbGVfY3JlYXRpb25fbG9jYXRpb24Y",
            "EyABKAkSIQoZdW5sb2NrZWRfc2VsZmllX2Fzc2V0X2lkcxgUIAMoCRIhChl0",
            "b3RhbF9zd2lzaF9zdWNjZXNzX3NwZWxsGBUgASgDEioKImRpc2NvdmVyZWRf",
            "cG90aW9uc19tYXN0ZXJfbm90ZV9pZHMYFiADKAkSLAoKZW1haWxfb3B0cxga",
            "IAEoCzIYLldVUHJvdG9zLkRhdGEuRW1haWxPcHRzGloKC1dhbmRPcHRpb25z",
            "Eg8KB2NvcmVfaWQYASABKAkSDwoHd29vZF9pZBgCIAEoCRIWCg5mbGV4aWJp",
            "bGl0eV9pZBgDIAEoCRIRCglsZW5ndGhfaWQYBCABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.EmailOptsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Player.PlayerProfile), global::WUProtos.Data.Player.PlayerProfile.Parser, new[]{ "Nickname", "Level", "DistanceWalkedKm", "MaxHp", "AttackPower", "PlayerTeamId", "ProfessionId", "TitleId", "UnlockedTitleIds", "ThemeId", "UnlockedThemeIds", "HouseId", "Wand", "FavoriteBadgeIds", "UnlockedBadgeIds", "FavoriteTitleIds", "FirstName", "LastName", "ProfileCreationLocation", "UnlockedSelfieAssetIds", "TotalSwishSuccessSpell", "DiscoveredPotionsMasterNoteIds", "EmailOpts" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Player.PlayerProfile.Types.WandOptions), global::WUProtos.Data.Player.PlayerProfile.Types.WandOptions.Parser, new[]{ "CoreId", "WoodId", "FlexibilityId", "LengthId" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerProfile : pb::IMessage<PlayerProfile> {
    private static readonly pb::MessageParser<PlayerProfile> _parser = new pb::MessageParser<PlayerProfile>(() => new PlayerProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Player.PlayerProfileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile(PlayerProfile other) : this() {
      nickname_ = other.nickname_;
      level_ = other.level_;
      distanceWalkedKm_ = other.distanceWalkedKm_;
      maxHp_ = other.maxHp_;
      attackPower_ = other.attackPower_;
      playerTeamId_ = other.playerTeamId_;
      professionId_ = other.professionId_;
      titleId_ = other.titleId_;
      unlockedTitleIds_ = other.unlockedTitleIds_.Clone();
      themeId_ = other.themeId_;
      unlockedThemeIds_ = other.unlockedThemeIds_.Clone();
      houseId_ = other.houseId_;
      wand_ = other.wand_ != null ? other.wand_.Clone() : null;
      favoriteBadgeIds_ = other.favoriteBadgeIds_.Clone();
      unlockedBadgeIds_ = other.unlockedBadgeIds_.Clone();
      favoriteTitleIds_ = other.favoriteTitleIds_.Clone();
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      profileCreationLocation_ = other.profileCreationLocation_;
      unlockedSelfieAssetIds_ = other.unlockedSelfieAssetIds_.Clone();
      totalSwishSuccessSpell_ = other.totalSwishSuccessSpell_;
      discoveredPotionsMasterNoteIds_ = other.discoveredPotionsMasterNoteIds_.Clone();
      emailOpts_ = other.emailOpts_ != null ? other.emailOpts_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProfile Clone() {
      return new PlayerProfile(this);
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "distance_walked_km" field.</summary>
    public const int DistanceWalkedKmFieldNumber = 3;
    private float distanceWalkedKm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DistanceWalkedKm {
      get { return distanceWalkedKm_; }
      set {
        distanceWalkedKm_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 4;
    private long maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "attack_power" field.</summary>
    public const int AttackPowerFieldNumber = 5;
    private long attackPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttackPower {
      get { return attackPower_; }
      set {
        attackPower_ = value;
      }
    }

    /// <summary>Field number for the "player_team_id" field.</summary>
    public const int PlayerTeamIdFieldNumber = 6;
    private string playerTeamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerTeamId {
      get { return playerTeamId_; }
      set {
        playerTeamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profession_id" field.</summary>
    public const int ProfessionIdFieldNumber = 7;
    private string professionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfessionId {
      get { return professionId_; }
      set {
        professionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 8;
    private string titleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleId {
      get { return titleId_; }
      set {
        titleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unlocked_title_ids" field.</summary>
    public const int UnlockedTitleIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_unlockedTitleIds_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> unlockedTitleIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnlockedTitleIds {
      get { return unlockedTitleIds_; }
    }

    /// <summary>Field number for the "theme_id" field.</summary>
    public const int ThemeIdFieldNumber = 10;
    private string themeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThemeId {
      get { return themeId_; }
      set {
        themeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unlocked_theme_ids" field.</summary>
    public const int UnlockedThemeIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_unlockedThemeIds_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> unlockedThemeIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnlockedThemeIds {
      get { return unlockedThemeIds_; }
    }

    /// <summary>Field number for the "house_id" field.</summary>
    public const int HouseIdFieldNumber = 12;
    private string houseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HouseId {
      get { return houseId_; }
      set {
        houseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wand" field.</summary>
    public const int WandFieldNumber = 13;
    private global::WUProtos.Data.Player.PlayerProfile.Types.WandOptions wand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Player.PlayerProfile.Types.WandOptions Wand {
      get { return wand_; }
      set {
        wand_ = value;
      }
    }

    /// <summary>Field number for the "favorite_badge_ids" field.</summary>
    public const int FavoriteBadgeIdsFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_favoriteBadgeIds_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> favoriteBadgeIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FavoriteBadgeIds {
      get { return favoriteBadgeIds_; }
    }

    /// <summary>Field number for the "unlocked_badge_ids" field.</summary>
    public const int UnlockedBadgeIdsFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_unlockedBadgeIds_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> unlockedBadgeIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnlockedBadgeIds {
      get { return unlockedBadgeIds_; }
    }

    /// <summary>Field number for the "favorite_title_ids" field.</summary>
    public const int FavoriteTitleIdsFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_favoriteTitleIds_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> favoriteTitleIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FavoriteTitleIds {
      get { return favoriteTitleIds_; }
    }

    /// <summary>Field number for the "first_name" field.</summary>
    public const int FirstNameFieldNumber = 17;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_name" field.</summary>
    public const int LastNameFieldNumber = 18;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profile_creation_location" field.</summary>
    public const int ProfileCreationLocationFieldNumber = 19;
    private string profileCreationLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfileCreationLocation {
      get { return profileCreationLocation_; }
      set {
        profileCreationLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unlocked_selfie_asset_ids" field.</summary>
    public const int UnlockedSelfieAssetIdsFieldNumber = 20;
    private static readonly pb::FieldCodec<string> _repeated_unlockedSelfieAssetIds_codec
        = pb::FieldCodec.ForString(162);
    private readonly pbc::RepeatedField<string> unlockedSelfieAssetIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UnlockedSelfieAssetIds {
      get { return unlockedSelfieAssetIds_; }
    }

    /// <summary>Field number for the "total_swish_success_spell" field.</summary>
    public const int TotalSwishSuccessSpellFieldNumber = 21;
    private long totalSwishSuccessSpell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSwishSuccessSpell {
      get { return totalSwishSuccessSpell_; }
      set {
        totalSwishSuccessSpell_ = value;
      }
    }

    /// <summary>Field number for the "discovered_potions_master_note_ids" field.</summary>
    public const int DiscoveredPotionsMasterNoteIdsFieldNumber = 22;
    private static readonly pb::FieldCodec<string> _repeated_discoveredPotionsMasterNoteIds_codec
        = pb::FieldCodec.ForString(178);
    private readonly pbc::RepeatedField<string> discoveredPotionsMasterNoteIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DiscoveredPotionsMasterNoteIds {
      get { return discoveredPotionsMasterNoteIds_; }
    }

    /// <summary>Field number for the "email_opts" field.</summary>
    public const int EmailOptsFieldNumber = 26;
    private global::WUProtos.Data.EmailOpts emailOpts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.EmailOpts EmailOpts {
      get { return emailOpts_; }
      set {
        emailOpts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DistanceWalkedKm, other.DistanceWalkedKm)) return false;
      if (MaxHp != other.MaxHp) return false;
      if (AttackPower != other.AttackPower) return false;
      if (PlayerTeamId != other.PlayerTeamId) return false;
      if (ProfessionId != other.ProfessionId) return false;
      if (TitleId != other.TitleId) return false;
      if(!unlockedTitleIds_.Equals(other.unlockedTitleIds_)) return false;
      if (ThemeId != other.ThemeId) return false;
      if(!unlockedThemeIds_.Equals(other.unlockedThemeIds_)) return false;
      if (HouseId != other.HouseId) return false;
      if (!object.Equals(Wand, other.Wand)) return false;
      if(!favoriteBadgeIds_.Equals(other.favoriteBadgeIds_)) return false;
      if(!unlockedBadgeIds_.Equals(other.unlockedBadgeIds_)) return false;
      if(!favoriteTitleIds_.Equals(other.favoriteTitleIds_)) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (ProfileCreationLocation != other.ProfileCreationLocation) return false;
      if(!unlockedSelfieAssetIds_.Equals(other.unlockedSelfieAssetIds_)) return false;
      if (TotalSwishSuccessSpell != other.TotalSwishSuccessSpell) return false;
      if(!discoveredPotionsMasterNoteIds_.Equals(other.discoveredPotionsMasterNoteIds_)) return false;
      if (!object.Equals(EmailOpts, other.EmailOpts)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (DistanceWalkedKm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DistanceWalkedKm);
      if (MaxHp != 0L) hash ^= MaxHp.GetHashCode();
      if (AttackPower != 0L) hash ^= AttackPower.GetHashCode();
      if (PlayerTeamId.Length != 0) hash ^= PlayerTeamId.GetHashCode();
      if (ProfessionId.Length != 0) hash ^= ProfessionId.GetHashCode();
      if (TitleId.Length != 0) hash ^= TitleId.GetHashCode();
      hash ^= unlockedTitleIds_.GetHashCode();
      if (ThemeId.Length != 0) hash ^= ThemeId.GetHashCode();
      hash ^= unlockedThemeIds_.GetHashCode();
      if (HouseId.Length != 0) hash ^= HouseId.GetHashCode();
      if (wand_ != null) hash ^= Wand.GetHashCode();
      hash ^= favoriteBadgeIds_.GetHashCode();
      hash ^= unlockedBadgeIds_.GetHashCode();
      hash ^= favoriteTitleIds_.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (ProfileCreationLocation.Length != 0) hash ^= ProfileCreationLocation.GetHashCode();
      hash ^= unlockedSelfieAssetIds_.GetHashCode();
      if (TotalSwishSuccessSpell != 0L) hash ^= TotalSwishSuccessSpell.GetHashCode();
      hash ^= discoveredPotionsMasterNoteIds_.GetHashCode();
      if (emailOpts_ != null) hash ^= EmailOpts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (DistanceWalkedKm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DistanceWalkedKm);
      }
      if (MaxHp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxHp);
      }
      if (AttackPower != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AttackPower);
      }
      if (PlayerTeamId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PlayerTeamId);
      }
      if (ProfessionId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProfessionId);
      }
      if (TitleId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TitleId);
      }
      unlockedTitleIds_.WriteTo(output, _repeated_unlockedTitleIds_codec);
      if (ThemeId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ThemeId);
      }
      unlockedThemeIds_.WriteTo(output, _repeated_unlockedThemeIds_codec);
      if (HouseId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(HouseId);
      }
      if (wand_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Wand);
      }
      favoriteBadgeIds_.WriteTo(output, _repeated_favoriteBadgeIds_codec);
      unlockedBadgeIds_.WriteTo(output, _repeated_unlockedBadgeIds_codec);
      favoriteTitleIds_.WriteTo(output, _repeated_favoriteTitleIds_codec);
      if (FirstName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(LastName);
      }
      if (ProfileCreationLocation.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ProfileCreationLocation);
      }
      unlockedSelfieAssetIds_.WriteTo(output, _repeated_unlockedSelfieAssetIds_codec);
      if (TotalSwishSuccessSpell != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TotalSwishSuccessSpell);
      }
      discoveredPotionsMasterNoteIds_.WriteTo(output, _repeated_discoveredPotionsMasterNoteIds_codec);
      if (emailOpts_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(EmailOpts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (DistanceWalkedKm != 0F) {
        size += 1 + 4;
      }
      if (MaxHp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHp);
      }
      if (AttackPower != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttackPower);
      }
      if (PlayerTeamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerTeamId);
      }
      if (ProfessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionId);
      }
      if (TitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleId);
      }
      size += unlockedTitleIds_.CalculateSize(_repeated_unlockedTitleIds_codec);
      if (ThemeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThemeId);
      }
      size += unlockedThemeIds_.CalculateSize(_repeated_unlockedThemeIds_codec);
      if (HouseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HouseId);
      }
      if (wand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wand);
      }
      size += favoriteBadgeIds_.CalculateSize(_repeated_favoriteBadgeIds_codec);
      size += unlockedBadgeIds_.CalculateSize(_repeated_unlockedBadgeIds_codec);
      size += favoriteTitleIds_.CalculateSize(_repeated_favoriteTitleIds_codec);
      if (FirstName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (ProfileCreationLocation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProfileCreationLocation);
      }
      size += unlockedSelfieAssetIds_.CalculateSize(_repeated_unlockedSelfieAssetIds_codec);
      if (TotalSwishSuccessSpell != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalSwishSuccessSpell);
      }
      size += discoveredPotionsMasterNoteIds_.CalculateSize(_repeated_discoveredPotionsMasterNoteIds_codec);
      if (emailOpts_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EmailOpts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerProfile other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.DistanceWalkedKm != 0F) {
        DistanceWalkedKm = other.DistanceWalkedKm;
      }
      if (other.MaxHp != 0L) {
        MaxHp = other.MaxHp;
      }
      if (other.AttackPower != 0L) {
        AttackPower = other.AttackPower;
      }
      if (other.PlayerTeamId.Length != 0) {
        PlayerTeamId = other.PlayerTeamId;
      }
      if (other.ProfessionId.Length != 0) {
        ProfessionId = other.ProfessionId;
      }
      if (other.TitleId.Length != 0) {
        TitleId = other.TitleId;
      }
      unlockedTitleIds_.Add(other.unlockedTitleIds_);
      if (other.ThemeId.Length != 0) {
        ThemeId = other.ThemeId;
      }
      unlockedThemeIds_.Add(other.unlockedThemeIds_);
      if (other.HouseId.Length != 0) {
        HouseId = other.HouseId;
      }
      if (other.wand_ != null) {
        if (wand_ == null) {
          Wand = new global::WUProtos.Data.Player.PlayerProfile.Types.WandOptions();
        }
        Wand.MergeFrom(other.Wand);
      }
      favoriteBadgeIds_.Add(other.favoriteBadgeIds_);
      unlockedBadgeIds_.Add(other.unlockedBadgeIds_);
      favoriteTitleIds_.Add(other.favoriteTitleIds_);
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.ProfileCreationLocation.Length != 0) {
        ProfileCreationLocation = other.ProfileCreationLocation;
      }
      unlockedSelfieAssetIds_.Add(other.unlockedSelfieAssetIds_);
      if (other.TotalSwishSuccessSpell != 0L) {
        TotalSwishSuccessSpell = other.TotalSwishSuccessSpell;
      }
      discoveredPotionsMasterNoteIds_.Add(other.discoveredPotionsMasterNoteIds_);
      if (other.emailOpts_ != null) {
        if (emailOpts_ == null) {
          EmailOpts = new global::WUProtos.Data.EmailOpts();
        }
        EmailOpts.MergeFrom(other.EmailOpts);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 29: {
            DistanceWalkedKm = input.ReadFloat();
            break;
          }
          case 32: {
            MaxHp = input.ReadInt64();
            break;
          }
          case 40: {
            AttackPower = input.ReadInt64();
            break;
          }
          case 50: {
            PlayerTeamId = input.ReadString();
            break;
          }
          case 58: {
            ProfessionId = input.ReadString();
            break;
          }
          case 66: {
            TitleId = input.ReadString();
            break;
          }
          case 74: {
            unlockedTitleIds_.AddEntriesFrom(input, _repeated_unlockedTitleIds_codec);
            break;
          }
          case 82: {
            ThemeId = input.ReadString();
            break;
          }
          case 90: {
            unlockedThemeIds_.AddEntriesFrom(input, _repeated_unlockedThemeIds_codec);
            break;
          }
          case 98: {
            HouseId = input.ReadString();
            break;
          }
          case 106: {
            if (wand_ == null) {
              Wand = new global::WUProtos.Data.Player.PlayerProfile.Types.WandOptions();
            }
            input.ReadMessage(Wand);
            break;
          }
          case 114: {
            favoriteBadgeIds_.AddEntriesFrom(input, _repeated_favoriteBadgeIds_codec);
            break;
          }
          case 122: {
            unlockedBadgeIds_.AddEntriesFrom(input, _repeated_unlockedBadgeIds_codec);
            break;
          }
          case 130: {
            favoriteTitleIds_.AddEntriesFrom(input, _repeated_favoriteTitleIds_codec);
            break;
          }
          case 138: {
            FirstName = input.ReadString();
            break;
          }
          case 146: {
            LastName = input.ReadString();
            break;
          }
          case 154: {
            ProfileCreationLocation = input.ReadString();
            break;
          }
          case 162: {
            unlockedSelfieAssetIds_.AddEntriesFrom(input, _repeated_unlockedSelfieAssetIds_codec);
            break;
          }
          case 168: {
            TotalSwishSuccessSpell = input.ReadInt64();
            break;
          }
          case 178: {
            discoveredPotionsMasterNoteIds_.AddEntriesFrom(input, _repeated_discoveredPotionsMasterNoteIds_codec);
            break;
          }
          case 210: {
            if (emailOpts_ == null) {
              EmailOpts = new global::WUProtos.Data.EmailOpts();
            }
            input.ReadMessage(EmailOpts);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerProfile message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class WandOptions : pb::IMessage<WandOptions> {
        private static readonly pb::MessageParser<WandOptions> _parser = new pb::MessageParser<WandOptions>(() => new WandOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WandOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.Player.PlayerProfile.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WandOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WandOptions(WandOptions other) : this() {
          coreId_ = other.coreId_;
          woodId_ = other.woodId_;
          flexibilityId_ = other.flexibilityId_;
          lengthId_ = other.lengthId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WandOptions Clone() {
          return new WandOptions(this);
        }

        /// <summary>Field number for the "core_id" field.</summary>
        public const int CoreIdFieldNumber = 1;
        private string coreId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CoreId {
          get { return coreId_; }
          set {
            coreId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "wood_id" field.</summary>
        public const int WoodIdFieldNumber = 2;
        private string woodId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string WoodId {
          get { return woodId_; }
          set {
            woodId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "flexibility_id" field.</summary>
        public const int FlexibilityIdFieldNumber = 3;
        private string flexibilityId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FlexibilityId {
          get { return flexibilityId_; }
          set {
            flexibilityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "length_id" field.</summary>
        public const int LengthIdFieldNumber = 4;
        private string lengthId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LengthId {
          get { return lengthId_; }
          set {
            lengthId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WandOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WandOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CoreId != other.CoreId) return false;
          if (WoodId != other.WoodId) return false;
          if (FlexibilityId != other.FlexibilityId) return false;
          if (LengthId != other.LengthId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CoreId.Length != 0) hash ^= CoreId.GetHashCode();
          if (WoodId.Length != 0) hash ^= WoodId.GetHashCode();
          if (FlexibilityId.Length != 0) hash ^= FlexibilityId.GetHashCode();
          if (LengthId.Length != 0) hash ^= LengthId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CoreId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(CoreId);
          }
          if (WoodId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(WoodId);
          }
          if (FlexibilityId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(FlexibilityId);
          }
          if (LengthId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(LengthId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CoreId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreId);
          }
          if (WoodId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(WoodId);
          }
          if (FlexibilityId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FlexibilityId);
          }
          if (LengthId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LengthId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WandOptions other) {
          if (other == null) {
            return;
          }
          if (other.CoreId.Length != 0) {
            CoreId = other.CoreId;
          }
          if (other.WoodId.Length != 0) {
            WoodId = other.WoodId;
          }
          if (other.FlexibilityId.Length != 0) {
            FlexibilityId = other.FlexibilityId;
          }
          if (other.LengthId.Length != 0) {
            LengthId = other.LengthId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                CoreId = input.ReadString();
                break;
              }
              case 18: {
                WoodId = input.ReadString();
                break;
              }
              case 26: {
                FlexibilityId = input.ReadString();
                break;
              }
              case 34: {
                LengthId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
