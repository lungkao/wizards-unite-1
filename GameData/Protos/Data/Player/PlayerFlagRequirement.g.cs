// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Player/PlayerFlagRequirement.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Player {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Player/PlayerFlagRequirement.proto</summary>
  public static partial class PlayerFlagRequirementReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Player/PlayerFlagRequirement.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerFlagRequirementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBXVVByb3Rvcy9EYXRhL1BsYXllci9QbGF5ZXJGbGFnUmVxdWlyZW1lbnQu",
            "cHJvdG8SFFdVUHJvdG9zLkRhdGEuUGxheWVyGidXVVByb3Rvcy9FbnVtcy9D",
            "b21wYXJpc29uT3BlcmF0b3IucHJvdG8i3QEKFVBsYXllckZsYWdSZXF1aXJl",
            "bWVudBIeChZwbGF5ZXJfZmxhZ19mZWF0dXJlX2lkGAEgASgJEhYKDnBsYXll",
            "cl9mbGFnX2lkGAIgASgJEj8KE2NvbXBhcmlzb25fb3BlcmF0b3IYAyABKA4y",
            "Ii5XVVByb3Rvcy5FbnVtcy5Db21wYXJpc29uT3BlcmF0b3ISDgoEYnZhbBgE",
            "IAEoCEgAEg4KBGx2YWwYBSABKANIABIOCgRzdmFsGAYgASgJSAASDgoEZnZh",
            "bBgHIAEoAkgAQgsKCUZsYWdWYWx1ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Enums.ComparisonOperatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Player.PlayerFlagRequirement), global::WUProtos.Data.Player.PlayerFlagRequirement.Parser, new[]{ "PlayerFlagFeatureId", "PlayerFlagId", "ComparisonOperator", "Bval", "Lval", "Sval", "Fval" }, new[]{ "FlagValue" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerFlagRequirement : pb::IMessage<PlayerFlagRequirement> {
    private static readonly pb::MessageParser<PlayerFlagRequirement> _parser = new pb::MessageParser<PlayerFlagRequirement>(() => new PlayerFlagRequirement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerFlagRequirement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Player.PlayerFlagRequirementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFlagRequirement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFlagRequirement(PlayerFlagRequirement other) : this() {
      playerFlagFeatureId_ = other.playerFlagFeatureId_;
      playerFlagId_ = other.playerFlagId_;
      comparisonOperator_ = other.comparisonOperator_;
      switch (other.FlagValueCase) {
        case FlagValueOneofCase.Bval:
          Bval = other.Bval;
          break;
        case FlagValueOneofCase.Lval:
          Lval = other.Lval;
          break;
        case FlagValueOneofCase.Sval:
          Sval = other.Sval;
          break;
        case FlagValueOneofCase.Fval:
          Fval = other.Fval;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFlagRequirement Clone() {
      return new PlayerFlagRequirement(this);
    }

    /// <summary>Field number for the "player_flag_feature_id" field.</summary>
    public const int PlayerFlagFeatureIdFieldNumber = 1;
    private string playerFlagFeatureId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerFlagFeatureId {
      get { return playerFlagFeatureId_; }
      set {
        playerFlagFeatureId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_flag_id" field.</summary>
    public const int PlayerFlagIdFieldNumber = 2;
    private string playerFlagId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerFlagId {
      get { return playerFlagId_; }
      set {
        playerFlagId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comparison_operator" field.</summary>
    public const int ComparisonOperatorFieldNumber = 3;
    private global::WUProtos.Enums.ComparisonOperator comparisonOperator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Enums.ComparisonOperator ComparisonOperator {
      get { return comparisonOperator_; }
      set {
        comparisonOperator_ = value;
      }
    }

    /// <summary>Field number for the "bval" field.</summary>
    public const int BvalFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bval {
      get { return flagValueCase_ == FlagValueOneofCase.Bval ? (bool) flagValue_ : false; }
      set {
        flagValue_ = value;
        flagValueCase_ = FlagValueOneofCase.Bval;
      }
    }

    /// <summary>Field number for the "lval" field.</summary>
    public const int LvalFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lval {
      get { return flagValueCase_ == FlagValueOneofCase.Lval ? (long) flagValue_ : 0L; }
      set {
        flagValue_ = value;
        flagValueCase_ = FlagValueOneofCase.Lval;
      }
    }

    /// <summary>Field number for the "sval" field.</summary>
    public const int SvalFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sval {
      get { return flagValueCase_ == FlagValueOneofCase.Sval ? (string) flagValue_ : ""; }
      set {
        flagValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        flagValueCase_ = FlagValueOneofCase.Sval;
      }
    }

    /// <summary>Field number for the "fval" field.</summary>
    public const int FvalFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fval {
      get { return flagValueCase_ == FlagValueOneofCase.Fval ? (float) flagValue_ : 0F; }
      set {
        flagValue_ = value;
        flagValueCase_ = FlagValueOneofCase.Fval;
      }
    }

    private object flagValue_;
    /// <summary>Enum of possible cases for the "FlagValue" oneof.</summary>
    public enum FlagValueOneofCase {
      None = 0,
      Bval = 4,
      Lval = 5,
      Sval = 6,
      Fval = 7,
    }
    private FlagValueOneofCase flagValueCase_ = FlagValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlagValueOneofCase FlagValueCase {
      get { return flagValueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlagValue() {
      flagValueCase_ = FlagValueOneofCase.None;
      flagValue_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerFlagRequirement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerFlagRequirement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerFlagFeatureId != other.PlayerFlagFeatureId) return false;
      if (PlayerFlagId != other.PlayerFlagId) return false;
      if (ComparisonOperator != other.ComparisonOperator) return false;
      if (Bval != other.Bval) return false;
      if (Lval != other.Lval) return false;
      if (Sval != other.Sval) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fval, other.Fval)) return false;
      if (FlagValueCase != other.FlagValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerFlagFeatureId.Length != 0) hash ^= PlayerFlagFeatureId.GetHashCode();
      if (PlayerFlagId.Length != 0) hash ^= PlayerFlagId.GetHashCode();
      if (ComparisonOperator != 0) hash ^= ComparisonOperator.GetHashCode();
      if (flagValueCase_ == FlagValueOneofCase.Bval) hash ^= Bval.GetHashCode();
      if (flagValueCase_ == FlagValueOneofCase.Lval) hash ^= Lval.GetHashCode();
      if (flagValueCase_ == FlagValueOneofCase.Sval) hash ^= Sval.GetHashCode();
      if (flagValueCase_ == FlagValueOneofCase.Fval) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fval);
      hash ^= (int) flagValueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerFlagFeatureId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerFlagFeatureId);
      }
      if (PlayerFlagId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerFlagId);
      }
      if (ComparisonOperator != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ComparisonOperator);
      }
      if (flagValueCase_ == FlagValueOneofCase.Bval) {
        output.WriteRawTag(32);
        output.WriteBool(Bval);
      }
      if (flagValueCase_ == FlagValueOneofCase.Lval) {
        output.WriteRawTag(40);
        output.WriteInt64(Lval);
      }
      if (flagValueCase_ == FlagValueOneofCase.Sval) {
        output.WriteRawTag(50);
        output.WriteString(Sval);
      }
      if (flagValueCase_ == FlagValueOneofCase.Fval) {
        output.WriteRawTag(61);
        output.WriteFloat(Fval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerFlagFeatureId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerFlagFeatureId);
      }
      if (PlayerFlagId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerFlagId);
      }
      if (ComparisonOperator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ComparisonOperator);
      }
      if (flagValueCase_ == FlagValueOneofCase.Bval) {
        size += 1 + 1;
      }
      if (flagValueCase_ == FlagValueOneofCase.Lval) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lval);
      }
      if (flagValueCase_ == FlagValueOneofCase.Sval) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sval);
      }
      if (flagValueCase_ == FlagValueOneofCase.Fval) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerFlagRequirement other) {
      if (other == null) {
        return;
      }
      if (other.PlayerFlagFeatureId.Length != 0) {
        PlayerFlagFeatureId = other.PlayerFlagFeatureId;
      }
      if (other.PlayerFlagId.Length != 0) {
        PlayerFlagId = other.PlayerFlagId;
      }
      if (other.ComparisonOperator != 0) {
        ComparisonOperator = other.ComparisonOperator;
      }
      switch (other.FlagValueCase) {
        case FlagValueOneofCase.Bval:
          Bval = other.Bval;
          break;
        case FlagValueOneofCase.Lval:
          Lval = other.Lval;
          break;
        case FlagValueOneofCase.Sval:
          Sval = other.Sval;
          break;
        case FlagValueOneofCase.Fval:
          Fval = other.Fval;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerFlagFeatureId = input.ReadString();
            break;
          }
          case 18: {
            PlayerFlagId = input.ReadString();
            break;
          }
          case 24: {
            ComparisonOperator = (global::WUProtos.Enums.ComparisonOperator) input.ReadEnum();
            break;
          }
          case 32: {
            Bval = input.ReadBool();
            break;
          }
          case 40: {
            Lval = input.ReadInt64();
            break;
          }
          case 50: {
            Sval = input.ReadString();
            break;
          }
          case 61: {
            Fval = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
