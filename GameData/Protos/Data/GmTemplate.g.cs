// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/GmTemplate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/GmTemplate.proto</summary>
  public static partial class GmTemplateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/GmTemplate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GmTemplateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XVVByb3Rvcy9EYXRhL0dtVGVtcGxhdGUucHJvdG8SDVdVUHJvdG9zLkRh",
            "dGEaL1dVUHJvdG9zL0RhdGEvQ29sbGVjdGlvbi9Db2xsZWN0aW9uRmFtaWx5",
            "LnByb3RvGi1XVVByb3Rvcy9EYXRhL0NvbGxlY3Rpb24vQ29sbGVjdGlvbkl0",
            "ZW0ucHJvdG8aJ1dVUHJvdG9zL0RhdGEvRW5jb3VudGVyL0VuY291bnRlci5w",
            "cm90bxovV1VQcm90b3MvRGF0YS9FbmNvdW50ZXIvRW5jb3VudGVyT2JzdGFj",
            "bGUucHJvdG8aGVdVUHJvdG9zL0RhdGEvU3BlbGwucHJvdG8aHVdVUHJvdG9z",
            "L0RhdGEvVmF1bHRJdGVtLnByb3RvGh5XVVByb3Rvcy9EYXRhL0dhbWVDb25m",
            "aWcucHJvdG8aJldVUHJvdG9zL0RhdGEvUGxheWVyL1BsYXllckxldmVsLnBy",
            "b3RvGh1XVVByb3Rvcy9EYXRhL1N0b3JlUGFjay5wcm90bxojV1VQcm90b3Mv",
            "RGF0YS9XYWxrYm94VGVtcGxhdGUucHJvdG8aH1dVUHJvdG9zL0RhdGEvRmVh",
            "dHVyZUZsYWcucHJvdG8aG1dVUHJvdG9zL0RhdGEvUG9ydGtleS5wcm90bxod",
            "V1VQcm90b3MvRGF0YS9CdWZmL0J1ZmYucHJvdG8aJFdVUHJvdG9zL0RhdGEv",
            "Rm9ydHJlc3NUZW1wbGF0ZS5wcm90bxojV1VQcm90b3MvRGF0YS9DaGFtYmVy",
            "VGVtcGxhdGUucHJvdG8aIFdVUHJvdG9zL0RhdGEvUXVhbGl0eUxldmVsLnBy",
            "b3RvGiJXVVByb3Rvcy9EYXRhL1Byb3RlZ29QYXR0ZXJuLnByb3RvGi1XVVBy",
            "b3Rvcy9EYXRhL0NvbGxlY3Rpb24vQ29sbGVjdGlvblBhZ2UucHJvdG8aH1dV",
            "UHJvdG9zL0RhdGEvVGVhbUNvbnRyb2wucHJvdG8aH1dVUHJvdG9zL0RhdGEv",
            "U3RvcmVDb25maWcucHJvdG8aJFdVUHJvdG9zL0RhdGEvU3RvcmVTdWJjYXRl",
            "Z29yeS5wcm90bxoaV1VQcm90b3MvRGF0YS9IYXB0aWMucHJvdG8aK1dVUHJv",
            "dG9zL0RhdGEvRW5jb3VudGVyL0VuY291bnRlclR5cGUucHJvdG8aMVdVUHJv",
            "dG9zL0RhdGEvQ2hhbGxlbmdlL0NoYWxsZW5nZVNwYXduTG9naWMucHJvdG8a",
            "KVdVUHJvdG9zL0RhdGEvUHJvZmVzc2lvbi9Qcm9mZXNzaW9uLnByb3RvGiFX",
            "VVByb3Rvcy9EYXRhL0JvbnVzQ2F0ZWdvcnkucHJvdG8aIVdVUHJvdG9zL0Rh",
            "dGEvVmF1bHRDYXRlZ29yeS5wcm90bxohV1VQcm90b3MvRGF0YS9Qcm9maWxl",
            "Q29uZmlnLnByb3RvGjhXVVByb3Rvcy9EYXRhL0NvbGxlY3Rpb24vQ29sbGVj",
            "dGlvbkZhbWlseVJhbmtUYWJsZS5wcm90bxogV1VQcm90b3MvTWFwL01hcElu",
            "Z3JlZGllbnQucHJvdG8aHVdVUHJvdG9zL01hcC9NYXBBYmlsaXR5LnByb3Rv",
            "GhpXVVByb3Rvcy9EYXRhL1JlY2lwZS5wcm90bxosV1VQcm90b3MvRGF0YS9D",
            "aGFsbGVuZ2UvQ2hhbGxlbmdlQm9udXMucHJvdG8aKVdVUHJvdG9zL0RhdGEv",
            "U3Rvcnlib2FyZC9TdG9yeWJvYXJkLnByb3RvGh5XVVByb3Rvcy9EYXRhL01h",
            "c3Rlck5vdGUucHJvdG8aHFdVUHJvdG9zL0RhdGEvQ2F1bGRyb24ucHJvdG8a",
            "G1dVUHJvdG9zL0RhdGEvUnBnc3RhdC5wcm90bxohV1VQcm90b3MvRGF0YS9S",
            "cGdzdGF0c0Jsb2NrLnByb3RvGiVXVVByb3Rvcy9EYXRhL1NlbGZpZUF2YXRh",
            "ckFzc2V0LnByb3RvGiNXVVByb3Rvcy9EYXRhL091dHBvc3RUZW1wbGF0ZS5w",
            "cm90bxouV1VQcm90b3MvRGF0YS9EYWlseVJld2FyZE1vbnRobHlTY2hlZHVs",
            "ZS5wcm90bxoZV1VQcm90b3MvRGF0YS9RdWVzdC5wcm90bxocV1VQcm90b3Mv",
            "RGF0YS9EZWVwTGluay5wcm90bxofV1VQcm90b3MvRGF0YS9FdmVudC9FdmVu",
            "dC5wcm90bxomV1VQcm90b3MvRGF0YS9HcmVlbmhvdXNlVGVtcGxhdGUucHJv",
            "dG8ilRUKCkdtVGVtcGxhdGUSRwoRY29sbGVjdGlvbl9mYW1pbHkYASABKAsy",
            "Ki5XVVByb3Rvcy5EYXRhLkNvbGxlY3Rpb24uQ29sbGVjdGlvbkZhbWlseUgA",
            "EkMKD2NvbGxlY3Rpb25faXRlbRgCIAEoCzIoLldVUHJvdG9zLkRhdGEuQ29s",
            "bGVjdGlvbi5Db2xsZWN0aW9uSXRlbUgAEjcKCWVuY291bnRlchgDIAEoCzIi",
            "LldVUHJvdG9zLkRhdGEuRW5jb3VudGVyLkVuY291bnRlckgAEkgKEmVuY291",
            "bnRlcl9vYnN0YWNsZRgEIAEoCzIqLldVUHJvdG9zLkRhdGEuRW5jb3VudGVy",
            "LkVuY291bnRlck9ic3RhY2xlSAASJQoFc3BlbGwYBSABKAsyFC5XVVByb3Rv",
            "cy5EYXRhLlNwZWxsSAASLgoKdmF1bHRfaXRlbRgGIAEoCzIYLldVUHJvdG9z",
            "LkRhdGEuVmF1bHRJdGVtSAASMAoLZ2FtZV9jb25maWcYByABKAsyGS5XVVBy",
            "b3Rvcy5EYXRhLkdhbWVDb25maWdIABI5CgxwbGF5ZXJfbGV2ZWwYCCABKAsy",
            "IS5XVVByb3Rvcy5EYXRhLlBsYXllci5QbGF5ZXJMZXZlbEgAEi4KCnN0b3Jl",
            "X3BhY2sYCSABKAsyGC5XVVByb3Rvcy5EYXRhLlN0b3JlUGFja0gAEjoKEHdh",
            "bGtib3hfdGVtcGxhdGUYCiABKAsyHi5XVVByb3Rvcy5EYXRhLldhbGtib3hU",
            "ZW1wbGF0ZUgAEjIKDGZlYXR1cmVfZmxhZxgLIAEoCzIaLldVUHJvdG9zLkRh",
            "dGEuRmVhdHVyZUZsYWdIABIpCgdwb3J0a2V5GAwgASgLMhYuV1VQcm90b3Mu",
            "RGF0YS5Qb3J0a2V5SAASKAoEYnVmZhgNIAEoCzIYLldVUHJvdG9zLkRhdGEu",
            "QnVmZi5CdWZmSAASPAoRZm9ydHJlc3NfdGVtcGxhdGUYDiABKAsyHy5XVVBy",
            "b3Rvcy5EYXRhLkZvcnRyZXNzVGVtcGxhdGVIABI6ChBjaGFtYmVyX3RlbXBs",
            "YXRlGA8gASgLMh4uV1VQcm90b3MuRGF0YS5DaGFtYmVyVGVtcGxhdGVIABI0",
            "Cg1xdWFsaXR5X2xldmVsGBAgASgLMhsuV1VQcm90b3MuRGF0YS5RdWFsaXR5",
            "TGV2ZWxIABI4Cg9wcm90ZWdvX3BhdHRlcm4YESABKAsyHS5XVVByb3Rvcy5E",
            "YXRhLlByb3RlZ29QYXR0ZXJuSAASQwoPY29sbGVjdGlvbl9wYWdlGBIgASgL",
            "MiguV1VQcm90b3MuRGF0YS5Db2xsZWN0aW9uLkNvbGxlY3Rpb25QYWdlSAAS",
            "MgoMdGVhbV9jb250cm9sGBMgASgLMhouV1VQcm90b3MuRGF0YS5UZWFtQ29u",
            "dHJvbEgAEjIKDHN0b3JlX2NvbmZpZxgUIAEoCzIaLldVUHJvdG9zLkRhdGEu",
            "U3RvcmVDb25maWdIABI8ChFzdG9yZV9zdWJjYXRlZ29yeRgVIAEoCzIfLldV",
            "UHJvdG9zLkRhdGEuU3RvcmVTdWJjYXRlZ29yeUgAEicKBmhhcHRpYxgWIAEo",
            "CzIVLldVUHJvdG9zLkRhdGEuSGFwdGljSAASQAoOZW5jb3VudGVyX3R5cGUY",
            "FyABKAsyJi5XVVByb3Rvcy5EYXRhLkVuY291bnRlci5FbmNvdW50ZXJUeXBl",
            "SAASTQoVY2hhbGxlbmdlX3NwYXduX2xvZ2ljGBggASgLMiwuV1VQcm90b3Mu",
            "RGF0YS5DaGFsbGVuZ2UuQ2hhbGxlbmdlU3Bhd25Mb2dpY0gAEjoKCnByb2Zl",
            "c3Npb24YGSABKAsyJC5XVVByb3Rvcy5EYXRhLlByb2Zlc3Npb24uUHJvZmVz",
            "c2lvbkgAEjYKDmJvbnVzX2NhdGVnb3J5GBogASgLMhwuV1VQcm90b3MuRGF0",
            "YS5Cb251c0NhdGVnb3J5SAASNgoOdmF1bHRfY2F0ZWdvcnkYGyABKAsyHC5X",
            "VVByb3Rvcy5EYXRhLlZhdWx0Q2F0ZWdvcnlIABI2Cg5wcm9maWxlX2NvbmZp",
            "ZxgcIAEoCzIcLldVUHJvdG9zLkRhdGEuUHJvZmlsZUNvbmZpZ0gAElsKHGNv",
            "bGxlY3Rpb25fZmFtaWx5X3JhbmtfdGFibGUYHSABKAsyMy5XVVByb3Rvcy5E",
            "YXRhLkNvbGxlY3Rpb24uQ29sbGVjdGlvbkZhbWlseVJhbmtUYWJsZUgAEjUK",
            "Dm1hcF9pbmdyZWRpZW50GB4gASgLMhsuV1VQcm90b3MuTWFwLk1hcEluZ3Jl",
            "ZGllbnRIABIvCgttYXBfYWJpbGl0eRgfIAEoCzIYLldVUHJvdG9zLk1hcC5N",
            "YXBBYmlsaXR5SAASJwoGcmVjaXBlGCAgASgLMhUuV1VQcm90b3MuRGF0YS5S",
            "ZWNpcGVIABJCCg9jaGFsbGVuZ2VfYm9udXMYISABKAsyJy5XVVByb3Rvcy5E",
            "YXRhLkNoYWxsZW5nZS5DaGFsbGVuZ2VCb251c0gAEjoKCnN0b3J5Ym9hcmQY",
            "IiABKAsyJC5XVVByb3Rvcy5EYXRhLlN0b3J5Ym9hcmQuU3Rvcnlib2FyZEgA",
            "EjAKC21hc3Rlcl9ub3RlGCMgASgLMhkuV1VQcm90b3MuRGF0YS5NYXN0ZXJO",
            "b3RlSAASKwoIY2F1bGRyb24YJCABKAsyFy5XVVByb3Rvcy5EYXRhLkNhdWxk",
            "cm9uSAASKQoHcnBnc3RhdBglIAEoCzIWLldVUHJvdG9zLkRhdGEuUnBnc3Rh",
            "dEgAEjYKDnJwZ3N0YXRzX2Jsb2NrGCYgASgLMhwuV1VQcm90b3MuRGF0YS5S",
            "cGdzdGF0c0Jsb2NrSAASPwoTc2VsZmllX2F2YXRhcl9hc3NldBgnIAEoCzIg",
            "LldVUHJvdG9zLkRhdGEuU2VsZmllQXZhdGFyQXNzZXRIABI6ChBvdXRwb3N0",
            "X3RlbXBsYXRlGCggASgLMh4uV1VQcm90b3MuRGF0YS5PdXRwb3N0VGVtcGxh",
            "dGVIABJSCh1kYWlseV9yZXdhcmRfbW9udGhseV9zY2hlZHVsZRgpIAEoCzIp",
            "LldVUHJvdG9zLkRhdGEuRGFpbHlSZXdhcmRNb250aGx5U2NoZWR1bGVIABIl",
            "CgVxdWVzdBgqIAEoCzIULldVUHJvdG9zLkRhdGEuUXVlc3RIABIsCglkZWVw",
            "X2xpbmsYKyABKAsyFy5XVVByb3Rvcy5EYXRhLkRlZXBMaW5rSAASKwoFZXZl",
            "bnQYLCABKAsyGi5XVVByb3Rvcy5EYXRhLkV2ZW50LkV2ZW50SAASQAoTZ3Jl",
            "ZW5ob3VzZV90ZW1wbGF0ZRgtIAEoCzIhLldVUHJvdG9zLkRhdGEuR3JlZW5o",
            "b3VzZVRlbXBsYXRlSAASNAoHdmVyc2lvbhguIAEoCzIhLldVUHJvdG9zLkRh",
            "dGEuR21UZW1wbGF0ZS5WZXJzaW9uSAAaQAoHVmVyc2lvbhIKCgJpZBgBIAEo",
            "CRIUCgxkYXRhX3ZlcnNpb24YAiABKAkSEwoLZGF0YV9icmFuY2gYAyABKAlC",
            "DQoLTWVzc2FnZVR5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Collection.CollectionFamilyReflection.Descriptor, global::WUProtos.Data.Collection.CollectionItemReflection.Descriptor, global::WUProtos.Data.Encounter.EncounterReflection.Descriptor, global::WUProtos.Data.Encounter.EncounterObstacleReflection.Descriptor, global::WUProtos.Data.SpellReflection.Descriptor, global::WUProtos.Data.VaultItemReflection.Descriptor, global::WUProtos.Data.GameConfigReflection.Descriptor, global::WUProtos.Data.Player.PlayerLevelReflection.Descriptor, global::WUProtos.Data.StorePackReflection.Descriptor, global::WUProtos.Data.WalkboxTemplateReflection.Descriptor, global::WUProtos.Data.FeatureFlagReflection.Descriptor, global::WUProtos.Data.PortkeyReflection.Descriptor, global::WUProtos.Data.Buff.BuffReflection.Descriptor, global::WUProtos.Data.FortressTemplateReflection.Descriptor, global::WUProtos.Data.ChamberTemplateReflection.Descriptor, global::WUProtos.Data.QualityLevelReflection.Descriptor, global::WUProtos.Data.ProtegoPatternReflection.Descriptor, global::WUProtos.Data.Collection.CollectionPageReflection.Descriptor, global::WUProtos.Data.TeamControlReflection.Descriptor, global::WUProtos.Data.StoreConfigReflection.Descriptor, global::WUProtos.Data.StoreSubcategoryReflection.Descriptor, global::WUProtos.Data.HapticReflection.Descriptor, global::WUProtos.Data.Encounter.EncounterTypeReflection.Descriptor, global::WUProtos.Data.Challenge.ChallengeSpawnLogicReflection.Descriptor, global::WUProtos.Data.Profession.ProfessionReflection.Descriptor, global::WUProtos.Data.BonusCategoryReflection.Descriptor, global::WUProtos.Data.VaultCategoryReflection.Descriptor, global::WUProtos.Data.ProfileConfigReflection.Descriptor, global::WUProtos.Data.Collection.CollectionFamilyRankTableReflection.Descriptor, global::WUProtos.Map.MapIngredientReflection.Descriptor, global::WUProtos.Map.MapAbilityReflection.Descriptor, global::WUProtos.Data.RecipeReflection.Descriptor, global::WUProtos.Data.Challenge.ChallengeBonusReflection.Descriptor, global::WUProtos.Data.Storyboard.StoryboardReflection.Descriptor, global::WUProtos.Data.MasterNoteReflection.Descriptor, global::WUProtos.Data.CauldronReflection.Descriptor, global::WUProtos.Data.RpgstatReflection.Descriptor, global::WUProtos.Data.RpgstatsBlockReflection.Descriptor, global::WUProtos.Data.SelfieAvatarAssetReflection.Descriptor, global::WUProtos.Data.OutpostTemplateReflection.Descriptor, global::WUProtos.Data.DailyRewardMonthlyScheduleReflection.Descriptor, global::WUProtos.Data.QuestReflection.Descriptor, global::WUProtos.Data.DeepLinkReflection.Descriptor, global::WUProtos.Data.Event.EventReflection.Descriptor, global::WUProtos.Data.GreenhouseTemplateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate), global::WUProtos.Data.GmTemplate.Parser, new[]{ "CollectionFamily", "CollectionItem", "Encounter", "EncounterObstacle", "Spell", "VaultItem", "GameConfig", "PlayerLevel", "StorePack", "WalkboxTemplate", "FeatureFlag", "Portkey", "Buff", "FortressTemplate", "ChamberTemplate", "QualityLevel", "ProtegoPattern", "CollectionPage", "TeamControl", "StoreConfig", "StoreSubcategory", "Haptic", "EncounterType", "ChallengeSpawnLogic", "Profession", "BonusCategory", "VaultCategory", "ProfileConfig", "CollectionFamilyRankTable", "MapIngredient", "MapAbility", "Recipe", "ChallengeBonus", "Storyboard", "MasterNote", "Cauldron", "Rpgstat", "RpgstatsBlock", "SelfieAvatarAsset", "OutpostTemplate", "DailyRewardMonthlySchedule", "Quest", "DeepLink", "Event", "GreenhouseTemplate", "Version" }, new[]{ "MessageType" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.GmTemplate.Types.Version), global::WUProtos.Data.GmTemplate.Types.Version.Parser, new[]{ "Id", "DataVersion", "DataBranch" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GmTemplate : pb::IMessage<GmTemplate> {
    private static readonly pb::MessageParser<GmTemplate> _parser = new pb::MessageParser<GmTemplate>(() => new GmTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.GmTemplateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmTemplate(GmTemplate other) : this() {
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.CollectionFamily:
          CollectionFamily = other.CollectionFamily.Clone();
          break;
        case MessageTypeOneofCase.CollectionItem:
          CollectionItem = other.CollectionItem.Clone();
          break;
        case MessageTypeOneofCase.Encounter:
          Encounter = other.Encounter.Clone();
          break;
        case MessageTypeOneofCase.EncounterObstacle:
          EncounterObstacle = other.EncounterObstacle.Clone();
          break;
        case MessageTypeOneofCase.Spell:
          Spell = other.Spell.Clone();
          break;
        case MessageTypeOneofCase.VaultItem:
          VaultItem = other.VaultItem.Clone();
          break;
        case MessageTypeOneofCase.GameConfig:
          GameConfig = other.GameConfig.Clone();
          break;
        case MessageTypeOneofCase.PlayerLevel:
          PlayerLevel = other.PlayerLevel.Clone();
          break;
        case MessageTypeOneofCase.StorePack:
          StorePack = other.StorePack.Clone();
          break;
        case MessageTypeOneofCase.WalkboxTemplate:
          WalkboxTemplate = other.WalkboxTemplate.Clone();
          break;
        case MessageTypeOneofCase.FeatureFlag:
          FeatureFlag = other.FeatureFlag.Clone();
          break;
        case MessageTypeOneofCase.Portkey:
          Portkey = other.Portkey.Clone();
          break;
        case MessageTypeOneofCase.Buff:
          Buff = other.Buff.Clone();
          break;
        case MessageTypeOneofCase.FortressTemplate:
          FortressTemplate = other.FortressTemplate.Clone();
          break;
        case MessageTypeOneofCase.ChamberTemplate:
          ChamberTemplate = other.ChamberTemplate.Clone();
          break;
        case MessageTypeOneofCase.QualityLevel:
          QualityLevel = other.QualityLevel.Clone();
          break;
        case MessageTypeOneofCase.ProtegoPattern:
          ProtegoPattern = other.ProtegoPattern.Clone();
          break;
        case MessageTypeOneofCase.CollectionPage:
          CollectionPage = other.CollectionPage.Clone();
          break;
        case MessageTypeOneofCase.TeamControl:
          TeamControl = other.TeamControl.Clone();
          break;
        case MessageTypeOneofCase.StoreConfig:
          StoreConfig = other.StoreConfig.Clone();
          break;
        case MessageTypeOneofCase.StoreSubcategory:
          StoreSubcategory = other.StoreSubcategory.Clone();
          break;
        case MessageTypeOneofCase.Haptic:
          Haptic = other.Haptic.Clone();
          break;
        case MessageTypeOneofCase.EncounterType:
          EncounterType = other.EncounterType.Clone();
          break;
        case MessageTypeOneofCase.ChallengeSpawnLogic:
          ChallengeSpawnLogic = other.ChallengeSpawnLogic.Clone();
          break;
        case MessageTypeOneofCase.Profession:
          Profession = other.Profession.Clone();
          break;
        case MessageTypeOneofCase.BonusCategory:
          BonusCategory = other.BonusCategory.Clone();
          break;
        case MessageTypeOneofCase.VaultCategory:
          VaultCategory = other.VaultCategory.Clone();
          break;
        case MessageTypeOneofCase.ProfileConfig:
          ProfileConfig = other.ProfileConfig.Clone();
          break;
        case MessageTypeOneofCase.CollectionFamilyRankTable:
          CollectionFamilyRankTable = other.CollectionFamilyRankTable.Clone();
          break;
        case MessageTypeOneofCase.MapIngredient:
          MapIngredient = other.MapIngredient.Clone();
          break;
        case MessageTypeOneofCase.MapAbility:
          MapAbility = other.MapAbility.Clone();
          break;
        case MessageTypeOneofCase.Recipe:
          Recipe = other.Recipe.Clone();
          break;
        case MessageTypeOneofCase.ChallengeBonus:
          ChallengeBonus = other.ChallengeBonus.Clone();
          break;
        case MessageTypeOneofCase.Storyboard:
          Storyboard = other.Storyboard.Clone();
          break;
        case MessageTypeOneofCase.MasterNote:
          MasterNote = other.MasterNote.Clone();
          break;
        case MessageTypeOneofCase.Cauldron:
          Cauldron = other.Cauldron.Clone();
          break;
        case MessageTypeOneofCase.Rpgstat:
          Rpgstat = other.Rpgstat.Clone();
          break;
        case MessageTypeOneofCase.RpgstatsBlock:
          RpgstatsBlock = other.RpgstatsBlock.Clone();
          break;
        case MessageTypeOneofCase.SelfieAvatarAsset:
          SelfieAvatarAsset = other.SelfieAvatarAsset.Clone();
          break;
        case MessageTypeOneofCase.OutpostTemplate:
          OutpostTemplate = other.OutpostTemplate.Clone();
          break;
        case MessageTypeOneofCase.DailyRewardMonthlySchedule:
          DailyRewardMonthlySchedule = other.DailyRewardMonthlySchedule.Clone();
          break;
        case MessageTypeOneofCase.Quest:
          Quest = other.Quest.Clone();
          break;
        case MessageTypeOneofCase.DeepLink:
          DeepLink = other.DeepLink.Clone();
          break;
        case MessageTypeOneofCase.Event:
          Event = other.Event.Clone();
          break;
        case MessageTypeOneofCase.GreenhouseTemplate:
          GreenhouseTemplate = other.GreenhouseTemplate.Clone();
          break;
        case MessageTypeOneofCase.Version:
          Version = other.Version.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmTemplate Clone() {
      return new GmTemplate(this);
    }

    /// <summary>Field number for the "collection_family" field.</summary>
    public const int CollectionFamilyFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Collection.CollectionFamily CollectionFamily {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionFamily ? (global::WUProtos.Data.Collection.CollectionFamily) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionFamily;
      }
    }

    /// <summary>Field number for the "collection_item" field.</summary>
    public const int CollectionItemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Collection.CollectionItem CollectionItem {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionItem ? (global::WUProtos.Data.Collection.CollectionItem) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionItem;
      }
    }

    /// <summary>Field number for the "encounter" field.</summary>
    public const int EncounterFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Encounter.Encounter Encounter {
      get { return messageTypeCase_ == MessageTypeOneofCase.Encounter ? (global::WUProtos.Data.Encounter.Encounter) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Encounter;
      }
    }

    /// <summary>Field number for the "encounter_obstacle" field.</summary>
    public const int EncounterObstacleFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Encounter.EncounterObstacle EncounterObstacle {
      get { return messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle ? (global::WUProtos.Data.Encounter.EncounterObstacle) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.EncounterObstacle;
      }
    }

    /// <summary>Field number for the "spell" field.</summary>
    public const int SpellFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Spell Spell {
      get { return messageTypeCase_ == MessageTypeOneofCase.Spell ? (global::WUProtos.Data.Spell) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Spell;
      }
    }

    /// <summary>Field number for the "vault_item" field.</summary>
    public const int VaultItemFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.VaultItem VaultItem {
      get { return messageTypeCase_ == MessageTypeOneofCase.VaultItem ? (global::WUProtos.Data.VaultItem) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.VaultItem;
      }
    }

    /// <summary>Field number for the "game_config" field.</summary>
    public const int GameConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GameConfig GameConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.GameConfig ? (global::WUProtos.Data.GameConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.GameConfig;
      }
    }

    /// <summary>Field number for the "player_level" field.</summary>
    public const int PlayerLevelFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Player.PlayerLevel PlayerLevel {
      get { return messageTypeCase_ == MessageTypeOneofCase.PlayerLevel ? (global::WUProtos.Data.Player.PlayerLevel) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.PlayerLevel;
      }
    }

    /// <summary>Field number for the "store_pack" field.</summary>
    public const int StorePackFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.StorePack StorePack {
      get { return messageTypeCase_ == MessageTypeOneofCase.StorePack ? (global::WUProtos.Data.StorePack) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StorePack;
      }
    }

    /// <summary>Field number for the "walkbox_template" field.</summary>
    public const int WalkboxTemplateFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.WalkboxTemplate WalkboxTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate ? (global::WUProtos.Data.WalkboxTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.WalkboxTemplate;
      }
    }

    /// <summary>Field number for the "feature_flag" field.</summary>
    public const int FeatureFlagFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.FeatureFlag FeatureFlag {
      get { return messageTypeCase_ == MessageTypeOneofCase.FeatureFlag ? (global::WUProtos.Data.FeatureFlag) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.FeatureFlag;
      }
    }

    /// <summary>Field number for the "portkey" field.</summary>
    public const int PortkeyFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Portkey Portkey {
      get { return messageTypeCase_ == MessageTypeOneofCase.Portkey ? (global::WUProtos.Data.Portkey) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Portkey;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Buff.Buff Buff {
      get { return messageTypeCase_ == MessageTypeOneofCase.Buff ? (global::WUProtos.Data.Buff.Buff) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Buff;
      }
    }

    /// <summary>Field number for the "fortress_template" field.</summary>
    public const int FortressTemplateFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.FortressTemplate FortressTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.FortressTemplate ? (global::WUProtos.Data.FortressTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.FortressTemplate;
      }
    }

    /// <summary>Field number for the "chamber_template" field.</summary>
    public const int ChamberTemplateFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberTemplate ChamberTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate ? (global::WUProtos.Data.ChamberTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChamberTemplate;
      }
    }

    /// <summary>Field number for the "quality_level" field.</summary>
    public const int QualityLevelFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.QualityLevel QualityLevel {
      get { return messageTypeCase_ == MessageTypeOneofCase.QualityLevel ? (global::WUProtos.Data.QualityLevel) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.QualityLevel;
      }
    }

    /// <summary>Field number for the "protego_pattern" field.</summary>
    public const int ProtegoPatternFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ProtegoPattern ProtegoPattern {
      get { return messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern ? (global::WUProtos.Data.ProtegoPattern) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ProtegoPattern;
      }
    }

    /// <summary>Field number for the "collection_page" field.</summary>
    public const int CollectionPageFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Collection.CollectionPage CollectionPage {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionPage ? (global::WUProtos.Data.Collection.CollectionPage) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionPage;
      }
    }

    /// <summary>Field number for the "team_control" field.</summary>
    public const int TeamControlFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.TeamControl TeamControl {
      get { return messageTypeCase_ == MessageTypeOneofCase.TeamControl ? (global::WUProtos.Data.TeamControl) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TeamControl;
      }
    }

    /// <summary>Field number for the "store_config" field.</summary>
    public const int StoreConfigFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.StoreConfig StoreConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.StoreConfig ? (global::WUProtos.Data.StoreConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StoreConfig;
      }
    }

    /// <summary>Field number for the "store_subcategory" field.</summary>
    public const int StoreSubcategoryFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.StoreSubcategory StoreSubcategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory ? (global::WUProtos.Data.StoreSubcategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StoreSubcategory;
      }
    }

    /// <summary>Field number for the "haptic" field.</summary>
    public const int HapticFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Haptic Haptic {
      get { return messageTypeCase_ == MessageTypeOneofCase.Haptic ? (global::WUProtos.Data.Haptic) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Haptic;
      }
    }

    /// <summary>Field number for the "encounter_type" field.</summary>
    public const int EncounterTypeFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Encounter.EncounterType EncounterType {
      get { return messageTypeCase_ == MessageTypeOneofCase.EncounterType ? (global::WUProtos.Data.Encounter.EncounterType) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.EncounterType;
      }
    }

    /// <summary>Field number for the "challenge_spawn_logic" field.</summary>
    public const int ChallengeSpawnLogicFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeSpawnLogic ChallengeSpawnLogic {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic ? (global::WUProtos.Data.Challenge.ChallengeSpawnLogic) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChallengeSpawnLogic;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Profession.Profession Profession {
      get { return messageTypeCase_ == MessageTypeOneofCase.Profession ? (global::WUProtos.Data.Profession.Profession) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Profession;
      }
    }

    /// <summary>Field number for the "bonus_category" field.</summary>
    public const int BonusCategoryFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.BonusCategory BonusCategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.BonusCategory ? (global::WUProtos.Data.BonusCategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.BonusCategory;
      }
    }

    /// <summary>Field number for the "vault_category" field.</summary>
    public const int VaultCategoryFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.VaultCategory VaultCategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.VaultCategory ? (global::WUProtos.Data.VaultCategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.VaultCategory;
      }
    }

    /// <summary>Field number for the "profile_config" field.</summary>
    public const int ProfileConfigFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ProfileConfig ProfileConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.ProfileConfig ? (global::WUProtos.Data.ProfileConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ProfileConfig;
      }
    }

    /// <summary>Field number for the "collection_family_rank_table" field.</summary>
    public const int CollectionFamilyRankTableFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Collection.CollectionFamilyRankTable CollectionFamilyRankTable {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable ? (global::WUProtos.Data.Collection.CollectionFamilyRankTable) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionFamilyRankTable;
      }
    }

    /// <summary>Field number for the "map_ingredient" field.</summary>
    public const int MapIngredientFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Map.MapIngredient MapIngredient {
      get { return messageTypeCase_ == MessageTypeOneofCase.MapIngredient ? (global::WUProtos.Map.MapIngredient) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MapIngredient;
      }
    }

    /// <summary>Field number for the "map_ability" field.</summary>
    public const int MapAbilityFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Map.MapAbility MapAbility {
      get { return messageTypeCase_ == MessageTypeOneofCase.MapAbility ? (global::WUProtos.Map.MapAbility) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MapAbility;
      }
    }

    /// <summary>Field number for the "recipe" field.</summary>
    public const int RecipeFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Recipe Recipe {
      get { return messageTypeCase_ == MessageTypeOneofCase.Recipe ? (global::WUProtos.Data.Recipe) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Recipe;
      }
    }

    /// <summary>Field number for the "challenge_bonus" field.</summary>
    public const int ChallengeBonusFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus ChallengeBonus {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus ? (global::WUProtos.Data.Challenge.ChallengeBonus) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChallengeBonus;
      }
    }

    /// <summary>Field number for the "storyboard" field.</summary>
    public const int StoryboardFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Storyboard.Storyboard Storyboard {
      get { return messageTypeCase_ == MessageTypeOneofCase.Storyboard ? (global::WUProtos.Data.Storyboard.Storyboard) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Storyboard;
      }
    }

    /// <summary>Field number for the "master_note" field.</summary>
    public const int MasterNoteFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.MasterNote MasterNote {
      get { return messageTypeCase_ == MessageTypeOneofCase.MasterNote ? (global::WUProtos.Data.MasterNote) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MasterNote;
      }
    }

    /// <summary>Field number for the "cauldron" field.</summary>
    public const int CauldronFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Cauldron Cauldron {
      get { return messageTypeCase_ == MessageTypeOneofCase.Cauldron ? (global::WUProtos.Data.Cauldron) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Cauldron;
      }
    }

    /// <summary>Field number for the "rpgstat" field.</summary>
    public const int RpgstatFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Rpgstat Rpgstat {
      get { return messageTypeCase_ == MessageTypeOneofCase.Rpgstat ? (global::WUProtos.Data.Rpgstat) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Rpgstat;
      }
    }

    /// <summary>Field number for the "rpgstats_block" field.</summary>
    public const int RpgstatsBlockFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.RpgstatsBlock RpgstatsBlock {
      get { return messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock ? (global::WUProtos.Data.RpgstatsBlock) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.RpgstatsBlock;
      }
    }

    /// <summary>Field number for the "selfie_avatar_asset" field.</summary>
    public const int SelfieAvatarAssetFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SelfieAvatarAsset SelfieAvatarAsset {
      get { return messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset ? (global::WUProtos.Data.SelfieAvatarAsset) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.SelfieAvatarAsset;
      }
    }

    /// <summary>Field number for the "outpost_template" field.</summary>
    public const int OutpostTemplateFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.OutpostTemplate OutpostTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate ? (global::WUProtos.Data.OutpostTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.OutpostTemplate;
      }
    }

    /// <summary>Field number for the "daily_reward_monthly_schedule" field.</summary>
    public const int DailyRewardMonthlyScheduleFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.DailyRewardMonthlySchedule DailyRewardMonthlySchedule {
      get { return messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule ? (global::WUProtos.Data.DailyRewardMonthlySchedule) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.DailyRewardMonthlySchedule;
      }
    }

    /// <summary>Field number for the "quest" field.</summary>
    public const int QuestFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Quest Quest {
      get { return messageTypeCase_ == MessageTypeOneofCase.Quest ? (global::WUProtos.Data.Quest) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Quest;
      }
    }

    /// <summary>Field number for the "deep_link" field.</summary>
    public const int DeepLinkFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.DeepLink DeepLink {
      get { return messageTypeCase_ == MessageTypeOneofCase.DeepLink ? (global::WUProtos.Data.DeepLink) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.DeepLink;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Event.Event Event {
      get { return messageTypeCase_ == MessageTypeOneofCase.Event ? (global::WUProtos.Data.Event.Event) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Event;
      }
    }

    /// <summary>Field number for the "greenhouse_template" field.</summary>
    public const int GreenhouseTemplateFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GreenhouseTemplate GreenhouseTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate ? (global::WUProtos.Data.GreenhouseTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.GreenhouseTemplate;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.GmTemplate.Types.Version Version {
      get { return messageTypeCase_ == MessageTypeOneofCase.Version ? (global::WUProtos.Data.GmTemplate.Types.Version) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Version;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      CollectionFamily = 1,
      CollectionItem = 2,
      Encounter = 3,
      EncounterObstacle = 4,
      Spell = 5,
      VaultItem = 6,
      GameConfig = 7,
      PlayerLevel = 8,
      StorePack = 9,
      WalkboxTemplate = 10,
      FeatureFlag = 11,
      Portkey = 12,
      Buff = 13,
      FortressTemplate = 14,
      ChamberTemplate = 15,
      QualityLevel = 16,
      ProtegoPattern = 17,
      CollectionPage = 18,
      TeamControl = 19,
      StoreConfig = 20,
      StoreSubcategory = 21,
      Haptic = 22,
      EncounterType = 23,
      ChallengeSpawnLogic = 24,
      Profession = 25,
      BonusCategory = 26,
      VaultCategory = 27,
      ProfileConfig = 28,
      CollectionFamilyRankTable = 29,
      MapIngredient = 30,
      MapAbility = 31,
      Recipe = 32,
      ChallengeBonus = 33,
      Storyboard = 34,
      MasterNote = 35,
      Cauldron = 36,
      Rpgstat = 37,
      RpgstatsBlock = 38,
      SelfieAvatarAsset = 39,
      OutpostTemplate = 40,
      DailyRewardMonthlySchedule = 41,
      Quest = 42,
      DeepLink = 43,
      Event = 44,
      GreenhouseTemplate = 45,
      Version = 46,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CollectionFamily, other.CollectionFamily)) return false;
      if (!object.Equals(CollectionItem, other.CollectionItem)) return false;
      if (!object.Equals(Encounter, other.Encounter)) return false;
      if (!object.Equals(EncounterObstacle, other.EncounterObstacle)) return false;
      if (!object.Equals(Spell, other.Spell)) return false;
      if (!object.Equals(VaultItem, other.VaultItem)) return false;
      if (!object.Equals(GameConfig, other.GameConfig)) return false;
      if (!object.Equals(PlayerLevel, other.PlayerLevel)) return false;
      if (!object.Equals(StorePack, other.StorePack)) return false;
      if (!object.Equals(WalkboxTemplate, other.WalkboxTemplate)) return false;
      if (!object.Equals(FeatureFlag, other.FeatureFlag)) return false;
      if (!object.Equals(Portkey, other.Portkey)) return false;
      if (!object.Equals(Buff, other.Buff)) return false;
      if (!object.Equals(FortressTemplate, other.FortressTemplate)) return false;
      if (!object.Equals(ChamberTemplate, other.ChamberTemplate)) return false;
      if (!object.Equals(QualityLevel, other.QualityLevel)) return false;
      if (!object.Equals(ProtegoPattern, other.ProtegoPattern)) return false;
      if (!object.Equals(CollectionPage, other.CollectionPage)) return false;
      if (!object.Equals(TeamControl, other.TeamControl)) return false;
      if (!object.Equals(StoreConfig, other.StoreConfig)) return false;
      if (!object.Equals(StoreSubcategory, other.StoreSubcategory)) return false;
      if (!object.Equals(Haptic, other.Haptic)) return false;
      if (!object.Equals(EncounterType, other.EncounterType)) return false;
      if (!object.Equals(ChallengeSpawnLogic, other.ChallengeSpawnLogic)) return false;
      if (!object.Equals(Profession, other.Profession)) return false;
      if (!object.Equals(BonusCategory, other.BonusCategory)) return false;
      if (!object.Equals(VaultCategory, other.VaultCategory)) return false;
      if (!object.Equals(ProfileConfig, other.ProfileConfig)) return false;
      if (!object.Equals(CollectionFamilyRankTable, other.CollectionFamilyRankTable)) return false;
      if (!object.Equals(MapIngredient, other.MapIngredient)) return false;
      if (!object.Equals(MapAbility, other.MapAbility)) return false;
      if (!object.Equals(Recipe, other.Recipe)) return false;
      if (!object.Equals(ChallengeBonus, other.ChallengeBonus)) return false;
      if (!object.Equals(Storyboard, other.Storyboard)) return false;
      if (!object.Equals(MasterNote, other.MasterNote)) return false;
      if (!object.Equals(Cauldron, other.Cauldron)) return false;
      if (!object.Equals(Rpgstat, other.Rpgstat)) return false;
      if (!object.Equals(RpgstatsBlock, other.RpgstatsBlock)) return false;
      if (!object.Equals(SelfieAvatarAsset, other.SelfieAvatarAsset)) return false;
      if (!object.Equals(OutpostTemplate, other.OutpostTemplate)) return false;
      if (!object.Equals(DailyRewardMonthlySchedule, other.DailyRewardMonthlySchedule)) return false;
      if (!object.Equals(Quest, other.Quest)) return false;
      if (!object.Equals(DeepLink, other.DeepLink)) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(GreenhouseTemplate, other.GreenhouseTemplate)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) hash ^= CollectionFamily.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) hash ^= CollectionItem.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) hash ^= Encounter.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) hash ^= EncounterObstacle.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) hash ^= Spell.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) hash ^= VaultItem.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) hash ^= GameConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) hash ^= PlayerLevel.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) hash ^= StorePack.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) hash ^= WalkboxTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) hash ^= FeatureFlag.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) hash ^= Portkey.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) hash ^= Buff.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) hash ^= FortressTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) hash ^= ChamberTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) hash ^= QualityLevel.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) hash ^= ProtegoPattern.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) hash ^= CollectionPage.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) hash ^= TeamControl.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) hash ^= StoreConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) hash ^= StoreSubcategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) hash ^= Haptic.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) hash ^= EncounterType.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) hash ^= ChallengeSpawnLogic.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) hash ^= Profession.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) hash ^= BonusCategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) hash ^= VaultCategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) hash ^= ProfileConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) hash ^= CollectionFamilyRankTable.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) hash ^= MapIngredient.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) hash ^= MapAbility.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) hash ^= Recipe.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) hash ^= ChallengeBonus.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) hash ^= Storyboard.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) hash ^= MasterNote.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) hash ^= Cauldron.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) hash ^= Rpgstat.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) hash ^= RpgstatsBlock.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) hash ^= SelfieAvatarAsset.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) hash ^= OutpostTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) hash ^= DailyRewardMonthlySchedule.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) hash ^= Quest.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) hash ^= DeepLink.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Event) hash ^= Event.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) hash ^= GreenhouseTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Version) hash ^= Version.GetHashCode();
      hash ^= (int) messageTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
        output.WriteRawTag(10);
        output.WriteMessage(CollectionFamily);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
        output.WriteRawTag(18);
        output.WriteMessage(CollectionItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
        output.WriteRawTag(26);
        output.WriteMessage(Encounter);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) {
        output.WriteRawTag(34);
        output.WriteMessage(EncounterObstacle);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
        output.WriteRawTag(42);
        output.WriteMessage(Spell);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
        output.WriteRawTag(50);
        output.WriteMessage(VaultItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(GameConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) {
        output.WriteRawTag(66);
        output.WriteMessage(PlayerLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
        output.WriteRawTag(74);
        output.WriteMessage(StorePack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
        output.WriteRawTag(82);
        output.WriteMessage(WalkboxTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) {
        output.WriteRawTag(90);
        output.WriteMessage(FeatureFlag);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
        output.WriteRawTag(98);
        output.WriteMessage(Portkey);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
        output.WriteRawTag(106);
        output.WriteMessage(Buff);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) {
        output.WriteRawTag(114);
        output.WriteMessage(FortressTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
        output.WriteRawTag(122);
        output.WriteMessage(ChamberTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(QualityLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ProtegoPattern);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CollectionPage);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TeamControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(StoreConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StoreSubcategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Haptic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(EncounterType);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ChallengeSpawnLogic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Profession);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(BonusCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(VaultCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(ProfileConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(CollectionFamilyRankTable);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(MapIngredient);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MapAbility);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Recipe);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(ChallengeBonus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(Storyboard);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(MasterNote);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(Cauldron);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Rpgstat);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(RpgstatsBlock);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SelfieAvatarAsset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(OutpostTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(DailyRewardMonthlySchedule);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Quest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(DeepLink);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Event) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Event);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(GreenhouseTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Version) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamily);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Encounter);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncounterObstacle);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spell);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorePack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WalkboxTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeatureFlag);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portkey);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FortressTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChamberTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(QualityLevel);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProtegoPattern);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CollectionPage);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TeamControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StoreConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StoreSubcategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Haptic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncounterType);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChallengeSpawnLogic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Profession);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VaultCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamilyRankTable);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapIngredient);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapAbility);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Recipe);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChallengeBonus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Storyboard);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MasterNote);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cauldron);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rpgstat);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RpgstatsBlock);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelfieAvatarAsset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutpostTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DailyRewardMonthlySchedule);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeepLink);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Event) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GreenhouseTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Version) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmTemplate other) {
      if (other == null) {
        return;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.CollectionFamily:
          if (CollectionFamily == null) {
            CollectionFamily = new global::WUProtos.Data.Collection.CollectionFamily();
          }
          CollectionFamily.MergeFrom(other.CollectionFamily);
          break;
        case MessageTypeOneofCase.CollectionItem:
          if (CollectionItem == null) {
            CollectionItem = new global::WUProtos.Data.Collection.CollectionItem();
          }
          CollectionItem.MergeFrom(other.CollectionItem);
          break;
        case MessageTypeOneofCase.Encounter:
          if (Encounter == null) {
            Encounter = new global::WUProtos.Data.Encounter.Encounter();
          }
          Encounter.MergeFrom(other.Encounter);
          break;
        case MessageTypeOneofCase.EncounterObstacle:
          if (EncounterObstacle == null) {
            EncounterObstacle = new global::WUProtos.Data.Encounter.EncounterObstacle();
          }
          EncounterObstacle.MergeFrom(other.EncounterObstacle);
          break;
        case MessageTypeOneofCase.Spell:
          if (Spell == null) {
            Spell = new global::WUProtos.Data.Spell();
          }
          Spell.MergeFrom(other.Spell);
          break;
        case MessageTypeOneofCase.VaultItem:
          if (VaultItem == null) {
            VaultItem = new global::WUProtos.Data.VaultItem();
          }
          VaultItem.MergeFrom(other.VaultItem);
          break;
        case MessageTypeOneofCase.GameConfig:
          if (GameConfig == null) {
            GameConfig = new global::WUProtos.Data.GameConfig();
          }
          GameConfig.MergeFrom(other.GameConfig);
          break;
        case MessageTypeOneofCase.PlayerLevel:
          if (PlayerLevel == null) {
            PlayerLevel = new global::WUProtos.Data.Player.PlayerLevel();
          }
          PlayerLevel.MergeFrom(other.PlayerLevel);
          break;
        case MessageTypeOneofCase.StorePack:
          if (StorePack == null) {
            StorePack = new global::WUProtos.Data.StorePack();
          }
          StorePack.MergeFrom(other.StorePack);
          break;
        case MessageTypeOneofCase.WalkboxTemplate:
          if (WalkboxTemplate == null) {
            WalkboxTemplate = new global::WUProtos.Data.WalkboxTemplate();
          }
          WalkboxTemplate.MergeFrom(other.WalkboxTemplate);
          break;
        case MessageTypeOneofCase.FeatureFlag:
          if (FeatureFlag == null) {
            FeatureFlag = new global::WUProtos.Data.FeatureFlag();
          }
          FeatureFlag.MergeFrom(other.FeatureFlag);
          break;
        case MessageTypeOneofCase.Portkey:
          if (Portkey == null) {
            Portkey = new global::WUProtos.Data.Portkey();
          }
          Portkey.MergeFrom(other.Portkey);
          break;
        case MessageTypeOneofCase.Buff:
          if (Buff == null) {
            Buff = new global::WUProtos.Data.Buff.Buff();
          }
          Buff.MergeFrom(other.Buff);
          break;
        case MessageTypeOneofCase.FortressTemplate:
          if (FortressTemplate == null) {
            FortressTemplate = new global::WUProtos.Data.FortressTemplate();
          }
          FortressTemplate.MergeFrom(other.FortressTemplate);
          break;
        case MessageTypeOneofCase.ChamberTemplate:
          if (ChamberTemplate == null) {
            ChamberTemplate = new global::WUProtos.Data.ChamberTemplate();
          }
          ChamberTemplate.MergeFrom(other.ChamberTemplate);
          break;
        case MessageTypeOneofCase.QualityLevel:
          if (QualityLevel == null) {
            QualityLevel = new global::WUProtos.Data.QualityLevel();
          }
          QualityLevel.MergeFrom(other.QualityLevel);
          break;
        case MessageTypeOneofCase.ProtegoPattern:
          if (ProtegoPattern == null) {
            ProtegoPattern = new global::WUProtos.Data.ProtegoPattern();
          }
          ProtegoPattern.MergeFrom(other.ProtegoPattern);
          break;
        case MessageTypeOneofCase.CollectionPage:
          if (CollectionPage == null) {
            CollectionPage = new global::WUProtos.Data.Collection.CollectionPage();
          }
          CollectionPage.MergeFrom(other.CollectionPage);
          break;
        case MessageTypeOneofCase.TeamControl:
          if (TeamControl == null) {
            TeamControl = new global::WUProtos.Data.TeamControl();
          }
          TeamControl.MergeFrom(other.TeamControl);
          break;
        case MessageTypeOneofCase.StoreConfig:
          if (StoreConfig == null) {
            StoreConfig = new global::WUProtos.Data.StoreConfig();
          }
          StoreConfig.MergeFrom(other.StoreConfig);
          break;
        case MessageTypeOneofCase.StoreSubcategory:
          if (StoreSubcategory == null) {
            StoreSubcategory = new global::WUProtos.Data.StoreSubcategory();
          }
          StoreSubcategory.MergeFrom(other.StoreSubcategory);
          break;
        case MessageTypeOneofCase.Haptic:
          if (Haptic == null) {
            Haptic = new global::WUProtos.Data.Haptic();
          }
          Haptic.MergeFrom(other.Haptic);
          break;
        case MessageTypeOneofCase.EncounterType:
          if (EncounterType == null) {
            EncounterType = new global::WUProtos.Data.Encounter.EncounterType();
          }
          EncounterType.MergeFrom(other.EncounterType);
          break;
        case MessageTypeOneofCase.ChallengeSpawnLogic:
          if (ChallengeSpawnLogic == null) {
            ChallengeSpawnLogic = new global::WUProtos.Data.Challenge.ChallengeSpawnLogic();
          }
          ChallengeSpawnLogic.MergeFrom(other.ChallengeSpawnLogic);
          break;
        case MessageTypeOneofCase.Profession:
          if (Profession == null) {
            Profession = new global::WUProtos.Data.Profession.Profession();
          }
          Profession.MergeFrom(other.Profession);
          break;
        case MessageTypeOneofCase.BonusCategory:
          if (BonusCategory == null) {
            BonusCategory = new global::WUProtos.Data.BonusCategory();
          }
          BonusCategory.MergeFrom(other.BonusCategory);
          break;
        case MessageTypeOneofCase.VaultCategory:
          if (VaultCategory == null) {
            VaultCategory = new global::WUProtos.Data.VaultCategory();
          }
          VaultCategory.MergeFrom(other.VaultCategory);
          break;
        case MessageTypeOneofCase.ProfileConfig:
          if (ProfileConfig == null) {
            ProfileConfig = new global::WUProtos.Data.ProfileConfig();
          }
          ProfileConfig.MergeFrom(other.ProfileConfig);
          break;
        case MessageTypeOneofCase.CollectionFamilyRankTable:
          if (CollectionFamilyRankTable == null) {
            CollectionFamilyRankTable = new global::WUProtos.Data.Collection.CollectionFamilyRankTable();
          }
          CollectionFamilyRankTable.MergeFrom(other.CollectionFamilyRankTable);
          break;
        case MessageTypeOneofCase.MapIngredient:
          if (MapIngredient == null) {
            MapIngredient = new global::WUProtos.Map.MapIngredient();
          }
          MapIngredient.MergeFrom(other.MapIngredient);
          break;
        case MessageTypeOneofCase.MapAbility:
          if (MapAbility == null) {
            MapAbility = new global::WUProtos.Map.MapAbility();
          }
          MapAbility.MergeFrom(other.MapAbility);
          break;
        case MessageTypeOneofCase.Recipe:
          if (Recipe == null) {
            Recipe = new global::WUProtos.Data.Recipe();
          }
          Recipe.MergeFrom(other.Recipe);
          break;
        case MessageTypeOneofCase.ChallengeBonus:
          if (ChallengeBonus == null) {
            ChallengeBonus = new global::WUProtos.Data.Challenge.ChallengeBonus();
          }
          ChallengeBonus.MergeFrom(other.ChallengeBonus);
          break;
        case MessageTypeOneofCase.Storyboard:
          if (Storyboard == null) {
            Storyboard = new global::WUProtos.Data.Storyboard.Storyboard();
          }
          Storyboard.MergeFrom(other.Storyboard);
          break;
        case MessageTypeOneofCase.MasterNote:
          if (MasterNote == null) {
            MasterNote = new global::WUProtos.Data.MasterNote();
          }
          MasterNote.MergeFrom(other.MasterNote);
          break;
        case MessageTypeOneofCase.Cauldron:
          if (Cauldron == null) {
            Cauldron = new global::WUProtos.Data.Cauldron();
          }
          Cauldron.MergeFrom(other.Cauldron);
          break;
        case MessageTypeOneofCase.Rpgstat:
          if (Rpgstat == null) {
            Rpgstat = new global::WUProtos.Data.Rpgstat();
          }
          Rpgstat.MergeFrom(other.Rpgstat);
          break;
        case MessageTypeOneofCase.RpgstatsBlock:
          if (RpgstatsBlock == null) {
            RpgstatsBlock = new global::WUProtos.Data.RpgstatsBlock();
          }
          RpgstatsBlock.MergeFrom(other.RpgstatsBlock);
          break;
        case MessageTypeOneofCase.SelfieAvatarAsset:
          if (SelfieAvatarAsset == null) {
            SelfieAvatarAsset = new global::WUProtos.Data.SelfieAvatarAsset();
          }
          SelfieAvatarAsset.MergeFrom(other.SelfieAvatarAsset);
          break;
        case MessageTypeOneofCase.OutpostTemplate:
          if (OutpostTemplate == null) {
            OutpostTemplate = new global::WUProtos.Data.OutpostTemplate();
          }
          OutpostTemplate.MergeFrom(other.OutpostTemplate);
          break;
        case MessageTypeOneofCase.DailyRewardMonthlySchedule:
          if (DailyRewardMonthlySchedule == null) {
            DailyRewardMonthlySchedule = new global::WUProtos.Data.DailyRewardMonthlySchedule();
          }
          DailyRewardMonthlySchedule.MergeFrom(other.DailyRewardMonthlySchedule);
          break;
        case MessageTypeOneofCase.Quest:
          if (Quest == null) {
            Quest = new global::WUProtos.Data.Quest();
          }
          Quest.MergeFrom(other.Quest);
          break;
        case MessageTypeOneofCase.DeepLink:
          if (DeepLink == null) {
            DeepLink = new global::WUProtos.Data.DeepLink();
          }
          DeepLink.MergeFrom(other.DeepLink);
          break;
        case MessageTypeOneofCase.Event:
          if (Event == null) {
            Event = new global::WUProtos.Data.Event.Event();
          }
          Event.MergeFrom(other.Event);
          break;
        case MessageTypeOneofCase.GreenhouseTemplate:
          if (GreenhouseTemplate == null) {
            GreenhouseTemplate = new global::WUProtos.Data.GreenhouseTemplate();
          }
          GreenhouseTemplate.MergeFrom(other.GreenhouseTemplate);
          break;
        case MessageTypeOneofCase.Version:
          if (Version == null) {
            Version = new global::WUProtos.Data.GmTemplate.Types.Version();
          }
          Version.MergeFrom(other.Version);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.Collection.CollectionFamily subBuilder = new global::WUProtos.Data.Collection.CollectionFamily();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
              subBuilder.MergeFrom(CollectionFamily);
            }
            input.ReadMessage(subBuilder);
            CollectionFamily = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.Collection.CollectionItem subBuilder = new global::WUProtos.Data.Collection.CollectionItem();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
              subBuilder.MergeFrom(CollectionItem);
            }
            input.ReadMessage(subBuilder);
            CollectionItem = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.Encounter.Encounter subBuilder = new global::WUProtos.Data.Encounter.Encounter();
            if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
              subBuilder.MergeFrom(Encounter);
            }
            input.ReadMessage(subBuilder);
            Encounter = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.Encounter.EncounterObstacle subBuilder = new global::WUProtos.Data.Encounter.EncounterObstacle();
            if (messageTypeCase_ == MessageTypeOneofCase.EncounterObstacle) {
              subBuilder.MergeFrom(EncounterObstacle);
            }
            input.ReadMessage(subBuilder);
            EncounterObstacle = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.Spell subBuilder = new global::WUProtos.Data.Spell();
            if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
              subBuilder.MergeFrom(Spell);
            }
            input.ReadMessage(subBuilder);
            Spell = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.VaultItem subBuilder = new global::WUProtos.Data.VaultItem();
            if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
              subBuilder.MergeFrom(VaultItem);
            }
            input.ReadMessage(subBuilder);
            VaultItem = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.GameConfig subBuilder = new global::WUProtos.Data.GameConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
              subBuilder.MergeFrom(GameConfig);
            }
            input.ReadMessage(subBuilder);
            GameConfig = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Player.PlayerLevel subBuilder = new global::WUProtos.Data.Player.PlayerLevel();
            if (messageTypeCase_ == MessageTypeOneofCase.PlayerLevel) {
              subBuilder.MergeFrom(PlayerLevel);
            }
            input.ReadMessage(subBuilder);
            PlayerLevel = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.StorePack subBuilder = new global::WUProtos.Data.StorePack();
            if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
              subBuilder.MergeFrom(StorePack);
            }
            input.ReadMessage(subBuilder);
            StorePack = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.WalkboxTemplate subBuilder = new global::WUProtos.Data.WalkboxTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
              subBuilder.MergeFrom(WalkboxTemplate);
            }
            input.ReadMessage(subBuilder);
            WalkboxTemplate = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.FeatureFlag subBuilder = new global::WUProtos.Data.FeatureFlag();
            if (messageTypeCase_ == MessageTypeOneofCase.FeatureFlag) {
              subBuilder.MergeFrom(FeatureFlag);
            }
            input.ReadMessage(subBuilder);
            FeatureFlag = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.Portkey subBuilder = new global::WUProtos.Data.Portkey();
            if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
              subBuilder.MergeFrom(Portkey);
            }
            input.ReadMessage(subBuilder);
            Portkey = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.Buff.Buff subBuilder = new global::WUProtos.Data.Buff.Buff();
            if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
              subBuilder.MergeFrom(Buff);
            }
            input.ReadMessage(subBuilder);
            Buff = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.FortressTemplate subBuilder = new global::WUProtos.Data.FortressTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.FortressTemplate) {
              subBuilder.MergeFrom(FortressTemplate);
            }
            input.ReadMessage(subBuilder);
            FortressTemplate = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Data.ChamberTemplate subBuilder = new global::WUProtos.Data.ChamberTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
              subBuilder.MergeFrom(ChamberTemplate);
            }
            input.ReadMessage(subBuilder);
            ChamberTemplate = subBuilder;
            break;
          }
          case 130: {
            global::WUProtos.Data.QualityLevel subBuilder = new global::WUProtos.Data.QualityLevel();
            if (messageTypeCase_ == MessageTypeOneofCase.QualityLevel) {
              subBuilder.MergeFrom(QualityLevel);
            }
            input.ReadMessage(subBuilder);
            QualityLevel = subBuilder;
            break;
          }
          case 138: {
            global::WUProtos.Data.ProtegoPattern subBuilder = new global::WUProtos.Data.ProtegoPattern();
            if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
              subBuilder.MergeFrom(ProtegoPattern);
            }
            input.ReadMessage(subBuilder);
            ProtegoPattern = subBuilder;
            break;
          }
          case 146: {
            global::WUProtos.Data.Collection.CollectionPage subBuilder = new global::WUProtos.Data.Collection.CollectionPage();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
              subBuilder.MergeFrom(CollectionPage);
            }
            input.ReadMessage(subBuilder);
            CollectionPage = subBuilder;
            break;
          }
          case 154: {
            global::WUProtos.Data.TeamControl subBuilder = new global::WUProtos.Data.TeamControl();
            if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
              subBuilder.MergeFrom(TeamControl);
            }
            input.ReadMessage(subBuilder);
            TeamControl = subBuilder;
            break;
          }
          case 162: {
            global::WUProtos.Data.StoreConfig subBuilder = new global::WUProtos.Data.StoreConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
              subBuilder.MergeFrom(StoreConfig);
            }
            input.ReadMessage(subBuilder);
            StoreConfig = subBuilder;
            break;
          }
          case 170: {
            global::WUProtos.Data.StoreSubcategory subBuilder = new global::WUProtos.Data.StoreSubcategory();
            if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
              subBuilder.MergeFrom(StoreSubcategory);
            }
            input.ReadMessage(subBuilder);
            StoreSubcategory = subBuilder;
            break;
          }
          case 178: {
            global::WUProtos.Data.Haptic subBuilder = new global::WUProtos.Data.Haptic();
            if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
              subBuilder.MergeFrom(Haptic);
            }
            input.ReadMessage(subBuilder);
            Haptic = subBuilder;
            break;
          }
          case 186: {
            global::WUProtos.Data.Encounter.EncounterType subBuilder = new global::WUProtos.Data.Encounter.EncounterType();
            if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
              subBuilder.MergeFrom(EncounterType);
            }
            input.ReadMessage(subBuilder);
            EncounterType = subBuilder;
            break;
          }
          case 194: {
            global::WUProtos.Data.Challenge.ChallengeSpawnLogic subBuilder = new global::WUProtos.Data.Challenge.ChallengeSpawnLogic();
            if (messageTypeCase_ == MessageTypeOneofCase.ChallengeSpawnLogic) {
              subBuilder.MergeFrom(ChallengeSpawnLogic);
            }
            input.ReadMessage(subBuilder);
            ChallengeSpawnLogic = subBuilder;
            break;
          }
          case 202: {
            global::WUProtos.Data.Profession.Profession subBuilder = new global::WUProtos.Data.Profession.Profession();
            if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
              subBuilder.MergeFrom(Profession);
            }
            input.ReadMessage(subBuilder);
            Profession = subBuilder;
            break;
          }
          case 210: {
            global::WUProtos.Data.BonusCategory subBuilder = new global::WUProtos.Data.BonusCategory();
            if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
              subBuilder.MergeFrom(BonusCategory);
            }
            input.ReadMessage(subBuilder);
            BonusCategory = subBuilder;
            break;
          }
          case 218: {
            global::WUProtos.Data.VaultCategory subBuilder = new global::WUProtos.Data.VaultCategory();
            if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
              subBuilder.MergeFrom(VaultCategory);
            }
            input.ReadMessage(subBuilder);
            VaultCategory = subBuilder;
            break;
          }
          case 226: {
            global::WUProtos.Data.ProfileConfig subBuilder = new global::WUProtos.Data.ProfileConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
              subBuilder.MergeFrom(ProfileConfig);
            }
            input.ReadMessage(subBuilder);
            ProfileConfig = subBuilder;
            break;
          }
          case 234: {
            global::WUProtos.Data.Collection.CollectionFamilyRankTable subBuilder = new global::WUProtos.Data.Collection.CollectionFamilyRankTable();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamilyRankTable) {
              subBuilder.MergeFrom(CollectionFamilyRankTable);
            }
            input.ReadMessage(subBuilder);
            CollectionFamilyRankTable = subBuilder;
            break;
          }
          case 242: {
            global::WUProtos.Map.MapIngredient subBuilder = new global::WUProtos.Map.MapIngredient();
            if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
              subBuilder.MergeFrom(MapIngredient);
            }
            input.ReadMessage(subBuilder);
            MapIngredient = subBuilder;
            break;
          }
          case 250: {
            global::WUProtos.Map.MapAbility subBuilder = new global::WUProtos.Map.MapAbility();
            if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
              subBuilder.MergeFrom(MapAbility);
            }
            input.ReadMessage(subBuilder);
            MapAbility = subBuilder;
            break;
          }
          case 258: {
            global::WUProtos.Data.Recipe subBuilder = new global::WUProtos.Data.Recipe();
            if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
              subBuilder.MergeFrom(Recipe);
            }
            input.ReadMessage(subBuilder);
            Recipe = subBuilder;
            break;
          }
          case 266: {
            global::WUProtos.Data.Challenge.ChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus();
            if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
              subBuilder.MergeFrom(ChallengeBonus);
            }
            input.ReadMessage(subBuilder);
            ChallengeBonus = subBuilder;
            break;
          }
          case 274: {
            global::WUProtos.Data.Storyboard.Storyboard subBuilder = new global::WUProtos.Data.Storyboard.Storyboard();
            if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
              subBuilder.MergeFrom(Storyboard);
            }
            input.ReadMessage(subBuilder);
            Storyboard = subBuilder;
            break;
          }
          case 282: {
            global::WUProtos.Data.MasterNote subBuilder = new global::WUProtos.Data.MasterNote();
            if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
              subBuilder.MergeFrom(MasterNote);
            }
            input.ReadMessage(subBuilder);
            MasterNote = subBuilder;
            break;
          }
          case 290: {
            global::WUProtos.Data.Cauldron subBuilder = new global::WUProtos.Data.Cauldron();
            if (messageTypeCase_ == MessageTypeOneofCase.Cauldron) {
              subBuilder.MergeFrom(Cauldron);
            }
            input.ReadMessage(subBuilder);
            Cauldron = subBuilder;
            break;
          }
          case 298: {
            global::WUProtos.Data.Rpgstat subBuilder = new global::WUProtos.Data.Rpgstat();
            if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
              subBuilder.MergeFrom(Rpgstat);
            }
            input.ReadMessage(subBuilder);
            Rpgstat = subBuilder;
            break;
          }
          case 306: {
            global::WUProtos.Data.RpgstatsBlock subBuilder = new global::WUProtos.Data.RpgstatsBlock();
            if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
              subBuilder.MergeFrom(RpgstatsBlock);
            }
            input.ReadMessage(subBuilder);
            RpgstatsBlock = subBuilder;
            break;
          }
          case 314: {
            global::WUProtos.Data.SelfieAvatarAsset subBuilder = new global::WUProtos.Data.SelfieAvatarAsset();
            if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
              subBuilder.MergeFrom(SelfieAvatarAsset);
            }
            input.ReadMessage(subBuilder);
            SelfieAvatarAsset = subBuilder;
            break;
          }
          case 322: {
            global::WUProtos.Data.OutpostTemplate subBuilder = new global::WUProtos.Data.OutpostTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
              subBuilder.MergeFrom(OutpostTemplate);
            }
            input.ReadMessage(subBuilder);
            OutpostTemplate = subBuilder;
            break;
          }
          case 330: {
            global::WUProtos.Data.DailyRewardMonthlySchedule subBuilder = new global::WUProtos.Data.DailyRewardMonthlySchedule();
            if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
              subBuilder.MergeFrom(DailyRewardMonthlySchedule);
            }
            input.ReadMessage(subBuilder);
            DailyRewardMonthlySchedule = subBuilder;
            break;
          }
          case 338: {
            global::WUProtos.Data.Quest subBuilder = new global::WUProtos.Data.Quest();
            if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
              subBuilder.MergeFrom(Quest);
            }
            input.ReadMessage(subBuilder);
            Quest = subBuilder;
            break;
          }
          case 346: {
            global::WUProtos.Data.DeepLink subBuilder = new global::WUProtos.Data.DeepLink();
            if (messageTypeCase_ == MessageTypeOneofCase.DeepLink) {
              subBuilder.MergeFrom(DeepLink);
            }
            input.ReadMessage(subBuilder);
            DeepLink = subBuilder;
            break;
          }
          case 354: {
            global::WUProtos.Data.Event.Event subBuilder = new global::WUProtos.Data.Event.Event();
            if (messageTypeCase_ == MessageTypeOneofCase.Event) {
              subBuilder.MergeFrom(Event);
            }
            input.ReadMessage(subBuilder);
            Event = subBuilder;
            break;
          }
          case 362: {
            global::WUProtos.Data.GreenhouseTemplate subBuilder = new global::WUProtos.Data.GreenhouseTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.GreenhouseTemplate) {
              subBuilder.MergeFrom(GreenhouseTemplate);
            }
            input.ReadMessage(subBuilder);
            GreenhouseTemplate = subBuilder;
            break;
          }
          case 370: {
            global::WUProtos.Data.GmTemplate.Types.Version subBuilder = new global::WUProtos.Data.GmTemplate.Types.Version();
            if (messageTypeCase_ == MessageTypeOneofCase.Version) {
              subBuilder.MergeFrom(Version);
            }
            input.ReadMessage(subBuilder);
            Version = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GmTemplate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Version : pb::IMessage<Version> {
        private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Version> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.GmTemplate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version(Version other) : this() {
          id_ = other.id_;
          dataVersion_ = other.dataVersion_;
          dataBranch_ = other.dataBranch_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Version Clone() {
          return new Version(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data_version" field.</summary>
        public const int DataVersionFieldNumber = 2;
        private string dataVersion_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataVersion {
          get { return dataVersion_; }
          set {
            dataVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data_branch" field.</summary>
        public const int DataBranchFieldNumber = 3;
        private string dataBranch_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DataBranch {
          get { return dataBranch_; }
          set {
            dataBranch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Version);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Version other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (DataVersion != other.DataVersion) return false;
          if (DataBranch != other.DataBranch) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (DataVersion.Length != 0) hash ^= DataVersion.GetHashCode();
          if (DataBranch.Length != 0) hash ^= DataBranch.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (DataVersion.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DataVersion);
          }
          if (DataBranch.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(DataBranch);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (DataVersion.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DataVersion);
          }
          if (DataBranch.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DataBranch);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Version other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.DataVersion.Length != 0) {
            DataVersion = other.DataVersion;
          }
          if (other.DataBranch.Length != 0) {
            DataBranch = other.DataBranch;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                DataVersion = input.ReadString();
                break;
              }
              case 26: {
                DataBranch = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
