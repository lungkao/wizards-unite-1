// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/ChamberState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/ChamberState.proto</summary>
  public static partial class ChamberStateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/ChamberState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChamberStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBXVVByb3Rvcy9EYXRhL0NoYW1iZXJTdGF0ZS5wcm90bxINV1VQcm90b3Mu",
            "RGF0YRoqV1VQcm90b3MvRW51bXMvQ2hhbGxlbmdlRmluaXNoU3RhdHVzLnBy",
            "b3RvGidXVVByb3Rvcy9EYXRhL0xvb3QvTG9vdENvbGxlY3Rpb24ucHJvdG8a",
            "IVdVUHJvdG9zL0RhdGEvTWFwQ29vcmRpbmF0ZS5wcm90bxojV1VQcm90b3Mv",
            "RGF0YS9DaGFtYmVyTW9iU3RhdGUucHJvdG8aJldVUHJvdG9zL0RhdGEvQ2hh",
            "bWJlclBsYXllclN0YXRlLnByb3RvItUJCgxDaGFtYmVyU3RhdGUSHwoXY2hh",
            "bWJlcl90ZW1wbGF0ZV9nbXRfaWQYASABKAkSMQoGcGxheWVyGAIgAygLMiEu",
            "V1VQcm90b3MuRGF0YS5DaGFtYmVyUGxheWVyU3RhdGUSSwoQd2FpdGluZ190",
            "b19zdGFydBgEIAEoCzIvLldVUHJvdG9zLkRhdGEuQ2hhbWJlclN0YXRlLldh",
            "aXRpbmdUb1N0YXJ0U3RhdGVIABJCCgtpbl9wcm9ncmVzcxgFIAEoCzIrLldV",
            "UHJvdG9zLkRhdGEuQ2hhbWJlclN0YXRlLkluUHJvZ3Jlc3NTdGF0ZUgAEj0K",
            "CGZpbmlzaGVkGAYgASgLMikuV1VQcm90b3MuRGF0YS5DaGFtYmVyU3RhdGUu",
            "RmluaXNoZWRTdGF0ZUgAEhEKCXRpbWVzdGFtcBgHIAEoAxqCAQoNRmluaXNo",
            "ZWRTdGF0ZRI8Cg1maW5pc2hfc3RhdHVzGAEgASgOMiUuV1VQcm90b3MuRW51",
            "bXMuQ2hhbGxlbmdlRmluaXNoU3RhdHVzEjMKB3Jld2FyZHMYAiABKAsyIi5X",
            "VVByb3Rvcy5EYXRhLkxvb3QuTG9vdENvbGxlY3Rpb24awgMKD0luUHJvZ3Jl",
            "c3NTdGF0ZRITCgtlbmRfdGltZV9tcxgBIAEoAxIsCgRtb2JzGAIgAygLMh4u",
            "V1VQcm90b3MuRGF0YS5DaGFtYmVyTW9iU3RhdGUSRAoQdXNlZF9tYXBfYWJp",
            "bGl0eRgDIAMoCzIqLldVUHJvdG9zLkRhdGEuQ2hhbWJlclN0YXRlLlVzZWRN",
            "YXBBYmlsaXR5EhcKD3RvdGFsX21vYl9jb3VudBgEIAEoBRqMAgoOVXNlZE1h",
            "cEFiaWxpdHkSGgoSbWFwX2FiaWxpdHlfZ210X2lkGAEgASgJEhEKCWNhc3Rl",
            "cl9pZBgCIAEoCRIOCgZyYWRpdXMYAyABKAISGQoRY2FzdGluZ190aW1lc3Rh",
            "bXAYBCABKAMSGAoQZW5kaW5nX3RpbWVzdGFtcBgFIAEoAxI0Cg5tYXBfY29v",
            "cmRpbmF0ZRgGIAEoCzIcLldVUHJvdG9zLkRhdGEuTWFwQ29vcmRpbmF0ZRIZ",
            "ChFtYXBfYWJpbGl0eV9sZXZlbBgHIAEoBRIVCg10YXJnZXRfbW9iX2lkGAgg",
            "ASgMEh4KFnRhcmdldF9wbGF5ZXJfbmlja25hbWUYCSABKAkajAIKDlVzZWRN",
            "YXBBYmlsaXR5EhoKEm1hcF9hYmlsaXR5X2dtdF9pZBgBIAEoCRIRCgljYXN0",
            "ZXJfaWQYAiABKAkSDgoGcmFkaXVzGAMgASgCEhkKEWNhc3RpbmdfdGltZXN0",
            "YW1wGAQgASgDEhgKEGVuZGluZ190aW1lc3RhbXAYBSABKAMSNAoObWFwX2Nv",
            "b3JkaW5hdGUYBiABKAsyHC5XVVByb3Rvcy5EYXRhLk1hcENvb3JkaW5hdGUS",
            "GQoRbWFwX2FiaWxpdHlfbGV2ZWwYByABKAUSFQoNdGFyZ2V0X21vYl9pZBgI",
            "IAEoDBIeChZ0YXJnZXRfcGxheWVyX25pY2tuYW1lGAkgASgJGiwKE1dhaXRp",
            "bmdUb1N0YXJ0U3RhdGUSFQoNc3RhcnRfdGltZV9tcxgBIAEoA0IHCgVTdGF0",
            "ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Enums.ChallengeFinishStatusReflection.Descriptor, global::WUProtos.Data.Loot.LootCollectionReflection.Descriptor, global::WUProtos.Data.MapCoordinateReflection.Descriptor, global::WUProtos.Data.ChamberMobStateReflection.Descriptor, global::WUProtos.Data.ChamberPlayerStateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState), global::WUProtos.Data.ChamberState.Parser, new[]{ "ChamberTemplateGmtId", "Player", "WaitingToStart", "InProgress", "Finished", "Timestamp" }, new[]{ "State" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.FinishedState), global::WUProtos.Data.ChamberState.Types.FinishedState.Parser, new[]{ "FinishStatus", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.InProgressState), global::WUProtos.Data.ChamberState.Types.InProgressState.Parser, new[]{ "EndTimeMs", "Mobs", "UsedMapAbility", "TotalMobCount" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.InProgressState.Types.UsedMapAbility), global::WUProtos.Data.ChamberState.Types.InProgressState.Types.UsedMapAbility.Parser, new[]{ "MapAbilityGmtId", "CasterId", "Radius", "CastingTimestamp", "EndingTimestamp", "MapCoordinate", "MapAbilityLevel", "TargetMobId", "TargetPlayerNickname" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.UsedMapAbility), global::WUProtos.Data.ChamberState.Types.UsedMapAbility.Parser, new[]{ "MapAbilityGmtId", "CasterId", "Radius", "CastingTimestamp", "EndingTimestamp", "MapCoordinate", "MapAbilityLevel", "TargetMobId", "TargetPlayerNickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberState.Types.WaitingToStartState), global::WUProtos.Data.ChamberState.Types.WaitingToStartState.Parser, new[]{ "StartTimeMs" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChamberState : pb::IMessage<ChamberState> {
    private static readonly pb::MessageParser<ChamberState> _parser = new pb::MessageParser<ChamberState>(() => new ChamberState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChamberState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.ChamberStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberState(ChamberState other) : this() {
      chamberTemplateGmtId_ = other.chamberTemplateGmtId_;
      player_ = other.player_.Clone();
      timestamp_ = other.timestamp_;
      switch (other.StateCase) {
        case StateOneofCase.WaitingToStart:
          WaitingToStart = other.WaitingToStart.Clone();
          break;
        case StateOneofCase.InProgress:
          InProgress = other.InProgress.Clone();
          break;
        case StateOneofCase.Finished:
          Finished = other.Finished.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberState Clone() {
      return new ChamberState(this);
    }

    /// <summary>Field number for the "chamber_template_gmt_id" field.</summary>
    public const int ChamberTemplateGmtIdFieldNumber = 1;
    private string chamberTemplateGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChamberTemplateGmtId {
      get { return chamberTemplateGmtId_; }
      set {
        chamberTemplateGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberPlayerState> _repeated_player_codec
        = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.ChamberPlayerState.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberPlayerState> player_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberPlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.ChamberPlayerState> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "waiting_to_start" field.</summary>
    public const int WaitingToStartFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberState.Types.WaitingToStartState WaitingToStart {
      get { return stateCase_ == StateOneofCase.WaitingToStart ? (global::WUProtos.Data.ChamberState.Types.WaitingToStartState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.WaitingToStart;
      }
    }

    /// <summary>Field number for the "in_progress" field.</summary>
    public const int InProgressFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberState.Types.InProgressState InProgress {
      get { return stateCase_ == StateOneofCase.InProgress ? (global::WUProtos.Data.ChamberState.Types.InProgressState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.InProgress;
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberState.Types.FinishedState Finished {
      get { return stateCase_ == StateOneofCase.Finished ? (global::WUProtos.Data.ChamberState.Types.FinishedState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Finished;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    private object state_;
    /// <summary>Enum of possible cases for the "State" oneof.</summary>
    public enum StateOneofCase {
      None = 0,
      WaitingToStart = 4,
      InProgress = 5,
      Finished = 6,
    }
    private StateOneofCase stateCase_ = StateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateOneofCase StateCase {
      get { return stateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      stateCase_ = StateOneofCase.None;
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChamberState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChamberState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChamberTemplateGmtId != other.ChamberTemplateGmtId) return false;
      if(!player_.Equals(other.player_)) return false;
      if (!object.Equals(WaitingToStart, other.WaitingToStart)) return false;
      if (!object.Equals(InProgress, other.InProgress)) return false;
      if (!object.Equals(Finished, other.Finished)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (StateCase != other.StateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChamberTemplateGmtId.Length != 0) hash ^= ChamberTemplateGmtId.GetHashCode();
      hash ^= player_.GetHashCode();
      if (stateCase_ == StateOneofCase.WaitingToStart) hash ^= WaitingToStart.GetHashCode();
      if (stateCase_ == StateOneofCase.InProgress) hash ^= InProgress.GetHashCode();
      if (stateCase_ == StateOneofCase.Finished) hash ^= Finished.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= (int) stateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChamberTemplateGmtId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChamberTemplateGmtId);
      }
      player_.WriteTo(output, _repeated_player_codec);
      if (stateCase_ == StateOneofCase.WaitingToStart) {
        output.WriteRawTag(34);
        output.WriteMessage(WaitingToStart);
      }
      if (stateCase_ == StateOneofCase.InProgress) {
        output.WriteRawTag(42);
        output.WriteMessage(InProgress);
      }
      if (stateCase_ == StateOneofCase.Finished) {
        output.WriteRawTag(50);
        output.WriteMessage(Finished);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChamberTemplateGmtId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChamberTemplateGmtId);
      }
      size += player_.CalculateSize(_repeated_player_codec);
      if (stateCase_ == StateOneofCase.WaitingToStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WaitingToStart);
      }
      if (stateCase_ == StateOneofCase.InProgress) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InProgress);
      }
      if (stateCase_ == StateOneofCase.Finished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finished);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChamberState other) {
      if (other == null) {
        return;
      }
      if (other.ChamberTemplateGmtId.Length != 0) {
        ChamberTemplateGmtId = other.ChamberTemplateGmtId;
      }
      player_.Add(other.player_);
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      switch (other.StateCase) {
        case StateOneofCase.WaitingToStart:
          if (WaitingToStart == null) {
            WaitingToStart = new global::WUProtos.Data.ChamberState.Types.WaitingToStartState();
          }
          WaitingToStart.MergeFrom(other.WaitingToStart);
          break;
        case StateOneofCase.InProgress:
          if (InProgress == null) {
            InProgress = new global::WUProtos.Data.ChamberState.Types.InProgressState();
          }
          InProgress.MergeFrom(other.InProgress);
          break;
        case StateOneofCase.Finished:
          if (Finished == null) {
            Finished = new global::WUProtos.Data.ChamberState.Types.FinishedState();
          }
          Finished.MergeFrom(other.Finished);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChamberTemplateGmtId = input.ReadString();
            break;
          }
          case 18: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
          case 34: {
            global::WUProtos.Data.ChamberState.Types.WaitingToStartState subBuilder = new global::WUProtos.Data.ChamberState.Types.WaitingToStartState();
            if (stateCase_ == StateOneofCase.WaitingToStart) {
              subBuilder.MergeFrom(WaitingToStart);
            }
            input.ReadMessage(subBuilder);
            WaitingToStart = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.ChamberState.Types.InProgressState subBuilder = new global::WUProtos.Data.ChamberState.Types.InProgressState();
            if (stateCase_ == StateOneofCase.InProgress) {
              subBuilder.MergeFrom(InProgress);
            }
            input.ReadMessage(subBuilder);
            InProgress = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.ChamberState.Types.FinishedState subBuilder = new global::WUProtos.Data.ChamberState.Types.FinishedState();
            if (stateCase_ == StateOneofCase.Finished) {
              subBuilder.MergeFrom(Finished);
            }
            input.ReadMessage(subBuilder);
            Finished = subBuilder;
            break;
          }
          case 56: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChamberState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FinishedState : pb::IMessage<FinishedState> {
        private static readonly pb::MessageParser<FinishedState> _parser = new pb::MessageParser<FinishedState>(() => new FinishedState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FinishedState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinishedState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinishedState(FinishedState other) : this() {
          finishStatus_ = other.finishStatus_;
          rewards_ = other.rewards_ != null ? other.rewards_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FinishedState Clone() {
          return new FinishedState(this);
        }

        /// <summary>Field number for the "finish_status" field.</summary>
        public const int FinishStatusFieldNumber = 1;
        private global::WUProtos.Enums.ChallengeFinishStatus finishStatus_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Enums.ChallengeFinishStatus FinishStatus {
          get { return finishStatus_; }
          set {
            finishStatus_ = value;
          }
        }

        /// <summary>Field number for the "rewards" field.</summary>
        public const int RewardsFieldNumber = 2;
        private global::WUProtos.Data.Loot.LootCollection rewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.Loot.LootCollection Rewards {
          get { return rewards_; }
          set {
            rewards_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FinishedState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FinishedState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FinishStatus != other.FinishStatus) return false;
          if (!object.Equals(Rewards, other.Rewards)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FinishStatus != 0) hash ^= FinishStatus.GetHashCode();
          if (rewards_ != null) hash ^= Rewards.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FinishStatus != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) FinishStatus);
          }
          if (rewards_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Rewards);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FinishStatus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FinishStatus);
          }
          if (rewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rewards);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FinishedState other) {
          if (other == null) {
            return;
          }
          if (other.FinishStatus != 0) {
            FinishStatus = other.FinishStatus;
          }
          if (other.rewards_ != null) {
            if (rewards_ == null) {
              Rewards = new global::WUProtos.Data.Loot.LootCollection();
            }
            Rewards.MergeFrom(other.Rewards);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FinishStatus = (global::WUProtos.Enums.ChallengeFinishStatus) input.ReadEnum();
                break;
              }
              case 18: {
                if (rewards_ == null) {
                  Rewards = new global::WUProtos.Data.Loot.LootCollection();
                }
                input.ReadMessage(Rewards);
                break;
              }
            }
          }
        }

      }

      public sealed partial class InProgressState : pb::IMessage<InProgressState> {
        private static readonly pb::MessageParser<InProgressState> _parser = new pb::MessageParser<InProgressState>(() => new InProgressState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InProgressState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InProgressState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InProgressState(InProgressState other) : this() {
          endTimeMs_ = other.endTimeMs_;
          mobs_ = other.mobs_.Clone();
          usedMapAbility_ = other.usedMapAbility_.Clone();
          totalMobCount_ = other.totalMobCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InProgressState Clone() {
          return new InProgressState(this);
        }

        /// <summary>Field number for the "end_time_ms" field.</summary>
        public const int EndTimeMsFieldNumber = 1;
        private long endTimeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndTimeMs {
          get { return endTimeMs_; }
          set {
            endTimeMs_ = value;
          }
        }

        /// <summary>Field number for the "mobs" field.</summary>
        public const int MobsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberMobState> _repeated_mobs_codec
            = pb::FieldCodec.ForMessage(18, global::WUProtos.Data.ChamberMobState.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberMobState> mobs_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberMobState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.ChamberMobState> Mobs {
          get { return mobs_; }
        }

        /// <summary>Field number for the "used_map_ability" field.</summary>
        public const int UsedMapAbilityFieldNumber = 3;
        private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberState.Types.UsedMapAbility> _repeated_usedMapAbility_codec
            = pb::FieldCodec.ForMessage(26, global::WUProtos.Data.ChamberState.Types.UsedMapAbility.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.UsedMapAbility> usedMapAbility_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.UsedMapAbility>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.ChamberState.Types.UsedMapAbility> UsedMapAbility {
          get { return usedMapAbility_; }
        }

        /// <summary>Field number for the "total_mob_count" field.</summary>
        public const int TotalMobCountFieldNumber = 4;
        private int totalMobCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TotalMobCount {
          get { return totalMobCount_; }
          set {
            totalMobCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as InProgressState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InProgressState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EndTimeMs != other.EndTimeMs) return false;
          if(!mobs_.Equals(other.mobs_)) return false;
          if(!usedMapAbility_.Equals(other.usedMapAbility_)) return false;
          if (TotalMobCount != other.TotalMobCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EndTimeMs != 0L) hash ^= EndTimeMs.GetHashCode();
          hash ^= mobs_.GetHashCode();
          hash ^= usedMapAbility_.GetHashCode();
          if (TotalMobCount != 0) hash ^= TotalMobCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EndTimeMs != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(EndTimeMs);
          }
          mobs_.WriteTo(output, _repeated_mobs_codec);
          usedMapAbility_.WriteTo(output, _repeated_usedMapAbility_codec);
          if (TotalMobCount != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(TotalMobCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EndTimeMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimeMs);
          }
          size += mobs_.CalculateSize(_repeated_mobs_codec);
          size += usedMapAbility_.CalculateSize(_repeated_usedMapAbility_codec);
          if (TotalMobCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalMobCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InProgressState other) {
          if (other == null) {
            return;
          }
          if (other.EndTimeMs != 0L) {
            EndTimeMs = other.EndTimeMs;
          }
          mobs_.Add(other.mobs_);
          usedMapAbility_.Add(other.usedMapAbility_);
          if (other.TotalMobCount != 0) {
            TotalMobCount = other.TotalMobCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                EndTimeMs = input.ReadInt64();
                break;
              }
              case 18: {
                mobs_.AddEntriesFrom(input, _repeated_mobs_codec);
                break;
              }
              case 26: {
                usedMapAbility_.AddEntriesFrom(input, _repeated_usedMapAbility_codec);
                break;
              }
              case 32: {
                TotalMobCount = input.ReadInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the InProgressState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class UsedMapAbility : pb::IMessage<UsedMapAbility> {
            private static readonly pb::MessageParser<UsedMapAbility> _parser = new pb::MessageParser<UsedMapAbility>(() => new UsedMapAbility());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<UsedMapAbility> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberState.Types.InProgressState.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UsedMapAbility() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UsedMapAbility(UsedMapAbility other) : this() {
              mapAbilityGmtId_ = other.mapAbilityGmtId_;
              casterId_ = other.casterId_;
              radius_ = other.radius_;
              castingTimestamp_ = other.castingTimestamp_;
              endingTimestamp_ = other.endingTimestamp_;
              mapCoordinate_ = other.mapCoordinate_ != null ? other.mapCoordinate_.Clone() : null;
              mapAbilityLevel_ = other.mapAbilityLevel_;
              targetMobId_ = other.targetMobId_;
              targetPlayerNickname_ = other.targetPlayerNickname_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UsedMapAbility Clone() {
              return new UsedMapAbility(this);
            }

            /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
            public const int MapAbilityGmtIdFieldNumber = 1;
            private string mapAbilityGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string MapAbilityGmtId {
              get { return mapAbilityGmtId_; }
              set {
                mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "caster_id" field.</summary>
            public const int CasterIdFieldNumber = 2;
            private string casterId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CasterId {
              get { return casterId_; }
              set {
                casterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "radius" field.</summary>
            public const int RadiusFieldNumber = 3;
            private float radius_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Radius {
              get { return radius_; }
              set {
                radius_ = value;
              }
            }

            /// <summary>Field number for the "casting_timestamp" field.</summary>
            public const int CastingTimestampFieldNumber = 4;
            private long castingTimestamp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CastingTimestamp {
              get { return castingTimestamp_; }
              set {
                castingTimestamp_ = value;
              }
            }

            /// <summary>Field number for the "ending_timestamp" field.</summary>
            public const int EndingTimestampFieldNumber = 5;
            private long endingTimestamp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long EndingTimestamp {
              get { return endingTimestamp_; }
              set {
                endingTimestamp_ = value;
              }
            }

            /// <summary>Field number for the "map_coordinate" field.</summary>
            public const int MapCoordinateFieldNumber = 6;
            private global::WUProtos.Data.MapCoordinate mapCoordinate_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::WUProtos.Data.MapCoordinate MapCoordinate {
              get { return mapCoordinate_; }
              set {
                mapCoordinate_ = value;
              }
            }

            /// <summary>Field number for the "map_ability_level" field.</summary>
            public const int MapAbilityLevelFieldNumber = 7;
            private int mapAbilityLevel_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int MapAbilityLevel {
              get { return mapAbilityLevel_; }
              set {
                mapAbilityLevel_ = value;
              }
            }

            /// <summary>Field number for the "target_mob_id" field.</summary>
            public const int TargetMobIdFieldNumber = 8;
            private pb::ByteString targetMobId_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString TargetMobId {
              get { return targetMobId_; }
              set {
                targetMobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "target_player_nickname" field.</summary>
            public const int TargetPlayerNicknameFieldNumber = 9;
            private string targetPlayerNickname_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string TargetPlayerNickname {
              get { return targetPlayerNickname_; }
              set {
                targetPlayerNickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as UsedMapAbility);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(UsedMapAbility other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
              if (CasterId != other.CasterId) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
              if (CastingTimestamp != other.CastingTimestamp) return false;
              if (EndingTimestamp != other.EndingTimestamp) return false;
              if (!object.Equals(MapCoordinate, other.MapCoordinate)) return false;
              if (MapAbilityLevel != other.MapAbilityLevel) return false;
              if (TargetMobId != other.TargetMobId) return false;
              if (TargetPlayerNickname != other.TargetPlayerNickname) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
              if (CasterId.Length != 0) hash ^= CasterId.GetHashCode();
              if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
              if (CastingTimestamp != 0L) hash ^= CastingTimestamp.GetHashCode();
              if (EndingTimestamp != 0L) hash ^= EndingTimestamp.GetHashCode();
              if (mapCoordinate_ != null) hash ^= MapCoordinate.GetHashCode();
              if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
              if (TargetMobId.Length != 0) hash ^= TargetMobId.GetHashCode();
              if (TargetPlayerNickname.Length != 0) hash ^= TargetPlayerNickname.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MapAbilityGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(MapAbilityGmtId);
              }
              if (CasterId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(CasterId);
              }
              if (Radius != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(Radius);
              }
              if (CastingTimestamp != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(CastingTimestamp);
              }
              if (EndingTimestamp != 0L) {
                output.WriteRawTag(40);
                output.WriteInt64(EndingTimestamp);
              }
              if (mapCoordinate_ != null) {
                output.WriteRawTag(50);
                output.WriteMessage(MapCoordinate);
              }
              if (MapAbilityLevel != 0) {
                output.WriteRawTag(56);
                output.WriteInt32(MapAbilityLevel);
              }
              if (TargetMobId.Length != 0) {
                output.WriteRawTag(66);
                output.WriteBytes(TargetMobId);
              }
              if (TargetPlayerNickname.Length != 0) {
                output.WriteRawTag(74);
                output.WriteString(TargetPlayerNickname);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MapAbilityGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
              }
              if (CasterId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CasterId);
              }
              if (Radius != 0F) {
                size += 1 + 4;
              }
              if (CastingTimestamp != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CastingTimestamp);
              }
              if (EndingTimestamp != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndingTimestamp);
              }
              if (mapCoordinate_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapCoordinate);
              }
              if (MapAbilityLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapAbilityLevel);
              }
              if (TargetMobId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetMobId);
              }
              if (TargetPlayerNickname.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetPlayerNickname);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(UsedMapAbility other) {
              if (other == null) {
                return;
              }
              if (other.MapAbilityGmtId.Length != 0) {
                MapAbilityGmtId = other.MapAbilityGmtId;
              }
              if (other.CasterId.Length != 0) {
                CasterId = other.CasterId;
              }
              if (other.Radius != 0F) {
                Radius = other.Radius;
              }
              if (other.CastingTimestamp != 0L) {
                CastingTimestamp = other.CastingTimestamp;
              }
              if (other.EndingTimestamp != 0L) {
                EndingTimestamp = other.EndingTimestamp;
              }
              if (other.mapCoordinate_ != null) {
                if (mapCoordinate_ == null) {
                  MapCoordinate = new global::WUProtos.Data.MapCoordinate();
                }
                MapCoordinate.MergeFrom(other.MapCoordinate);
              }
              if (other.MapAbilityLevel != 0) {
                MapAbilityLevel = other.MapAbilityLevel;
              }
              if (other.TargetMobId.Length != 0) {
                TargetMobId = other.TargetMobId;
              }
              if (other.TargetPlayerNickname.Length != 0) {
                TargetPlayerNickname = other.TargetPlayerNickname;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    MapAbilityGmtId = input.ReadString();
                    break;
                  }
                  case 18: {
                    CasterId = input.ReadString();
                    break;
                  }
                  case 29: {
                    Radius = input.ReadFloat();
                    break;
                  }
                  case 32: {
                    CastingTimestamp = input.ReadInt64();
                    break;
                  }
                  case 40: {
                    EndingTimestamp = input.ReadInt64();
                    break;
                  }
                  case 50: {
                    if (mapCoordinate_ == null) {
                      MapCoordinate = new global::WUProtos.Data.MapCoordinate();
                    }
                    input.ReadMessage(MapCoordinate);
                    break;
                  }
                  case 56: {
                    MapAbilityLevel = input.ReadInt32();
                    break;
                  }
                  case 66: {
                    TargetMobId = input.ReadBytes();
                    break;
                  }
                  case 74: {
                    TargetPlayerNickname = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class UsedMapAbility : pb::IMessage<UsedMapAbility> {
        private static readonly pb::MessageParser<UsedMapAbility> _parser = new pb::MessageParser<UsedMapAbility>(() => new UsedMapAbility());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UsedMapAbility> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsedMapAbility() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsedMapAbility(UsedMapAbility other) : this() {
          mapAbilityGmtId_ = other.mapAbilityGmtId_;
          casterId_ = other.casterId_;
          radius_ = other.radius_;
          castingTimestamp_ = other.castingTimestamp_;
          endingTimestamp_ = other.endingTimestamp_;
          mapCoordinate_ = other.mapCoordinate_ != null ? other.mapCoordinate_.Clone() : null;
          mapAbilityLevel_ = other.mapAbilityLevel_;
          targetMobId_ = other.targetMobId_;
          targetPlayerNickname_ = other.targetPlayerNickname_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UsedMapAbility Clone() {
          return new UsedMapAbility(this);
        }

        /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
        public const int MapAbilityGmtIdFieldNumber = 1;
        private string mapAbilityGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapAbilityGmtId {
          get { return mapAbilityGmtId_; }
          set {
            mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "caster_id" field.</summary>
        public const int CasterIdFieldNumber = 2;
        private string casterId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CasterId {
          get { return casterId_; }
          set {
            casterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 3;
        private float radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "casting_timestamp" field.</summary>
        public const int CastingTimestampFieldNumber = 4;
        private long castingTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CastingTimestamp {
          get { return castingTimestamp_; }
          set {
            castingTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "ending_timestamp" field.</summary>
        public const int EndingTimestampFieldNumber = 5;
        private long endingTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndingTimestamp {
          get { return endingTimestamp_; }
          set {
            endingTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "map_coordinate" field.</summary>
        public const int MapCoordinateFieldNumber = 6;
        private global::WUProtos.Data.MapCoordinate mapCoordinate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.MapCoordinate MapCoordinate {
          get { return mapCoordinate_; }
          set {
            mapCoordinate_ = value;
          }
        }

        /// <summary>Field number for the "map_ability_level" field.</summary>
        public const int MapAbilityLevelFieldNumber = 7;
        private int mapAbilityLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapAbilityLevel {
          get { return mapAbilityLevel_; }
          set {
            mapAbilityLevel_ = value;
          }
        }

        /// <summary>Field number for the "target_mob_id" field.</summary>
        public const int TargetMobIdFieldNumber = 8;
        private pb::ByteString targetMobId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString TargetMobId {
          get { return targetMobId_; }
          set {
            targetMobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "target_player_nickname" field.</summary>
        public const int TargetPlayerNicknameFieldNumber = 9;
        private string targetPlayerNickname_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TargetPlayerNickname {
          get { return targetPlayerNickname_; }
          set {
            targetPlayerNickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UsedMapAbility);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UsedMapAbility other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
          if (CasterId != other.CasterId) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
          if (CastingTimestamp != other.CastingTimestamp) return false;
          if (EndingTimestamp != other.EndingTimestamp) return false;
          if (!object.Equals(MapCoordinate, other.MapCoordinate)) return false;
          if (MapAbilityLevel != other.MapAbilityLevel) return false;
          if (TargetMobId != other.TargetMobId) return false;
          if (TargetPlayerNickname != other.TargetPlayerNickname) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
          if (CasterId.Length != 0) hash ^= CasterId.GetHashCode();
          if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
          if (CastingTimestamp != 0L) hash ^= CastingTimestamp.GetHashCode();
          if (EndingTimestamp != 0L) hash ^= EndingTimestamp.GetHashCode();
          if (mapCoordinate_ != null) hash ^= MapCoordinate.GetHashCode();
          if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
          if (TargetMobId.Length != 0) hash ^= TargetMobId.GetHashCode();
          if (TargetPlayerNickname.Length != 0) hash ^= TargetPlayerNickname.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MapAbilityGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MapAbilityGmtId);
          }
          if (CasterId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CasterId);
          }
          if (Radius != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Radius);
          }
          if (CastingTimestamp != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(CastingTimestamp);
          }
          if (EndingTimestamp != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(EndingTimestamp);
          }
          if (mapCoordinate_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(MapCoordinate);
          }
          if (MapAbilityLevel != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(MapAbilityLevel);
          }
          if (TargetMobId.Length != 0) {
            output.WriteRawTag(66);
            output.WriteBytes(TargetMobId);
          }
          if (TargetPlayerNickname.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(TargetPlayerNickname);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MapAbilityGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
          }
          if (CasterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CasterId);
          }
          if (Radius != 0F) {
            size += 1 + 4;
          }
          if (CastingTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CastingTimestamp);
          }
          if (EndingTimestamp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndingTimestamp);
          }
          if (mapCoordinate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapCoordinate);
          }
          if (MapAbilityLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapAbilityLevel);
          }
          if (TargetMobId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetMobId);
          }
          if (TargetPlayerNickname.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetPlayerNickname);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UsedMapAbility other) {
          if (other == null) {
            return;
          }
          if (other.MapAbilityGmtId.Length != 0) {
            MapAbilityGmtId = other.MapAbilityGmtId;
          }
          if (other.CasterId.Length != 0) {
            CasterId = other.CasterId;
          }
          if (other.Radius != 0F) {
            Radius = other.Radius;
          }
          if (other.CastingTimestamp != 0L) {
            CastingTimestamp = other.CastingTimestamp;
          }
          if (other.EndingTimestamp != 0L) {
            EndingTimestamp = other.EndingTimestamp;
          }
          if (other.mapCoordinate_ != null) {
            if (mapCoordinate_ == null) {
              MapCoordinate = new global::WUProtos.Data.MapCoordinate();
            }
            MapCoordinate.MergeFrom(other.MapCoordinate);
          }
          if (other.MapAbilityLevel != 0) {
            MapAbilityLevel = other.MapAbilityLevel;
          }
          if (other.TargetMobId.Length != 0) {
            TargetMobId = other.TargetMobId;
          }
          if (other.TargetPlayerNickname.Length != 0) {
            TargetPlayerNickname = other.TargetPlayerNickname;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MapAbilityGmtId = input.ReadString();
                break;
              }
              case 18: {
                CasterId = input.ReadString();
                break;
              }
              case 29: {
                Radius = input.ReadFloat();
                break;
              }
              case 32: {
                CastingTimestamp = input.ReadInt64();
                break;
              }
              case 40: {
                EndingTimestamp = input.ReadInt64();
                break;
              }
              case 50: {
                if (mapCoordinate_ == null) {
                  MapCoordinate = new global::WUProtos.Data.MapCoordinate();
                }
                input.ReadMessage(MapCoordinate);
                break;
              }
              case 56: {
                MapAbilityLevel = input.ReadInt32();
                break;
              }
              case 66: {
                TargetMobId = input.ReadBytes();
                break;
              }
              case 74: {
                TargetPlayerNickname = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WaitingToStartState : pb::IMessage<WaitingToStartState> {
        private static readonly pb::MessageParser<WaitingToStartState> _parser = new pb::MessageParser<WaitingToStartState>(() => new WaitingToStartState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WaitingToStartState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberState.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingToStartState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingToStartState(WaitingToStartState other) : this() {
          startTimeMs_ = other.startTimeMs_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingToStartState Clone() {
          return new WaitingToStartState(this);
        }

        /// <summary>Field number for the "start_time_ms" field.</summary>
        public const int StartTimeMsFieldNumber = 1;
        private long startTimeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StartTimeMs {
          get { return startTimeMs_; }
          set {
            startTimeMs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WaitingToStartState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WaitingToStartState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StartTimeMs != other.StartTimeMs) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (StartTimeMs != 0L) hash ^= StartTimeMs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (StartTimeMs != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(StartTimeMs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (StartTimeMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimeMs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WaitingToStartState other) {
          if (other == null) {
            return;
          }
          if (other.StartTimeMs != 0L) {
            StartTimeMs = other.StartTimeMs;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                StartTimeMs = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
