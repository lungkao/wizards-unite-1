// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientGameConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientGameConfig.proto</summary>
  public static partial class ClientGameConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientGameConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientGameConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRHYW1lQ29uZmlnLnByb3Rv",
            "EhRXVVByb3Rvcy5EYXRhLkNsaWVudBoyV1VQcm90b3MvRGF0YS9DbGllbnQv",
            "Q2xpZW50Rmxvb05ldHdvcmtDb25maWcucHJvdG8aLFdVUHJvdG9zL0RhdGEv",
            "Q2xpZW50L0NsaWVudEJvbnVzQ29uZmlnLnByb3RvGjBXVVByb3Rvcy9EYXRh",
            "L0NsaWVudC9DbGllbnRGdHVlVmlkZW9Db25maWcucHJvdG8aQVdVUHJvdG9z",
            "L0RhdGEvQ29sbGVjdGlvbi9Db2xsZWN0aW9uU3ViZmVhdHVyZVByZXN0aWdl",
            "TGV2ZWxzLnByb3RvGj9XVVByb3Rvcy9EYXRhL0NvbGxlY3Rpb24vQ29sbGVj",
            "dGlvblN1YmZlYXR1cmVGYW1pbHlPcmRlcnMucHJvdG8aGVdVUHJvdG9zL0Rh",
            "dGEvQ29sb3IucHJvdG8aL1dVUHJvdG9zL0RhdGEvUGVybWlzc2lvbnNDb25m",
            "aWdTdGF0aWNMaXN0LnByb3RvGh9XVVByb3Rvcy9EYXRhL0F1ZGlvQ29uZmln",
            "LnByb3RvGidXVVByb3Rvcy9EYXRhL0JhdHRlcnlTYXZlclByb2ZpbGUucHJv",
            "dG8aMVdVUHJvdG9zL0RhdGEvRW5jb3VudGVyL0VuY291bnRlclNvdW5kQmFu",
            "a3MucHJvdG8aH1dVUHJvdG9zL0RhdGEvU291bmRDb25maWcucHJvdG8aIldV",
            "UHJvdG9zL0RhdGEvQXVkaW9QYXJhbWV0ZXIucHJvdG8iph4KEENsaWVudEdh",
            "bWVDb25maWcSCgoCaWQYASABKAkSMAoSdGFyZ2V0X2dseXBoX2NvbG9yGAIg",
            "ASgLMhQuV1VQcm90b3MuRGF0YS5Db2xvchIxChNyZXRpY2xlX2dseXBoX2Nv",
            "bG9yGAMgASgLMhQuV1VQcm90b3MuRGF0YS5Db2xvchIxChNhbGlnbmVkX2ds",
            "eXBoX2NvbG9yGAQgASgLMhQuV1VQcm90b3MuRGF0YS5Db2xvchIgChhlbmNv",
            "dW50ZXJfYW5nbGVfb2Zfc3Bhd24YBSABKAISIwobdGltZV9iZWZvcmVfYXJf",
            "aGludF9kaXNwbGF5GAYgASgCEiUKHW1heF9sb2NrX2Rpc3RhbmNlX2Zyb21f",
            "b3JpZ2luGAcgASgCEi4KJmRpc3RhbmNlX2JlaGluZF9jYW1lcmFfdG9fc3Bh",
            "d25fbWFya2VyGAggASgCEicKH3RpbWVfYmVmb3JlX3N3aXRjaF90b19hcl9z",
            "aW1wbGUYCSABKAISHQoVdHV0b3JpYWxfZW5jb3VudGVyX2lkGAogASgJEh4K",
            "FmVuY291bnRlcl9yZXNldF9nZm9yY2UYCyABKAISKQohbG9jYWxfbWFwX3Vw",
            "ZGF0ZV9pbnRlcnZhbF9zZWNvbmRzGAwgASgCEkoKE2Zsb29fbmV0d29ya19j",
            "b25maWcYDSABKAsyLS5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRGbG9v",
            "TmV0d29ya0NvbmZpZxInCh9mbG9vX2NvbnRyaWJ1dGlvbl9idXR0b25fdmFs",
            "dWVzGA4gAygDEhoKEmFwcF9iYWNrZ3JvdW5kX21hcBgPIAEoBRIbChNhcHBf",
            "YmFja2dyb3VuZF9mdWxsGBAgASgFEhwKFHRyaWdnZXJhYmxlX2Nvb2xkb3du",
            "GBEgASgCEiEKGWxldmVsX3VwX3RyaWdnZXJfcHJpb3JpdHkYEiABKAUSIAoY",
            "d2Fsa2JveF90cmlnZ2VyX3ByaW9yaXR5GBMgASgFEkYKEnBlcm1pc3Npb25z",
            "X2NvbmZpZxgUIAEoCzIqLldVUHJvdG9zLkRhdGEuUGVybWlzc2lvbnNDb25m",
            "aWdTdGF0aWNMaXN0EiUKHXN3aXNoX2dhbWVfc2NvcmluZ190aHJlc2hvbGRz",
            "GBYgAygCEiIKGnN3aXNoX2dhbWVfc2NvcmluZ19ib251c2VzGBcgAygCEjAK",
            "DGF1ZGlvX2NvbmZpZxgYIAEoCzIaLldVUHJvdG9zLkRhdGEuQXVkaW9Db25m",
            "aWcSGwoTYXVkaW9faW5pdGlhbF9iYW5rcxgZIAMoCRJgChpzdWJmZWF0dXJl",
            "X3ByZXN0aWdlX2xldmVscxgaIAMoCzI8LldVUHJvdG9zLkRhdGEuQ29sbGVj",
            "dGlvbi5Db2xsZWN0aW9uU3ViZmVhdHVyZVByZXN0aWdlTGV2ZWxzEj0KDGJv",
            "bnVzX2NvbmZpZxgbIAEoCzInLldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVu",
            "dEJvbnVzQ29uZmlnEjAKKHBvcnRrZXlfd3JhY2tzcHVydF9jb2xsZWN0aW9u",
            "X2hhcHRpY19rZXkYHCABKAkSKQohcG90aW9uX21hc3Rlcm5vdGVfdW5sb2Nr",
            "X3RyZXNob2xkGB4gASgFElwKGHN1YmZlYXR1cmVfZmFtaWx5X29yZGVycxgf",
            "IAMoCzI6LldVUHJvdG9zLkRhdGEuQ29sbGVjdGlvbi5Db2xsZWN0aW9uU3Vi",
            "ZmVhdHVyZUZhbWlseU9yZGVycxJCChZiYXR0ZXJ5X3NhdmVyX3Byb2ZpbGVz",
            "GCAgAygLMiIuV1VQcm90b3MuRGF0YS5CYXR0ZXJ5U2F2ZXJQcm9maWxlEiEK",
            "GXJhdGVfYXBwX21pbl9wbGF5ZXJfbGV2ZWwYISABKAUSHgoWcmF0ZV9hcHBf",
            "Y29vbGRvd25fZGF5cxgiIAEoBRIZChF0b29fZmFzdF9jb29sZG93bhgjIAEo",
            "BRJFCg9lbmNvdW50ZXJfYmFua3MYJCADKAsyLC5XVVByb3Rvcy5EYXRhLkVu",
            "Y291bnRlci5FbmNvdW50ZXJTb3VuZEJhbmtzEisKI2RhaWx5X3Jld2FyZF9w",
            "b3B1cF90cmlnZ2VyX3ByaW9yaXR5GCUgASgFEiEKGXJhdGVfYXBwX3RyaWdn",
            "ZXJfcHJpb3JpdHkYJiABKAUSPwoKZnR1ZV92aWRlbxgrIAEoCzIrLldVUHJv",
            "dG9zLkRhdGEuQ2xpZW50LkNsaWVudEZ0dWVWaWRlb0NvbmZpZxIcChR0dXRv",
            "cmlhbF9wb3Rpb25fYnJldxgsIAEoCRIkChxnZW5lcmljX3RyYWNlX3NwZWxs",
            "X2ZhaWxfc2Z4GC0gASgJEh8KF3RyYWNpbmdfc3BlbGxfZ2x5cGhfc2Z4GC4g",
            "ASgJEhwKFHRyYWNpbmdfY29tcGxldGVfc2Z4GC8gASgJEiAKGHNwZWxsX2Jh",
            "cl9pbmNyZWFzaW5nX3NmeBgwIAEoCRIaChJiYWRfc3BlbGxfY2FzdF9zZngY",
            "MSABKAkSGwoTZ29vZF9zcGVsbF9jYXN0X3NmeBgyIAEoCRIcChRncmVhdF9z",
            "cGVsbF9jYXN0X3NmeBgzIAEoCRIeChZwZXJmZWN0X3NwZWxsX2Nhc3Rfc2Z4",
            "GDQgASgJEioKInJlZ2lzdHJ5X3N0aWNrZXJfcGxhY2VkX2hhcHRpY19rZXkY",
            "NSABKAkSIAoYcmV3YXJkc192ZXNzZWxfYnlfcmFyaXR5GDYgAygJEhsKE3Jl",
            "d2FyZHNfc291bmRfYmFua3MYNyADKAkSIwobZmlyc3Rfc3RpY2tlcl9zdG9y",
            "eWJvYXJkX2lkGDggASgJEiMKG2ZpcnN0X3N0aWNrZXJfY29sbGVjdGlvbl9p",
            "ZBg5IAEoCRIyChRhdmF0YXJfZGVmYXVsdF9jb2xvchg6IAEoCzIULldVUHJv",
            "dG9zLkRhdGEuQ29sb3ISOgoWbG9ja19vbl9jb21wbGV0aW9uX3NmeBg7IAEo",
            "CzIaLldVUHJvdG9zLkRhdGEuU291bmRDb25maWcSNwoTbG9ja19vbl90aW1l",
            "X3VwX3NmeBg8IAEoCzIaLldVUHJvdG9zLkRhdGEuU291bmRDb25maWcSNAoQ",
            "cHJvdGVnb19jYXN0X3NmeBg9IAEoCzIaLldVUHJvdG9zLkRhdGEuU291bmRD",
            "b25maWcSNwoTcHJvdGVnb190aW1lX3VwX3NmeBg+IAEoCzIaLldVUHJvdG9z",
            "LkRhdGEuU291bmRDb25maWcSIQoZbXNfYmVmb3JlX2ZpbmFsX2ludGVuc2l0",
            "eRg/IAEoBRIlCh1tc19iZWZvcmVfc2Vjb25kYXJ5X2ludGVuc2l0eRhAIAEo",
            "BRJMCiVjaGFsbGVuZ2VfdGhpcnR5X3NlY29uZHNfbGVmdF9zdGluZ2VyGEEg",
            "AygLMh0uV1VQcm90b3MuRGF0YS5BdWRpb1BhcmFtZXRlchJUCi1jaGFsbGVu",
            "Z2VfZW5jb3VudGVyX3BsYXllcl92aWN0b3Jpb3VzX3N0aW5nZXIYQiADKAsy",
            "HS5XVVByb3Rvcy5EYXRhLkF1ZGlvUGFyYW1ldGVyElIKK2NoYWxsZW5nZV9l",
            "bmNvdW50ZXJfcGxheWVyX2RlZmVhdGVkX3N0aW5nZXIYQyADKAsyHS5XVVBy",
            "b3Rvcy5EYXRhLkF1ZGlvUGFyYW1ldGVyEj4KF2NoYWxsZW5nZV9iZWdpbl9z",
            "dGluZ2VyGEQgAygLMh0uV1VQcm90b3MuRGF0YS5BdWRpb1BhcmFtZXRlchI/",
            "ChhjaGFsbGVuZ2VfZmluaXNoX3ZpY3RvcnkYRSADKAsyHS5XVVByb3Rvcy5E",
            "YXRhLkF1ZGlvUGFyYW1ldGVyEj4KF2NoYWxsZW5nZV9maW5pc2hfZGVmZWF0",
            "GEYgAygLMh0uV1VQcm90b3MuRGF0YS5BdWRpb1BhcmFtZXRlchJJCiJjaGFs",
            "bGVuZ2VfZWxpdGVfbW9iX3NwYXduc19zdGluZ2VyGEcgAygLMh0uV1VQcm90",
            "b3MuRGF0YS5BdWRpb1BhcmFtZXRlchInCh9pbnRlcm5ldF9yZWFjaGFiaWxp",
            "dHlfY2hlY2tfdXJsGEggASgJEhwKFHJhdGVfYXBwX21heF9wcm9tcHRzGEkg",
            "ASgFEhgKEHJhdGVfYXBwX3ZlcnNpb24YSiABKAUSLAokcmF0ZV9hcHBfdHJp",
            "Z2dlcl93aXphcmRpbmdfY2hhbGxlbmdlGEsgASgFEi4KJnJhdGVfYXBwX3Ry",
            "aWdnZXJfc3RpY2tlcl9wYWdlX2NvbXBsZXRlGEwgASgFEjIKKnJhdGVfYXBw",
            "X3RyaWdnZXJfZXZlbnRfcXVlc3RfbGluZV9jb21wbGV0ZRhNIAEoBRIfChdj",
            "aGVja3NfdW50aWxfZ3BzX3Byb21wdBhOIAEoBRIcChRmb3J0cmVzc19zb3Vu",
            "ZF9iYW5rcxhPIAMoCRJFCiF0ZW5fc2Vjb25kc19sZWZ0X2luX2NoYWxsZW5n",
            "ZV9zZngYUCABKAsyGi5XVVByb3Rvcy5EYXRhLlNvdW5kQ29uZmlnEkUKIWxv",
            "bmdfc2Vjb25kX2xlZnRfaW5fY2hhbGxlbmdlX3NmeBhRIAEoCzIaLldVUHJv",
            "dG9zLkRhdGEuU291bmRDb25maWcSSwonc2hvcnRfaGFsZl9zZWNvbmRfbGVm",
            "dF9pbl9jaGFsbGVuZ2Vfc2Z4GFIgASgLMhouV1VQcm90b3MuRGF0YS5Tb3Vu",
            "ZENvbmZpZxI6ChZvbmVfbWludXRlX3dhcm5pbmdfc2Z4GFMgASgLMhouV1VQ",
            "cm90b3MuRGF0YS5Tb3VuZENvbmZpZxIiChpyYXRlX2FwcF90cmlnZ2VyX21h",
            "cF9lbnRlchhUIAEoCBIrCiNwcm9mZXNzaW9uc19hZmZpbml0eV9hZHZhbnRh",
            "Z2VfaWNvbhhVIAEoCRIpCiFwcm9mZXNzaW9uc19hZmZpbml0eV9uZXV0cmFs",
            "X2ljb24YViABKAkSLgomcHJvZmVzc2lvbnNfYWZmaW5pdHlfZGlzYWR2YW50",
            "YWdlX2ljb24YVyABKAkSJAocaW50ZXJuZXRfb3V0YWdlX2JhY2tvZmZfdGlt",
            "ZRhYIAEoBRIiChphcl9jb3JlX3N0b3J5Ym9hcmRfdHJpZ2dlchhZIAEoCWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Client.ClientFlooNetworkConfigReflection.Descriptor, global::WUProtos.Data.Client.ClientBonusConfigReflection.Descriptor, global::WUProtos.Data.Client.ClientFtueVideoConfigReflection.Descriptor, global::WUProtos.Data.Collection.CollectionSubfeaturePrestigeLevelsReflection.Descriptor, global::WUProtos.Data.Collection.CollectionSubfeatureFamilyOrdersReflection.Descriptor, global::WUProtos.Data.ColorReflection.Descriptor, global::WUProtos.Data.PermissionsConfigStaticListReflection.Descriptor, global::WUProtos.Data.AudioConfigReflection.Descriptor, global::WUProtos.Data.BatterySaverProfileReflection.Descriptor, global::WUProtos.Data.Encounter.EncounterSoundBanksReflection.Descriptor, global::WUProtos.Data.SoundConfigReflection.Descriptor, global::WUProtos.Data.AudioParameterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientGameConfig), global::WUProtos.Data.Client.ClientGameConfig.Parser, new[]{ "Id", "TargetGlyphColor", "ReticleGlyphColor", "AlignedGlyphColor", "EncounterAngleOfSpawn", "TimeBeforeArHintDisplay", "MaxLockDistanceFromOrigin", "DistanceBehindCameraToSpawnMarker", "TimeBeforeSwitchToArSimple", "TutorialEncounterId", "EncounterResetGforce", "LocalMapUpdateIntervalSeconds", "FlooNetworkConfig", "FlooContributionButtonValues", "AppBackgroundMap", "AppBackgroundFull", "TriggerableCooldown", "LevelUpTriggerPriority", "WalkboxTriggerPriority", "PermissionsConfig", "SwishGameScoringThresholds", "SwishGameScoringBonuses", "AudioConfig", "AudioInitialBanks", "SubfeaturePrestigeLevels", "BonusConfig", "PortkeyWrackspurtCollectionHapticKey", "PotionMasternoteUnlockTreshold", "SubfeatureFamilyOrders", "BatterySaverProfiles", "RateAppMinPlayerLevel", "RateAppCooldownDays", "TooFastCooldown", "EncounterBanks", "DailyRewardPopupTriggerPriority", "RateAppTriggerPriority", "FtueVideo", "TutorialPotionBrew", "GenericTraceSpellFailSfx", "TracingSpellGlyphSfx", "TracingCompleteSfx", "SpellBarIncreasingSfx", "BadSpellCastSfx", "GoodSpellCastSfx", "GreatSpellCastSfx", "PerfectSpellCastSfx", "RegistryStickerPlacedHapticKey", "RewardsVesselByRarity", "RewardsSoundBanks", "FirstStickerStoryboardId", "FirstStickerCollectionId", "AvatarDefaultColor", "LockOnCompletionSfx", "LockOnTimeUpSfx", "ProtegoCastSfx", "ProtegoTimeUpSfx", "MsBeforeFinalIntensity", "MsBeforeSecondaryIntensity", "ChallengeThirtySecondsLeftStinger", "ChallengeEncounterPlayerVictoriousStinger", "ChallengeEncounterPlayerDefeatedStinger", "ChallengeBeginStinger", "ChallengeFinishVictory", "ChallengeFinishDefeat", "ChallengeEliteMobSpawnsStinger", "InternetReachabilityCheckUrl", "RateAppMaxPrompts", "RateAppVersion", "RateAppTriggerWizardingChallenge", "RateAppTriggerStickerPageComplete", "RateAppTriggerEventQuestLineComplete", "ChecksUntilGpsPrompt", "FortressSoundBanks", "TenSecondsLeftInChallengeSfx", "LongSecondLeftInChallengeSfx", "ShortHalfSecondLeftInChallengeSfx", "OneMinuteWarningSfx", "RateAppTriggerMapEnter", "ProfessionsAffinityAdvantageIcon", "ProfessionsAffinityNeutralIcon", "ProfessionsAffinityDisadvantageIcon", "InternetOutageBackoffTime", "ArCoreStoryboardTrigger" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientGameConfig : pb::IMessage<ClientGameConfig> {
    private static readonly pb::MessageParser<ClientGameConfig> _parser = new pb::MessageParser<ClientGameConfig>(() => new ClientGameConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientGameConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientGameConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGameConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGameConfig(ClientGameConfig other) : this() {
      id_ = other.id_;
      targetGlyphColor_ = other.targetGlyphColor_ != null ? other.targetGlyphColor_.Clone() : null;
      reticleGlyphColor_ = other.reticleGlyphColor_ != null ? other.reticleGlyphColor_.Clone() : null;
      alignedGlyphColor_ = other.alignedGlyphColor_ != null ? other.alignedGlyphColor_.Clone() : null;
      encounterAngleOfSpawn_ = other.encounterAngleOfSpawn_;
      timeBeforeArHintDisplay_ = other.timeBeforeArHintDisplay_;
      maxLockDistanceFromOrigin_ = other.maxLockDistanceFromOrigin_;
      distanceBehindCameraToSpawnMarker_ = other.distanceBehindCameraToSpawnMarker_;
      timeBeforeSwitchToArSimple_ = other.timeBeforeSwitchToArSimple_;
      tutorialEncounterId_ = other.tutorialEncounterId_;
      encounterResetGforce_ = other.encounterResetGforce_;
      localMapUpdateIntervalSeconds_ = other.localMapUpdateIntervalSeconds_;
      flooNetworkConfig_ = other.flooNetworkConfig_ != null ? other.flooNetworkConfig_.Clone() : null;
      flooContributionButtonValues_ = other.flooContributionButtonValues_.Clone();
      appBackgroundMap_ = other.appBackgroundMap_;
      appBackgroundFull_ = other.appBackgroundFull_;
      triggerableCooldown_ = other.triggerableCooldown_;
      levelUpTriggerPriority_ = other.levelUpTriggerPriority_;
      walkboxTriggerPriority_ = other.walkboxTriggerPriority_;
      permissionsConfig_ = other.permissionsConfig_ != null ? other.permissionsConfig_.Clone() : null;
      swishGameScoringThresholds_ = other.swishGameScoringThresholds_.Clone();
      swishGameScoringBonuses_ = other.swishGameScoringBonuses_.Clone();
      audioConfig_ = other.audioConfig_ != null ? other.audioConfig_.Clone() : null;
      audioInitialBanks_ = other.audioInitialBanks_.Clone();
      subfeaturePrestigeLevels_ = other.subfeaturePrestigeLevels_.Clone();
      bonusConfig_ = other.bonusConfig_ != null ? other.bonusConfig_.Clone() : null;
      portkeyWrackspurtCollectionHapticKey_ = other.portkeyWrackspurtCollectionHapticKey_;
      potionMasternoteUnlockTreshold_ = other.potionMasternoteUnlockTreshold_;
      subfeatureFamilyOrders_ = other.subfeatureFamilyOrders_.Clone();
      batterySaverProfiles_ = other.batterySaverProfiles_.Clone();
      rateAppMinPlayerLevel_ = other.rateAppMinPlayerLevel_;
      rateAppCooldownDays_ = other.rateAppCooldownDays_;
      tooFastCooldown_ = other.tooFastCooldown_;
      encounterBanks_ = other.encounterBanks_.Clone();
      dailyRewardPopupTriggerPriority_ = other.dailyRewardPopupTriggerPriority_;
      rateAppTriggerPriority_ = other.rateAppTriggerPriority_;
      ftueVideo_ = other.ftueVideo_ != null ? other.ftueVideo_.Clone() : null;
      tutorialPotionBrew_ = other.tutorialPotionBrew_;
      genericTraceSpellFailSfx_ = other.genericTraceSpellFailSfx_;
      tracingSpellGlyphSfx_ = other.tracingSpellGlyphSfx_;
      tracingCompleteSfx_ = other.tracingCompleteSfx_;
      spellBarIncreasingSfx_ = other.spellBarIncreasingSfx_;
      badSpellCastSfx_ = other.badSpellCastSfx_;
      goodSpellCastSfx_ = other.goodSpellCastSfx_;
      greatSpellCastSfx_ = other.greatSpellCastSfx_;
      perfectSpellCastSfx_ = other.perfectSpellCastSfx_;
      registryStickerPlacedHapticKey_ = other.registryStickerPlacedHapticKey_;
      rewardsVesselByRarity_ = other.rewardsVesselByRarity_.Clone();
      rewardsSoundBanks_ = other.rewardsSoundBanks_.Clone();
      firstStickerStoryboardId_ = other.firstStickerStoryboardId_;
      firstStickerCollectionId_ = other.firstStickerCollectionId_;
      avatarDefaultColor_ = other.avatarDefaultColor_ != null ? other.avatarDefaultColor_.Clone() : null;
      lockOnCompletionSfx_ = other.lockOnCompletionSfx_ != null ? other.lockOnCompletionSfx_.Clone() : null;
      lockOnTimeUpSfx_ = other.lockOnTimeUpSfx_ != null ? other.lockOnTimeUpSfx_.Clone() : null;
      protegoCastSfx_ = other.protegoCastSfx_ != null ? other.protegoCastSfx_.Clone() : null;
      protegoTimeUpSfx_ = other.protegoTimeUpSfx_ != null ? other.protegoTimeUpSfx_.Clone() : null;
      msBeforeFinalIntensity_ = other.msBeforeFinalIntensity_;
      msBeforeSecondaryIntensity_ = other.msBeforeSecondaryIntensity_;
      challengeThirtySecondsLeftStinger_ = other.challengeThirtySecondsLeftStinger_.Clone();
      challengeEncounterPlayerVictoriousStinger_ = other.challengeEncounterPlayerVictoriousStinger_.Clone();
      challengeEncounterPlayerDefeatedStinger_ = other.challengeEncounterPlayerDefeatedStinger_.Clone();
      challengeBeginStinger_ = other.challengeBeginStinger_.Clone();
      challengeFinishVictory_ = other.challengeFinishVictory_.Clone();
      challengeFinishDefeat_ = other.challengeFinishDefeat_.Clone();
      challengeEliteMobSpawnsStinger_ = other.challengeEliteMobSpawnsStinger_.Clone();
      internetReachabilityCheckUrl_ = other.internetReachabilityCheckUrl_;
      rateAppMaxPrompts_ = other.rateAppMaxPrompts_;
      rateAppVersion_ = other.rateAppVersion_;
      rateAppTriggerWizardingChallenge_ = other.rateAppTriggerWizardingChallenge_;
      rateAppTriggerStickerPageComplete_ = other.rateAppTriggerStickerPageComplete_;
      rateAppTriggerEventQuestLineComplete_ = other.rateAppTriggerEventQuestLineComplete_;
      checksUntilGpsPrompt_ = other.checksUntilGpsPrompt_;
      fortressSoundBanks_ = other.fortressSoundBanks_.Clone();
      tenSecondsLeftInChallengeSfx_ = other.tenSecondsLeftInChallengeSfx_ != null ? other.tenSecondsLeftInChallengeSfx_.Clone() : null;
      longSecondLeftInChallengeSfx_ = other.longSecondLeftInChallengeSfx_ != null ? other.longSecondLeftInChallengeSfx_.Clone() : null;
      shortHalfSecondLeftInChallengeSfx_ = other.shortHalfSecondLeftInChallengeSfx_ != null ? other.shortHalfSecondLeftInChallengeSfx_.Clone() : null;
      oneMinuteWarningSfx_ = other.oneMinuteWarningSfx_ != null ? other.oneMinuteWarningSfx_.Clone() : null;
      rateAppTriggerMapEnter_ = other.rateAppTriggerMapEnter_;
      professionsAffinityAdvantageIcon_ = other.professionsAffinityAdvantageIcon_;
      professionsAffinityNeutralIcon_ = other.professionsAffinityNeutralIcon_;
      professionsAffinityDisadvantageIcon_ = other.professionsAffinityDisadvantageIcon_;
      internetOutageBackoffTime_ = other.internetOutageBackoffTime_;
      arCoreStoryboardTrigger_ = other.arCoreStoryboardTrigger_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGameConfig Clone() {
      return new ClientGameConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_glyph_color" field.</summary>
    public const int TargetGlyphColorFieldNumber = 2;
    private global::WUProtos.Data.Color targetGlyphColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Color TargetGlyphColor {
      get { return targetGlyphColor_; }
      set {
        targetGlyphColor_ = value;
      }
    }

    /// <summary>Field number for the "reticle_glyph_color" field.</summary>
    public const int ReticleGlyphColorFieldNumber = 3;
    private global::WUProtos.Data.Color reticleGlyphColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Color ReticleGlyphColor {
      get { return reticleGlyphColor_; }
      set {
        reticleGlyphColor_ = value;
      }
    }

    /// <summary>Field number for the "aligned_glyph_color" field.</summary>
    public const int AlignedGlyphColorFieldNumber = 4;
    private global::WUProtos.Data.Color alignedGlyphColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Color AlignedGlyphColor {
      get { return alignedGlyphColor_; }
      set {
        alignedGlyphColor_ = value;
      }
    }

    /// <summary>Field number for the "encounter_angle_of_spawn" field.</summary>
    public const int EncounterAngleOfSpawnFieldNumber = 5;
    private float encounterAngleOfSpawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EncounterAngleOfSpawn {
      get { return encounterAngleOfSpawn_; }
      set {
        encounterAngleOfSpawn_ = value;
      }
    }

    /// <summary>Field number for the "time_before_ar_hint_display" field.</summary>
    public const int TimeBeforeArHintDisplayFieldNumber = 6;
    private float timeBeforeArHintDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeBeforeArHintDisplay {
      get { return timeBeforeArHintDisplay_; }
      set {
        timeBeforeArHintDisplay_ = value;
      }
    }

    /// <summary>Field number for the "max_lock_distance_from_origin" field.</summary>
    public const int MaxLockDistanceFromOriginFieldNumber = 7;
    private float maxLockDistanceFromOrigin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxLockDistanceFromOrigin {
      get { return maxLockDistanceFromOrigin_; }
      set {
        maxLockDistanceFromOrigin_ = value;
      }
    }

    /// <summary>Field number for the "distance_behind_camera_to_spawn_marker" field.</summary>
    public const int DistanceBehindCameraToSpawnMarkerFieldNumber = 8;
    private float distanceBehindCameraToSpawnMarker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DistanceBehindCameraToSpawnMarker {
      get { return distanceBehindCameraToSpawnMarker_; }
      set {
        distanceBehindCameraToSpawnMarker_ = value;
      }
    }

    /// <summary>Field number for the "time_before_switch_to_ar_simple" field.</summary>
    public const int TimeBeforeSwitchToArSimpleFieldNumber = 9;
    private float timeBeforeSwitchToArSimple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeBeforeSwitchToArSimple {
      get { return timeBeforeSwitchToArSimple_; }
      set {
        timeBeforeSwitchToArSimple_ = value;
      }
    }

    /// <summary>Field number for the "tutorial_encounter_id" field.</summary>
    public const int TutorialEncounterIdFieldNumber = 10;
    private string tutorialEncounterId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TutorialEncounterId {
      get { return tutorialEncounterId_; }
      set {
        tutorialEncounterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encounter_reset_gforce" field.</summary>
    public const int EncounterResetGforceFieldNumber = 11;
    private float encounterResetGforce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EncounterResetGforce {
      get { return encounterResetGforce_; }
      set {
        encounterResetGforce_ = value;
      }
    }

    /// <summary>Field number for the "local_map_update_interval_seconds" field.</summary>
    public const int LocalMapUpdateIntervalSecondsFieldNumber = 12;
    private float localMapUpdateIntervalSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LocalMapUpdateIntervalSeconds {
      get { return localMapUpdateIntervalSeconds_; }
      set {
        localMapUpdateIntervalSeconds_ = value;
      }
    }

    /// <summary>Field number for the "floo_network_config" field.</summary>
    public const int FlooNetworkConfigFieldNumber = 13;
    private global::WUProtos.Data.Client.ClientFlooNetworkConfig flooNetworkConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientFlooNetworkConfig FlooNetworkConfig {
      get { return flooNetworkConfig_; }
      set {
        flooNetworkConfig_ = value;
      }
    }

    /// <summary>Field number for the "floo_contribution_button_values" field.</summary>
    public const int FlooContributionButtonValuesFieldNumber = 14;
    private static readonly pb::FieldCodec<long> _repeated_flooContributionButtonValues_codec
        = pb::FieldCodec.ForInt64(114);
    private readonly pbc::RepeatedField<long> flooContributionButtonValues_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> FlooContributionButtonValues {
      get { return flooContributionButtonValues_; }
    }

    /// <summary>Field number for the "app_background_map" field.</summary>
    public const int AppBackgroundMapFieldNumber = 15;
    private int appBackgroundMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppBackgroundMap {
      get { return appBackgroundMap_; }
      set {
        appBackgroundMap_ = value;
      }
    }

    /// <summary>Field number for the "app_background_full" field.</summary>
    public const int AppBackgroundFullFieldNumber = 16;
    private int appBackgroundFull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AppBackgroundFull {
      get { return appBackgroundFull_; }
      set {
        appBackgroundFull_ = value;
      }
    }

    /// <summary>Field number for the "triggerable_cooldown" field.</summary>
    public const int TriggerableCooldownFieldNumber = 17;
    private float triggerableCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TriggerableCooldown {
      get { return triggerableCooldown_; }
      set {
        triggerableCooldown_ = value;
      }
    }

    /// <summary>Field number for the "level_up_trigger_priority" field.</summary>
    public const int LevelUpTriggerPriorityFieldNumber = 18;
    private int levelUpTriggerPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelUpTriggerPriority {
      get { return levelUpTriggerPriority_; }
      set {
        levelUpTriggerPriority_ = value;
      }
    }

    /// <summary>Field number for the "walkbox_trigger_priority" field.</summary>
    public const int WalkboxTriggerPriorityFieldNumber = 19;
    private int walkboxTriggerPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WalkboxTriggerPriority {
      get { return walkboxTriggerPriority_; }
      set {
        walkboxTriggerPriority_ = value;
      }
    }

    /// <summary>Field number for the "permissions_config" field.</summary>
    public const int PermissionsConfigFieldNumber = 20;
    private global::WUProtos.Data.PermissionsConfigStaticList permissionsConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.PermissionsConfigStaticList PermissionsConfig {
      get { return permissionsConfig_; }
      set {
        permissionsConfig_ = value;
      }
    }

    /// <summary>Field number for the "swish_game_scoring_thresholds" field.</summary>
    public const int SwishGameScoringThresholdsFieldNumber = 22;
    private static readonly pb::FieldCodec<float> _repeated_swishGameScoringThresholds_codec
        = pb::FieldCodec.ForFloat(178);
    private readonly pbc::RepeatedField<float> swishGameScoringThresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SwishGameScoringThresholds {
      get { return swishGameScoringThresholds_; }
    }

    /// <summary>Field number for the "swish_game_scoring_bonuses" field.</summary>
    public const int SwishGameScoringBonusesFieldNumber = 23;
    private static readonly pb::FieldCodec<float> _repeated_swishGameScoringBonuses_codec
        = pb::FieldCodec.ForFloat(186);
    private readonly pbc::RepeatedField<float> swishGameScoringBonuses_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> SwishGameScoringBonuses {
      get { return swishGameScoringBonuses_; }
    }

    /// <summary>Field number for the "audio_config" field.</summary>
    public const int AudioConfigFieldNumber = 24;
    private global::WUProtos.Data.AudioConfig audioConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.AudioConfig AudioConfig {
      get { return audioConfig_; }
      set {
        audioConfig_ = value;
      }
    }

    /// <summary>Field number for the "audio_initial_banks" field.</summary>
    public const int AudioInitialBanksFieldNumber = 25;
    private static readonly pb::FieldCodec<string> _repeated_audioInitialBanks_codec
        = pb::FieldCodec.ForString(202);
    private readonly pbc::RepeatedField<string> audioInitialBanks_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AudioInitialBanks {
      get { return audioInitialBanks_; }
    }

    /// <summary>Field number for the "subfeature_prestige_levels" field.</summary>
    public const int SubfeaturePrestigeLevelsFieldNumber = 26;
    private static readonly pb::FieldCodec<global::WUProtos.Data.Collection.CollectionSubfeaturePrestigeLevels> _repeated_subfeaturePrestigeLevels_codec
        = pb::FieldCodec.ForMessage(210, global::WUProtos.Data.Collection.CollectionSubfeaturePrestigeLevels.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.Collection.CollectionSubfeaturePrestigeLevels> subfeaturePrestigeLevels_ = new pbc::RepeatedField<global::WUProtos.Data.Collection.CollectionSubfeaturePrestigeLevels>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.Collection.CollectionSubfeaturePrestigeLevels> SubfeaturePrestigeLevels {
      get { return subfeaturePrestigeLevels_; }
    }

    /// <summary>Field number for the "bonus_config" field.</summary>
    public const int BonusConfigFieldNumber = 27;
    private global::WUProtos.Data.Client.ClientBonusConfig bonusConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientBonusConfig BonusConfig {
      get { return bonusConfig_; }
      set {
        bonusConfig_ = value;
      }
    }

    /// <summary>Field number for the "portkey_wrackspurt_collection_haptic_key" field.</summary>
    public const int PortkeyWrackspurtCollectionHapticKeyFieldNumber = 28;
    private string portkeyWrackspurtCollectionHapticKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortkeyWrackspurtCollectionHapticKey {
      get { return portkeyWrackspurtCollectionHapticKey_; }
      set {
        portkeyWrackspurtCollectionHapticKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "potion_masternote_unlock_treshold" field.</summary>
    public const int PotionMasternoteUnlockTresholdFieldNumber = 30;
    private int potionMasternoteUnlockTreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PotionMasternoteUnlockTreshold {
      get { return potionMasternoteUnlockTreshold_; }
      set {
        potionMasternoteUnlockTreshold_ = value;
      }
    }

    /// <summary>Field number for the "subfeature_family_orders" field.</summary>
    public const int SubfeatureFamilyOrdersFieldNumber = 31;
    private static readonly pb::FieldCodec<global::WUProtos.Data.Collection.CollectionSubfeatureFamilyOrders> _repeated_subfeatureFamilyOrders_codec
        = pb::FieldCodec.ForMessage(250, global::WUProtos.Data.Collection.CollectionSubfeatureFamilyOrders.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.Collection.CollectionSubfeatureFamilyOrders> subfeatureFamilyOrders_ = new pbc::RepeatedField<global::WUProtos.Data.Collection.CollectionSubfeatureFamilyOrders>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.Collection.CollectionSubfeatureFamilyOrders> SubfeatureFamilyOrders {
      get { return subfeatureFamilyOrders_; }
    }

    /// <summary>Field number for the "battery_saver_profiles" field.</summary>
    public const int BatterySaverProfilesFieldNumber = 32;
    private static readonly pb::FieldCodec<global::WUProtos.Data.BatterySaverProfile> _repeated_batterySaverProfiles_codec
        = pb::FieldCodec.ForMessage(258, global::WUProtos.Data.BatterySaverProfile.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.BatterySaverProfile> batterySaverProfiles_ = new pbc::RepeatedField<global::WUProtos.Data.BatterySaverProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.BatterySaverProfile> BatterySaverProfiles {
      get { return batterySaverProfiles_; }
    }

    /// <summary>Field number for the "rate_app_min_player_level" field.</summary>
    public const int RateAppMinPlayerLevelFieldNumber = 33;
    private int rateAppMinPlayerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppMinPlayerLevel {
      get { return rateAppMinPlayerLevel_; }
      set {
        rateAppMinPlayerLevel_ = value;
      }
    }

    /// <summary>Field number for the "rate_app_cooldown_days" field.</summary>
    public const int RateAppCooldownDaysFieldNumber = 34;
    private int rateAppCooldownDays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppCooldownDays {
      get { return rateAppCooldownDays_; }
      set {
        rateAppCooldownDays_ = value;
      }
    }

    /// <summary>Field number for the "too_fast_cooldown" field.</summary>
    public const int TooFastCooldownFieldNumber = 35;
    private int tooFastCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TooFastCooldown {
      get { return tooFastCooldown_; }
      set {
        tooFastCooldown_ = value;
      }
    }

    /// <summary>Field number for the "encounter_banks" field.</summary>
    public const int EncounterBanksFieldNumber = 36;
    private static readonly pb::FieldCodec<global::WUProtos.Data.Encounter.EncounterSoundBanks> _repeated_encounterBanks_codec
        = pb::FieldCodec.ForMessage(290, global::WUProtos.Data.Encounter.EncounterSoundBanks.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.Encounter.EncounterSoundBanks> encounterBanks_ = new pbc::RepeatedField<global::WUProtos.Data.Encounter.EncounterSoundBanks>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.Encounter.EncounterSoundBanks> EncounterBanks {
      get { return encounterBanks_; }
    }

    /// <summary>Field number for the "daily_reward_popup_trigger_priority" field.</summary>
    public const int DailyRewardPopupTriggerPriorityFieldNumber = 37;
    private int dailyRewardPopupTriggerPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyRewardPopupTriggerPriority {
      get { return dailyRewardPopupTriggerPriority_; }
      set {
        dailyRewardPopupTriggerPriority_ = value;
      }
    }

    /// <summary>Field number for the "rate_app_trigger_priority" field.</summary>
    public const int RateAppTriggerPriorityFieldNumber = 38;
    private int rateAppTriggerPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppTriggerPriority {
      get { return rateAppTriggerPriority_; }
      set {
        rateAppTriggerPriority_ = value;
      }
    }

    /// <summary>Field number for the "ftue_video" field.</summary>
    public const int FtueVideoFieldNumber = 43;
    private global::WUProtos.Data.Client.ClientFtueVideoConfig ftueVideo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientFtueVideoConfig FtueVideo {
      get { return ftueVideo_; }
      set {
        ftueVideo_ = value;
      }
    }

    /// <summary>Field number for the "tutorial_potion_brew" field.</summary>
    public const int TutorialPotionBrewFieldNumber = 44;
    private string tutorialPotionBrew_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TutorialPotionBrew {
      get { return tutorialPotionBrew_; }
      set {
        tutorialPotionBrew_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "generic_trace_spell_fail_sfx" field.</summary>
    public const int GenericTraceSpellFailSfxFieldNumber = 45;
    private string genericTraceSpellFailSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GenericTraceSpellFailSfx {
      get { return genericTraceSpellFailSfx_; }
      set {
        genericTraceSpellFailSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tracing_spell_glyph_sfx" field.</summary>
    public const int TracingSpellGlyphSfxFieldNumber = 46;
    private string tracingSpellGlyphSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TracingSpellGlyphSfx {
      get { return tracingSpellGlyphSfx_; }
      set {
        tracingSpellGlyphSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tracing_complete_sfx" field.</summary>
    public const int TracingCompleteSfxFieldNumber = 47;
    private string tracingCompleteSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TracingCompleteSfx {
      get { return tracingCompleteSfx_; }
      set {
        tracingCompleteSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spell_bar_increasing_sfx" field.</summary>
    public const int SpellBarIncreasingSfxFieldNumber = 48;
    private string spellBarIncreasingSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpellBarIncreasingSfx {
      get { return spellBarIncreasingSfx_; }
      set {
        spellBarIncreasingSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bad_spell_cast_sfx" field.</summary>
    public const int BadSpellCastSfxFieldNumber = 49;
    private string badSpellCastSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BadSpellCastSfx {
      get { return badSpellCastSfx_; }
      set {
        badSpellCastSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "good_spell_cast_sfx" field.</summary>
    public const int GoodSpellCastSfxFieldNumber = 50;
    private string goodSpellCastSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoodSpellCastSfx {
      get { return goodSpellCastSfx_; }
      set {
        goodSpellCastSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "great_spell_cast_sfx" field.</summary>
    public const int GreatSpellCastSfxFieldNumber = 51;
    private string greatSpellCastSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GreatSpellCastSfx {
      get { return greatSpellCastSfx_; }
      set {
        greatSpellCastSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "perfect_spell_cast_sfx" field.</summary>
    public const int PerfectSpellCastSfxFieldNumber = 52;
    private string perfectSpellCastSfx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PerfectSpellCastSfx {
      get { return perfectSpellCastSfx_; }
      set {
        perfectSpellCastSfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "registry_sticker_placed_haptic_key" field.</summary>
    public const int RegistryStickerPlacedHapticKeyFieldNumber = 53;
    private string registryStickerPlacedHapticKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistryStickerPlacedHapticKey {
      get { return registryStickerPlacedHapticKey_; }
      set {
        registryStickerPlacedHapticKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rewards_vessel_by_rarity" field.</summary>
    public const int RewardsVesselByRarityFieldNumber = 54;
    private static readonly pb::FieldCodec<string> _repeated_rewardsVesselByRarity_codec
        = pb::FieldCodec.ForString(434);
    private readonly pbc::RepeatedField<string> rewardsVesselByRarity_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardsVesselByRarity {
      get { return rewardsVesselByRarity_; }
    }

    /// <summary>Field number for the "rewards_sound_banks" field.</summary>
    public const int RewardsSoundBanksFieldNumber = 55;
    private static readonly pb::FieldCodec<string> _repeated_rewardsSoundBanks_codec
        = pb::FieldCodec.ForString(442);
    private readonly pbc::RepeatedField<string> rewardsSoundBanks_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RewardsSoundBanks {
      get { return rewardsSoundBanks_; }
    }

    /// <summary>Field number for the "first_sticker_storyboard_id" field.</summary>
    public const int FirstStickerStoryboardIdFieldNumber = 56;
    private string firstStickerStoryboardId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstStickerStoryboardId {
      get { return firstStickerStoryboardId_; }
      set {
        firstStickerStoryboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_sticker_collection_id" field.</summary>
    public const int FirstStickerCollectionIdFieldNumber = 57;
    private string firstStickerCollectionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstStickerCollectionId {
      get { return firstStickerCollectionId_; }
      set {
        firstStickerCollectionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_default_color" field.</summary>
    public const int AvatarDefaultColorFieldNumber = 58;
    private global::WUProtos.Data.Color avatarDefaultColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Color AvatarDefaultColor {
      get { return avatarDefaultColor_; }
      set {
        avatarDefaultColor_ = value;
      }
    }

    /// <summary>Field number for the "lock_on_completion_sfx" field.</summary>
    public const int LockOnCompletionSfxFieldNumber = 59;
    private global::WUProtos.Data.SoundConfig lockOnCompletionSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig LockOnCompletionSfx {
      get { return lockOnCompletionSfx_; }
      set {
        lockOnCompletionSfx_ = value;
      }
    }

    /// <summary>Field number for the "lock_on_time_up_sfx" field.</summary>
    public const int LockOnTimeUpSfxFieldNumber = 60;
    private global::WUProtos.Data.SoundConfig lockOnTimeUpSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig LockOnTimeUpSfx {
      get { return lockOnTimeUpSfx_; }
      set {
        lockOnTimeUpSfx_ = value;
      }
    }

    /// <summary>Field number for the "protego_cast_sfx" field.</summary>
    public const int ProtegoCastSfxFieldNumber = 61;
    private global::WUProtos.Data.SoundConfig protegoCastSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig ProtegoCastSfx {
      get { return protegoCastSfx_; }
      set {
        protegoCastSfx_ = value;
      }
    }

    /// <summary>Field number for the "protego_time_up_sfx" field.</summary>
    public const int ProtegoTimeUpSfxFieldNumber = 62;
    private global::WUProtos.Data.SoundConfig protegoTimeUpSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig ProtegoTimeUpSfx {
      get { return protegoTimeUpSfx_; }
      set {
        protegoTimeUpSfx_ = value;
      }
    }

    /// <summary>Field number for the "ms_before_final_intensity" field.</summary>
    public const int MsBeforeFinalIntensityFieldNumber = 63;
    private int msBeforeFinalIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsBeforeFinalIntensity {
      get { return msBeforeFinalIntensity_; }
      set {
        msBeforeFinalIntensity_ = value;
      }
    }

    /// <summary>Field number for the "ms_before_secondary_intensity" field.</summary>
    public const int MsBeforeSecondaryIntensityFieldNumber = 64;
    private int msBeforeSecondaryIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsBeforeSecondaryIntensity {
      get { return msBeforeSecondaryIntensity_; }
      set {
        msBeforeSecondaryIntensity_ = value;
      }
    }

    /// <summary>Field number for the "challenge_thirty_seconds_left_stinger" field.</summary>
    public const int ChallengeThirtySecondsLeftStingerFieldNumber = 65;
    private static readonly pb::FieldCodec<global::WUProtos.Data.AudioParameter> _repeated_challengeThirtySecondsLeftStinger_codec
        = pb::FieldCodec.ForMessage(522, global::WUProtos.Data.AudioParameter.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.AudioParameter> challengeThirtySecondsLeftStinger_ = new pbc::RepeatedField<global::WUProtos.Data.AudioParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.AudioParameter> ChallengeThirtySecondsLeftStinger {
      get { return challengeThirtySecondsLeftStinger_; }
    }

    /// <summary>Field number for the "challenge_encounter_player_victorious_stinger" field.</summary>
    public const int ChallengeEncounterPlayerVictoriousStingerFieldNumber = 66;
    private static readonly pb::FieldCodec<global::WUProtos.Data.AudioParameter> _repeated_challengeEncounterPlayerVictoriousStinger_codec
        = pb::FieldCodec.ForMessage(530, global::WUProtos.Data.AudioParameter.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.AudioParameter> challengeEncounterPlayerVictoriousStinger_ = new pbc::RepeatedField<global::WUProtos.Data.AudioParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.AudioParameter> ChallengeEncounterPlayerVictoriousStinger {
      get { return challengeEncounterPlayerVictoriousStinger_; }
    }

    /// <summary>Field number for the "challenge_encounter_player_defeated_stinger" field.</summary>
    public const int ChallengeEncounterPlayerDefeatedStingerFieldNumber = 67;
    private static readonly pb::FieldCodec<global::WUProtos.Data.AudioParameter> _repeated_challengeEncounterPlayerDefeatedStinger_codec
        = pb::FieldCodec.ForMessage(538, global::WUProtos.Data.AudioParameter.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.AudioParameter> challengeEncounterPlayerDefeatedStinger_ = new pbc::RepeatedField<global::WUProtos.Data.AudioParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.AudioParameter> ChallengeEncounterPlayerDefeatedStinger {
      get { return challengeEncounterPlayerDefeatedStinger_; }
    }

    /// <summary>Field number for the "challenge_begin_stinger" field.</summary>
    public const int ChallengeBeginStingerFieldNumber = 68;
    private static readonly pb::FieldCodec<global::WUProtos.Data.AudioParameter> _repeated_challengeBeginStinger_codec
        = pb::FieldCodec.ForMessage(546, global::WUProtos.Data.AudioParameter.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.AudioParameter> challengeBeginStinger_ = new pbc::RepeatedField<global::WUProtos.Data.AudioParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.AudioParameter> ChallengeBeginStinger {
      get { return challengeBeginStinger_; }
    }

    /// <summary>Field number for the "challenge_finish_victory" field.</summary>
    public const int ChallengeFinishVictoryFieldNumber = 69;
    private static readonly pb::FieldCodec<global::WUProtos.Data.AudioParameter> _repeated_challengeFinishVictory_codec
        = pb::FieldCodec.ForMessage(554, global::WUProtos.Data.AudioParameter.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.AudioParameter> challengeFinishVictory_ = new pbc::RepeatedField<global::WUProtos.Data.AudioParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.AudioParameter> ChallengeFinishVictory {
      get { return challengeFinishVictory_; }
    }

    /// <summary>Field number for the "challenge_finish_defeat" field.</summary>
    public const int ChallengeFinishDefeatFieldNumber = 70;
    private static readonly pb::FieldCodec<global::WUProtos.Data.AudioParameter> _repeated_challengeFinishDefeat_codec
        = pb::FieldCodec.ForMessage(562, global::WUProtos.Data.AudioParameter.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.AudioParameter> challengeFinishDefeat_ = new pbc::RepeatedField<global::WUProtos.Data.AudioParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.AudioParameter> ChallengeFinishDefeat {
      get { return challengeFinishDefeat_; }
    }

    /// <summary>Field number for the "challenge_elite_mob_spawns_stinger" field.</summary>
    public const int ChallengeEliteMobSpawnsStingerFieldNumber = 71;
    private static readonly pb::FieldCodec<global::WUProtos.Data.AudioParameter> _repeated_challengeEliteMobSpawnsStinger_codec
        = pb::FieldCodec.ForMessage(570, global::WUProtos.Data.AudioParameter.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.AudioParameter> challengeEliteMobSpawnsStinger_ = new pbc::RepeatedField<global::WUProtos.Data.AudioParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.AudioParameter> ChallengeEliteMobSpawnsStinger {
      get { return challengeEliteMobSpawnsStinger_; }
    }

    /// <summary>Field number for the "internet_reachability_check_url" field.</summary>
    public const int InternetReachabilityCheckUrlFieldNumber = 72;
    private string internetReachabilityCheckUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternetReachabilityCheckUrl {
      get { return internetReachabilityCheckUrl_; }
      set {
        internetReachabilityCheckUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rate_app_max_prompts" field.</summary>
    public const int RateAppMaxPromptsFieldNumber = 73;
    private int rateAppMaxPrompts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppMaxPrompts {
      get { return rateAppMaxPrompts_; }
      set {
        rateAppMaxPrompts_ = value;
      }
    }

    /// <summary>Field number for the "rate_app_version" field.</summary>
    public const int RateAppVersionFieldNumber = 74;
    private int rateAppVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppVersion {
      get { return rateAppVersion_; }
      set {
        rateAppVersion_ = value;
      }
    }

    /// <summary>Field number for the "rate_app_trigger_wizarding_challenge" field.</summary>
    public const int RateAppTriggerWizardingChallengeFieldNumber = 75;
    private int rateAppTriggerWizardingChallenge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppTriggerWizardingChallenge {
      get { return rateAppTriggerWizardingChallenge_; }
      set {
        rateAppTriggerWizardingChallenge_ = value;
      }
    }

    /// <summary>Field number for the "rate_app_trigger_sticker_page_complete" field.</summary>
    public const int RateAppTriggerStickerPageCompleteFieldNumber = 76;
    private int rateAppTriggerStickerPageComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppTriggerStickerPageComplete {
      get { return rateAppTriggerStickerPageComplete_; }
      set {
        rateAppTriggerStickerPageComplete_ = value;
      }
    }

    /// <summary>Field number for the "rate_app_trigger_event_quest_line_complete" field.</summary>
    public const int RateAppTriggerEventQuestLineCompleteFieldNumber = 77;
    private int rateAppTriggerEventQuestLineComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateAppTriggerEventQuestLineComplete {
      get { return rateAppTriggerEventQuestLineComplete_; }
      set {
        rateAppTriggerEventQuestLineComplete_ = value;
      }
    }

    /// <summary>Field number for the "checks_until_gps_prompt" field.</summary>
    public const int ChecksUntilGpsPromptFieldNumber = 78;
    private int checksUntilGpsPrompt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChecksUntilGpsPrompt {
      get { return checksUntilGpsPrompt_; }
      set {
        checksUntilGpsPrompt_ = value;
      }
    }

    /// <summary>Field number for the "fortress_sound_banks" field.</summary>
    public const int FortressSoundBanksFieldNumber = 79;
    private static readonly pb::FieldCodec<string> _repeated_fortressSoundBanks_codec
        = pb::FieldCodec.ForString(634);
    private readonly pbc::RepeatedField<string> fortressSoundBanks_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FortressSoundBanks {
      get { return fortressSoundBanks_; }
    }

    /// <summary>Field number for the "ten_seconds_left_in_challenge_sfx" field.</summary>
    public const int TenSecondsLeftInChallengeSfxFieldNumber = 80;
    private global::WUProtos.Data.SoundConfig tenSecondsLeftInChallengeSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig TenSecondsLeftInChallengeSfx {
      get { return tenSecondsLeftInChallengeSfx_; }
      set {
        tenSecondsLeftInChallengeSfx_ = value;
      }
    }

    /// <summary>Field number for the "long_second_left_in_challenge_sfx" field.</summary>
    public const int LongSecondLeftInChallengeSfxFieldNumber = 81;
    private global::WUProtos.Data.SoundConfig longSecondLeftInChallengeSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig LongSecondLeftInChallengeSfx {
      get { return longSecondLeftInChallengeSfx_; }
      set {
        longSecondLeftInChallengeSfx_ = value;
      }
    }

    /// <summary>Field number for the "short_half_second_left_in_challenge_sfx" field.</summary>
    public const int ShortHalfSecondLeftInChallengeSfxFieldNumber = 82;
    private global::WUProtos.Data.SoundConfig shortHalfSecondLeftInChallengeSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig ShortHalfSecondLeftInChallengeSfx {
      get { return shortHalfSecondLeftInChallengeSfx_; }
      set {
        shortHalfSecondLeftInChallengeSfx_ = value;
      }
    }

    /// <summary>Field number for the "one_minute_warning_sfx" field.</summary>
    public const int OneMinuteWarningSfxFieldNumber = 83;
    private global::WUProtos.Data.SoundConfig oneMinuteWarningSfx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SoundConfig OneMinuteWarningSfx {
      get { return oneMinuteWarningSfx_; }
      set {
        oneMinuteWarningSfx_ = value;
      }
    }

    /// <summary>Field number for the "rate_app_trigger_map_enter" field.</summary>
    public const int RateAppTriggerMapEnterFieldNumber = 84;
    private bool rateAppTriggerMapEnter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RateAppTriggerMapEnter {
      get { return rateAppTriggerMapEnter_; }
      set {
        rateAppTriggerMapEnter_ = value;
      }
    }

    /// <summary>Field number for the "professions_affinity_advantage_icon" field.</summary>
    public const int ProfessionsAffinityAdvantageIconFieldNumber = 85;
    private string professionsAffinityAdvantageIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfessionsAffinityAdvantageIcon {
      get { return professionsAffinityAdvantageIcon_; }
      set {
        professionsAffinityAdvantageIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "professions_affinity_neutral_icon" field.</summary>
    public const int ProfessionsAffinityNeutralIconFieldNumber = 86;
    private string professionsAffinityNeutralIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfessionsAffinityNeutralIcon {
      get { return professionsAffinityNeutralIcon_; }
      set {
        professionsAffinityNeutralIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "professions_affinity_disadvantage_icon" field.</summary>
    public const int ProfessionsAffinityDisadvantageIconFieldNumber = 87;
    private string professionsAffinityDisadvantageIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProfessionsAffinityDisadvantageIcon {
      get { return professionsAffinityDisadvantageIcon_; }
      set {
        professionsAffinityDisadvantageIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "internet_outage_backoff_time" field.</summary>
    public const int InternetOutageBackoffTimeFieldNumber = 88;
    private int internetOutageBackoffTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InternetOutageBackoffTime {
      get { return internetOutageBackoffTime_; }
      set {
        internetOutageBackoffTime_ = value;
      }
    }

    /// <summary>Field number for the "ar_core_storyboard_trigger" field.</summary>
    public const int ArCoreStoryboardTriggerFieldNumber = 89;
    private string arCoreStoryboardTrigger_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArCoreStoryboardTrigger {
      get { return arCoreStoryboardTrigger_; }
      set {
        arCoreStoryboardTrigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientGameConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientGameConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(TargetGlyphColor, other.TargetGlyphColor)) return false;
      if (!object.Equals(ReticleGlyphColor, other.ReticleGlyphColor)) return false;
      if (!object.Equals(AlignedGlyphColor, other.AlignedGlyphColor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EncounterAngleOfSpawn, other.EncounterAngleOfSpawn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeBeforeArHintDisplay, other.TimeBeforeArHintDisplay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxLockDistanceFromOrigin, other.MaxLockDistanceFromOrigin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DistanceBehindCameraToSpawnMarker, other.DistanceBehindCameraToSpawnMarker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeBeforeSwitchToArSimple, other.TimeBeforeSwitchToArSimple)) return false;
      if (TutorialEncounterId != other.TutorialEncounterId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EncounterResetGforce, other.EncounterResetGforce)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LocalMapUpdateIntervalSeconds, other.LocalMapUpdateIntervalSeconds)) return false;
      if (!object.Equals(FlooNetworkConfig, other.FlooNetworkConfig)) return false;
      if(!flooContributionButtonValues_.Equals(other.flooContributionButtonValues_)) return false;
      if (AppBackgroundMap != other.AppBackgroundMap) return false;
      if (AppBackgroundFull != other.AppBackgroundFull) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TriggerableCooldown, other.TriggerableCooldown)) return false;
      if (LevelUpTriggerPriority != other.LevelUpTriggerPriority) return false;
      if (WalkboxTriggerPriority != other.WalkboxTriggerPriority) return false;
      if (!object.Equals(PermissionsConfig, other.PermissionsConfig)) return false;
      if(!swishGameScoringThresholds_.Equals(other.swishGameScoringThresholds_)) return false;
      if(!swishGameScoringBonuses_.Equals(other.swishGameScoringBonuses_)) return false;
      if (!object.Equals(AudioConfig, other.AudioConfig)) return false;
      if(!audioInitialBanks_.Equals(other.audioInitialBanks_)) return false;
      if(!subfeaturePrestigeLevels_.Equals(other.subfeaturePrestigeLevels_)) return false;
      if (!object.Equals(BonusConfig, other.BonusConfig)) return false;
      if (PortkeyWrackspurtCollectionHapticKey != other.PortkeyWrackspurtCollectionHapticKey) return false;
      if (PotionMasternoteUnlockTreshold != other.PotionMasternoteUnlockTreshold) return false;
      if(!subfeatureFamilyOrders_.Equals(other.subfeatureFamilyOrders_)) return false;
      if(!batterySaverProfiles_.Equals(other.batterySaverProfiles_)) return false;
      if (RateAppMinPlayerLevel != other.RateAppMinPlayerLevel) return false;
      if (RateAppCooldownDays != other.RateAppCooldownDays) return false;
      if (TooFastCooldown != other.TooFastCooldown) return false;
      if(!encounterBanks_.Equals(other.encounterBanks_)) return false;
      if (DailyRewardPopupTriggerPriority != other.DailyRewardPopupTriggerPriority) return false;
      if (RateAppTriggerPriority != other.RateAppTriggerPriority) return false;
      if (!object.Equals(FtueVideo, other.FtueVideo)) return false;
      if (TutorialPotionBrew != other.TutorialPotionBrew) return false;
      if (GenericTraceSpellFailSfx != other.GenericTraceSpellFailSfx) return false;
      if (TracingSpellGlyphSfx != other.TracingSpellGlyphSfx) return false;
      if (TracingCompleteSfx != other.TracingCompleteSfx) return false;
      if (SpellBarIncreasingSfx != other.SpellBarIncreasingSfx) return false;
      if (BadSpellCastSfx != other.BadSpellCastSfx) return false;
      if (GoodSpellCastSfx != other.GoodSpellCastSfx) return false;
      if (GreatSpellCastSfx != other.GreatSpellCastSfx) return false;
      if (PerfectSpellCastSfx != other.PerfectSpellCastSfx) return false;
      if (RegistryStickerPlacedHapticKey != other.RegistryStickerPlacedHapticKey) return false;
      if(!rewardsVesselByRarity_.Equals(other.rewardsVesselByRarity_)) return false;
      if(!rewardsSoundBanks_.Equals(other.rewardsSoundBanks_)) return false;
      if (FirstStickerStoryboardId != other.FirstStickerStoryboardId) return false;
      if (FirstStickerCollectionId != other.FirstStickerCollectionId) return false;
      if (!object.Equals(AvatarDefaultColor, other.AvatarDefaultColor)) return false;
      if (!object.Equals(LockOnCompletionSfx, other.LockOnCompletionSfx)) return false;
      if (!object.Equals(LockOnTimeUpSfx, other.LockOnTimeUpSfx)) return false;
      if (!object.Equals(ProtegoCastSfx, other.ProtegoCastSfx)) return false;
      if (!object.Equals(ProtegoTimeUpSfx, other.ProtegoTimeUpSfx)) return false;
      if (MsBeforeFinalIntensity != other.MsBeforeFinalIntensity) return false;
      if (MsBeforeSecondaryIntensity != other.MsBeforeSecondaryIntensity) return false;
      if(!challengeThirtySecondsLeftStinger_.Equals(other.challengeThirtySecondsLeftStinger_)) return false;
      if(!challengeEncounterPlayerVictoriousStinger_.Equals(other.challengeEncounterPlayerVictoriousStinger_)) return false;
      if(!challengeEncounterPlayerDefeatedStinger_.Equals(other.challengeEncounterPlayerDefeatedStinger_)) return false;
      if(!challengeBeginStinger_.Equals(other.challengeBeginStinger_)) return false;
      if(!challengeFinishVictory_.Equals(other.challengeFinishVictory_)) return false;
      if(!challengeFinishDefeat_.Equals(other.challengeFinishDefeat_)) return false;
      if(!challengeEliteMobSpawnsStinger_.Equals(other.challengeEliteMobSpawnsStinger_)) return false;
      if (InternetReachabilityCheckUrl != other.InternetReachabilityCheckUrl) return false;
      if (RateAppMaxPrompts != other.RateAppMaxPrompts) return false;
      if (RateAppVersion != other.RateAppVersion) return false;
      if (RateAppTriggerWizardingChallenge != other.RateAppTriggerWizardingChallenge) return false;
      if (RateAppTriggerStickerPageComplete != other.RateAppTriggerStickerPageComplete) return false;
      if (RateAppTriggerEventQuestLineComplete != other.RateAppTriggerEventQuestLineComplete) return false;
      if (ChecksUntilGpsPrompt != other.ChecksUntilGpsPrompt) return false;
      if(!fortressSoundBanks_.Equals(other.fortressSoundBanks_)) return false;
      if (!object.Equals(TenSecondsLeftInChallengeSfx, other.TenSecondsLeftInChallengeSfx)) return false;
      if (!object.Equals(LongSecondLeftInChallengeSfx, other.LongSecondLeftInChallengeSfx)) return false;
      if (!object.Equals(ShortHalfSecondLeftInChallengeSfx, other.ShortHalfSecondLeftInChallengeSfx)) return false;
      if (!object.Equals(OneMinuteWarningSfx, other.OneMinuteWarningSfx)) return false;
      if (RateAppTriggerMapEnter != other.RateAppTriggerMapEnter) return false;
      if (ProfessionsAffinityAdvantageIcon != other.ProfessionsAffinityAdvantageIcon) return false;
      if (ProfessionsAffinityNeutralIcon != other.ProfessionsAffinityNeutralIcon) return false;
      if (ProfessionsAffinityDisadvantageIcon != other.ProfessionsAffinityDisadvantageIcon) return false;
      if (InternetOutageBackoffTime != other.InternetOutageBackoffTime) return false;
      if (ArCoreStoryboardTrigger != other.ArCoreStoryboardTrigger) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (targetGlyphColor_ != null) hash ^= TargetGlyphColor.GetHashCode();
      if (reticleGlyphColor_ != null) hash ^= ReticleGlyphColor.GetHashCode();
      if (alignedGlyphColor_ != null) hash ^= AlignedGlyphColor.GetHashCode();
      if (EncounterAngleOfSpawn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EncounterAngleOfSpawn);
      if (TimeBeforeArHintDisplay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeBeforeArHintDisplay);
      if (MaxLockDistanceFromOrigin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxLockDistanceFromOrigin);
      if (DistanceBehindCameraToSpawnMarker != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DistanceBehindCameraToSpawnMarker);
      if (TimeBeforeSwitchToArSimple != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeBeforeSwitchToArSimple);
      if (TutorialEncounterId.Length != 0) hash ^= TutorialEncounterId.GetHashCode();
      if (EncounterResetGforce != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EncounterResetGforce);
      if (LocalMapUpdateIntervalSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LocalMapUpdateIntervalSeconds);
      if (flooNetworkConfig_ != null) hash ^= FlooNetworkConfig.GetHashCode();
      hash ^= flooContributionButtonValues_.GetHashCode();
      if (AppBackgroundMap != 0) hash ^= AppBackgroundMap.GetHashCode();
      if (AppBackgroundFull != 0) hash ^= AppBackgroundFull.GetHashCode();
      if (TriggerableCooldown != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TriggerableCooldown);
      if (LevelUpTriggerPriority != 0) hash ^= LevelUpTriggerPriority.GetHashCode();
      if (WalkboxTriggerPriority != 0) hash ^= WalkboxTriggerPriority.GetHashCode();
      if (permissionsConfig_ != null) hash ^= PermissionsConfig.GetHashCode();
      hash ^= swishGameScoringThresholds_.GetHashCode();
      hash ^= swishGameScoringBonuses_.GetHashCode();
      if (audioConfig_ != null) hash ^= AudioConfig.GetHashCode();
      hash ^= audioInitialBanks_.GetHashCode();
      hash ^= subfeaturePrestigeLevels_.GetHashCode();
      if (bonusConfig_ != null) hash ^= BonusConfig.GetHashCode();
      if (PortkeyWrackspurtCollectionHapticKey.Length != 0) hash ^= PortkeyWrackspurtCollectionHapticKey.GetHashCode();
      if (PotionMasternoteUnlockTreshold != 0) hash ^= PotionMasternoteUnlockTreshold.GetHashCode();
      hash ^= subfeatureFamilyOrders_.GetHashCode();
      hash ^= batterySaverProfiles_.GetHashCode();
      if (RateAppMinPlayerLevel != 0) hash ^= RateAppMinPlayerLevel.GetHashCode();
      if (RateAppCooldownDays != 0) hash ^= RateAppCooldownDays.GetHashCode();
      if (TooFastCooldown != 0) hash ^= TooFastCooldown.GetHashCode();
      hash ^= encounterBanks_.GetHashCode();
      if (DailyRewardPopupTriggerPriority != 0) hash ^= DailyRewardPopupTriggerPriority.GetHashCode();
      if (RateAppTriggerPriority != 0) hash ^= RateAppTriggerPriority.GetHashCode();
      if (ftueVideo_ != null) hash ^= FtueVideo.GetHashCode();
      if (TutorialPotionBrew.Length != 0) hash ^= TutorialPotionBrew.GetHashCode();
      if (GenericTraceSpellFailSfx.Length != 0) hash ^= GenericTraceSpellFailSfx.GetHashCode();
      if (TracingSpellGlyphSfx.Length != 0) hash ^= TracingSpellGlyphSfx.GetHashCode();
      if (TracingCompleteSfx.Length != 0) hash ^= TracingCompleteSfx.GetHashCode();
      if (SpellBarIncreasingSfx.Length != 0) hash ^= SpellBarIncreasingSfx.GetHashCode();
      if (BadSpellCastSfx.Length != 0) hash ^= BadSpellCastSfx.GetHashCode();
      if (GoodSpellCastSfx.Length != 0) hash ^= GoodSpellCastSfx.GetHashCode();
      if (GreatSpellCastSfx.Length != 0) hash ^= GreatSpellCastSfx.GetHashCode();
      if (PerfectSpellCastSfx.Length != 0) hash ^= PerfectSpellCastSfx.GetHashCode();
      if (RegistryStickerPlacedHapticKey.Length != 0) hash ^= RegistryStickerPlacedHapticKey.GetHashCode();
      hash ^= rewardsVesselByRarity_.GetHashCode();
      hash ^= rewardsSoundBanks_.GetHashCode();
      if (FirstStickerStoryboardId.Length != 0) hash ^= FirstStickerStoryboardId.GetHashCode();
      if (FirstStickerCollectionId.Length != 0) hash ^= FirstStickerCollectionId.GetHashCode();
      if (avatarDefaultColor_ != null) hash ^= AvatarDefaultColor.GetHashCode();
      if (lockOnCompletionSfx_ != null) hash ^= LockOnCompletionSfx.GetHashCode();
      if (lockOnTimeUpSfx_ != null) hash ^= LockOnTimeUpSfx.GetHashCode();
      if (protegoCastSfx_ != null) hash ^= ProtegoCastSfx.GetHashCode();
      if (protegoTimeUpSfx_ != null) hash ^= ProtegoTimeUpSfx.GetHashCode();
      if (MsBeforeFinalIntensity != 0) hash ^= MsBeforeFinalIntensity.GetHashCode();
      if (MsBeforeSecondaryIntensity != 0) hash ^= MsBeforeSecondaryIntensity.GetHashCode();
      hash ^= challengeThirtySecondsLeftStinger_.GetHashCode();
      hash ^= challengeEncounterPlayerVictoriousStinger_.GetHashCode();
      hash ^= challengeEncounterPlayerDefeatedStinger_.GetHashCode();
      hash ^= challengeBeginStinger_.GetHashCode();
      hash ^= challengeFinishVictory_.GetHashCode();
      hash ^= challengeFinishDefeat_.GetHashCode();
      hash ^= challengeEliteMobSpawnsStinger_.GetHashCode();
      if (InternetReachabilityCheckUrl.Length != 0) hash ^= InternetReachabilityCheckUrl.GetHashCode();
      if (RateAppMaxPrompts != 0) hash ^= RateAppMaxPrompts.GetHashCode();
      if (RateAppVersion != 0) hash ^= RateAppVersion.GetHashCode();
      if (RateAppTriggerWizardingChallenge != 0) hash ^= RateAppTriggerWizardingChallenge.GetHashCode();
      if (RateAppTriggerStickerPageComplete != 0) hash ^= RateAppTriggerStickerPageComplete.GetHashCode();
      if (RateAppTriggerEventQuestLineComplete != 0) hash ^= RateAppTriggerEventQuestLineComplete.GetHashCode();
      if (ChecksUntilGpsPrompt != 0) hash ^= ChecksUntilGpsPrompt.GetHashCode();
      hash ^= fortressSoundBanks_.GetHashCode();
      if (tenSecondsLeftInChallengeSfx_ != null) hash ^= TenSecondsLeftInChallengeSfx.GetHashCode();
      if (longSecondLeftInChallengeSfx_ != null) hash ^= LongSecondLeftInChallengeSfx.GetHashCode();
      if (shortHalfSecondLeftInChallengeSfx_ != null) hash ^= ShortHalfSecondLeftInChallengeSfx.GetHashCode();
      if (oneMinuteWarningSfx_ != null) hash ^= OneMinuteWarningSfx.GetHashCode();
      if (RateAppTriggerMapEnter != false) hash ^= RateAppTriggerMapEnter.GetHashCode();
      if (ProfessionsAffinityAdvantageIcon.Length != 0) hash ^= ProfessionsAffinityAdvantageIcon.GetHashCode();
      if (ProfessionsAffinityNeutralIcon.Length != 0) hash ^= ProfessionsAffinityNeutralIcon.GetHashCode();
      if (ProfessionsAffinityDisadvantageIcon.Length != 0) hash ^= ProfessionsAffinityDisadvantageIcon.GetHashCode();
      if (InternetOutageBackoffTime != 0) hash ^= InternetOutageBackoffTime.GetHashCode();
      if (ArCoreStoryboardTrigger.Length != 0) hash ^= ArCoreStoryboardTrigger.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (targetGlyphColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetGlyphColor);
      }
      if (reticleGlyphColor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReticleGlyphColor);
      }
      if (alignedGlyphColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AlignedGlyphColor);
      }
      if (EncounterAngleOfSpawn != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(EncounterAngleOfSpawn);
      }
      if (TimeBeforeArHintDisplay != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TimeBeforeArHintDisplay);
      }
      if (MaxLockDistanceFromOrigin != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MaxLockDistanceFromOrigin);
      }
      if (DistanceBehindCameraToSpawnMarker != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DistanceBehindCameraToSpawnMarker);
      }
      if (TimeBeforeSwitchToArSimple != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(TimeBeforeSwitchToArSimple);
      }
      if (TutorialEncounterId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TutorialEncounterId);
      }
      if (EncounterResetGforce != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(EncounterResetGforce);
      }
      if (LocalMapUpdateIntervalSeconds != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(LocalMapUpdateIntervalSeconds);
      }
      if (flooNetworkConfig_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(FlooNetworkConfig);
      }
      flooContributionButtonValues_.WriteTo(output, _repeated_flooContributionButtonValues_codec);
      if (AppBackgroundMap != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AppBackgroundMap);
      }
      if (AppBackgroundFull != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AppBackgroundFull);
      }
      if (TriggerableCooldown != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(TriggerableCooldown);
      }
      if (LevelUpTriggerPriority != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(LevelUpTriggerPriority);
      }
      if (WalkboxTriggerPriority != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(WalkboxTriggerPriority);
      }
      if (permissionsConfig_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PermissionsConfig);
      }
      swishGameScoringThresholds_.WriteTo(output, _repeated_swishGameScoringThresholds_codec);
      swishGameScoringBonuses_.WriteTo(output, _repeated_swishGameScoringBonuses_codec);
      if (audioConfig_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AudioConfig);
      }
      audioInitialBanks_.WriteTo(output, _repeated_audioInitialBanks_codec);
      subfeaturePrestigeLevels_.WriteTo(output, _repeated_subfeaturePrestigeLevels_codec);
      if (bonusConfig_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(BonusConfig);
      }
      if (PortkeyWrackspurtCollectionHapticKey.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(PortkeyWrackspurtCollectionHapticKey);
      }
      if (PotionMasternoteUnlockTreshold != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(PotionMasternoteUnlockTreshold);
      }
      subfeatureFamilyOrders_.WriteTo(output, _repeated_subfeatureFamilyOrders_codec);
      batterySaverProfiles_.WriteTo(output, _repeated_batterySaverProfiles_codec);
      if (RateAppMinPlayerLevel != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(RateAppMinPlayerLevel);
      }
      if (RateAppCooldownDays != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(RateAppCooldownDays);
      }
      if (TooFastCooldown != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(TooFastCooldown);
      }
      encounterBanks_.WriteTo(output, _repeated_encounterBanks_codec);
      if (DailyRewardPopupTriggerPriority != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(DailyRewardPopupTriggerPriority);
      }
      if (RateAppTriggerPriority != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(RateAppTriggerPriority);
      }
      if (ftueVideo_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(FtueVideo);
      }
      if (TutorialPotionBrew.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(TutorialPotionBrew);
      }
      if (GenericTraceSpellFailSfx.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(GenericTraceSpellFailSfx);
      }
      if (TracingSpellGlyphSfx.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(TracingSpellGlyphSfx);
      }
      if (TracingCompleteSfx.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(TracingCompleteSfx);
      }
      if (SpellBarIncreasingSfx.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(SpellBarIncreasingSfx);
      }
      if (BadSpellCastSfx.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(BadSpellCastSfx);
      }
      if (GoodSpellCastSfx.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(GoodSpellCastSfx);
      }
      if (GreatSpellCastSfx.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(GreatSpellCastSfx);
      }
      if (PerfectSpellCastSfx.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(PerfectSpellCastSfx);
      }
      if (RegistryStickerPlacedHapticKey.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(RegistryStickerPlacedHapticKey);
      }
      rewardsVesselByRarity_.WriteTo(output, _repeated_rewardsVesselByRarity_codec);
      rewardsSoundBanks_.WriteTo(output, _repeated_rewardsSoundBanks_codec);
      if (FirstStickerStoryboardId.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(FirstStickerStoryboardId);
      }
      if (FirstStickerCollectionId.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(FirstStickerCollectionId);
      }
      if (avatarDefaultColor_ != null) {
        output.WriteRawTag(210, 3);
        output.WriteMessage(AvatarDefaultColor);
      }
      if (lockOnCompletionSfx_ != null) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(LockOnCompletionSfx);
      }
      if (lockOnTimeUpSfx_ != null) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(LockOnTimeUpSfx);
      }
      if (protegoCastSfx_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(ProtegoCastSfx);
      }
      if (protegoTimeUpSfx_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(ProtegoTimeUpSfx);
      }
      if (MsBeforeFinalIntensity != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(MsBeforeFinalIntensity);
      }
      if (MsBeforeSecondaryIntensity != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(MsBeforeSecondaryIntensity);
      }
      challengeThirtySecondsLeftStinger_.WriteTo(output, _repeated_challengeThirtySecondsLeftStinger_codec);
      challengeEncounterPlayerVictoriousStinger_.WriteTo(output, _repeated_challengeEncounterPlayerVictoriousStinger_codec);
      challengeEncounterPlayerDefeatedStinger_.WriteTo(output, _repeated_challengeEncounterPlayerDefeatedStinger_codec);
      challengeBeginStinger_.WriteTo(output, _repeated_challengeBeginStinger_codec);
      challengeFinishVictory_.WriteTo(output, _repeated_challengeFinishVictory_codec);
      challengeFinishDefeat_.WriteTo(output, _repeated_challengeFinishDefeat_codec);
      challengeEliteMobSpawnsStinger_.WriteTo(output, _repeated_challengeEliteMobSpawnsStinger_codec);
      if (InternetReachabilityCheckUrl.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(InternetReachabilityCheckUrl);
      }
      if (RateAppMaxPrompts != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(RateAppMaxPrompts);
      }
      if (RateAppVersion != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(RateAppVersion);
      }
      if (RateAppTriggerWizardingChallenge != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(RateAppTriggerWizardingChallenge);
      }
      if (RateAppTriggerStickerPageComplete != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(RateAppTriggerStickerPageComplete);
      }
      if (RateAppTriggerEventQuestLineComplete != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(RateAppTriggerEventQuestLineComplete);
      }
      if (ChecksUntilGpsPrompt != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(ChecksUntilGpsPrompt);
      }
      fortressSoundBanks_.WriteTo(output, _repeated_fortressSoundBanks_codec);
      if (tenSecondsLeftInChallengeSfx_ != null) {
        output.WriteRawTag(130, 5);
        output.WriteMessage(TenSecondsLeftInChallengeSfx);
      }
      if (longSecondLeftInChallengeSfx_ != null) {
        output.WriteRawTag(138, 5);
        output.WriteMessage(LongSecondLeftInChallengeSfx);
      }
      if (shortHalfSecondLeftInChallengeSfx_ != null) {
        output.WriteRawTag(146, 5);
        output.WriteMessage(ShortHalfSecondLeftInChallengeSfx);
      }
      if (oneMinuteWarningSfx_ != null) {
        output.WriteRawTag(154, 5);
        output.WriteMessage(OneMinuteWarningSfx);
      }
      if (RateAppTriggerMapEnter != false) {
        output.WriteRawTag(160, 5);
        output.WriteBool(RateAppTriggerMapEnter);
      }
      if (ProfessionsAffinityAdvantageIcon.Length != 0) {
        output.WriteRawTag(170, 5);
        output.WriteString(ProfessionsAffinityAdvantageIcon);
      }
      if (ProfessionsAffinityNeutralIcon.Length != 0) {
        output.WriteRawTag(178, 5);
        output.WriteString(ProfessionsAffinityNeutralIcon);
      }
      if (ProfessionsAffinityDisadvantageIcon.Length != 0) {
        output.WriteRawTag(186, 5);
        output.WriteString(ProfessionsAffinityDisadvantageIcon);
      }
      if (InternetOutageBackoffTime != 0) {
        output.WriteRawTag(192, 5);
        output.WriteInt32(InternetOutageBackoffTime);
      }
      if (ArCoreStoryboardTrigger.Length != 0) {
        output.WriteRawTag(202, 5);
        output.WriteString(ArCoreStoryboardTrigger);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (targetGlyphColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetGlyphColor);
      }
      if (reticleGlyphColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReticleGlyphColor);
      }
      if (alignedGlyphColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlignedGlyphColor);
      }
      if (EncounterAngleOfSpawn != 0F) {
        size += 1 + 4;
      }
      if (TimeBeforeArHintDisplay != 0F) {
        size += 1 + 4;
      }
      if (MaxLockDistanceFromOrigin != 0F) {
        size += 1 + 4;
      }
      if (DistanceBehindCameraToSpawnMarker != 0F) {
        size += 1 + 4;
      }
      if (TimeBeforeSwitchToArSimple != 0F) {
        size += 1 + 4;
      }
      if (TutorialEncounterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TutorialEncounterId);
      }
      if (EncounterResetGforce != 0F) {
        size += 1 + 4;
      }
      if (LocalMapUpdateIntervalSeconds != 0F) {
        size += 1 + 4;
      }
      if (flooNetworkConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FlooNetworkConfig);
      }
      size += flooContributionButtonValues_.CalculateSize(_repeated_flooContributionButtonValues_codec);
      if (AppBackgroundMap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppBackgroundMap);
      }
      if (AppBackgroundFull != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AppBackgroundFull);
      }
      if (TriggerableCooldown != 0F) {
        size += 2 + 4;
      }
      if (LevelUpTriggerPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LevelUpTriggerPriority);
      }
      if (WalkboxTriggerPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WalkboxTriggerPriority);
      }
      if (permissionsConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PermissionsConfig);
      }
      size += swishGameScoringThresholds_.CalculateSize(_repeated_swishGameScoringThresholds_codec);
      size += swishGameScoringBonuses_.CalculateSize(_repeated_swishGameScoringBonuses_codec);
      if (audioConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AudioConfig);
      }
      size += audioInitialBanks_.CalculateSize(_repeated_audioInitialBanks_codec);
      size += subfeaturePrestigeLevels_.CalculateSize(_repeated_subfeaturePrestigeLevels_codec);
      if (bonusConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusConfig);
      }
      if (PortkeyWrackspurtCollectionHapticKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PortkeyWrackspurtCollectionHapticKey);
      }
      if (PotionMasternoteUnlockTreshold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PotionMasternoteUnlockTreshold);
      }
      size += subfeatureFamilyOrders_.CalculateSize(_repeated_subfeatureFamilyOrders_codec);
      size += batterySaverProfiles_.CalculateSize(_repeated_batterySaverProfiles_codec);
      if (RateAppMinPlayerLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppMinPlayerLevel);
      }
      if (RateAppCooldownDays != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppCooldownDays);
      }
      if (TooFastCooldown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TooFastCooldown);
      }
      size += encounterBanks_.CalculateSize(_repeated_encounterBanks_codec);
      if (DailyRewardPopupTriggerPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DailyRewardPopupTriggerPriority);
      }
      if (RateAppTriggerPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppTriggerPriority);
      }
      if (ftueVideo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FtueVideo);
      }
      if (TutorialPotionBrew.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TutorialPotionBrew);
      }
      if (GenericTraceSpellFailSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GenericTraceSpellFailSfx);
      }
      if (TracingSpellGlyphSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TracingSpellGlyphSfx);
      }
      if (TracingCompleteSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TracingCompleteSfx);
      }
      if (SpellBarIncreasingSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpellBarIncreasingSfx);
      }
      if (BadSpellCastSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BadSpellCastSfx);
      }
      if (GoodSpellCastSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GoodSpellCastSfx);
      }
      if (GreatSpellCastSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GreatSpellCastSfx);
      }
      if (PerfectSpellCastSfx.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PerfectSpellCastSfx);
      }
      if (RegistryStickerPlacedHapticKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RegistryStickerPlacedHapticKey);
      }
      size += rewardsVesselByRarity_.CalculateSize(_repeated_rewardsVesselByRarity_codec);
      size += rewardsSoundBanks_.CalculateSize(_repeated_rewardsSoundBanks_codec);
      if (FirstStickerStoryboardId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirstStickerStoryboardId);
      }
      if (FirstStickerCollectionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FirstStickerCollectionId);
      }
      if (avatarDefaultColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AvatarDefaultColor);
      }
      if (lockOnCompletionSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LockOnCompletionSfx);
      }
      if (lockOnTimeUpSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LockOnTimeUpSfx);
      }
      if (protegoCastSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProtegoCastSfx);
      }
      if (protegoTimeUpSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProtegoTimeUpSfx);
      }
      if (MsBeforeFinalIntensity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MsBeforeFinalIntensity);
      }
      if (MsBeforeSecondaryIntensity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MsBeforeSecondaryIntensity);
      }
      size += challengeThirtySecondsLeftStinger_.CalculateSize(_repeated_challengeThirtySecondsLeftStinger_codec);
      size += challengeEncounterPlayerVictoriousStinger_.CalculateSize(_repeated_challengeEncounterPlayerVictoriousStinger_codec);
      size += challengeEncounterPlayerDefeatedStinger_.CalculateSize(_repeated_challengeEncounterPlayerDefeatedStinger_codec);
      size += challengeBeginStinger_.CalculateSize(_repeated_challengeBeginStinger_codec);
      size += challengeFinishVictory_.CalculateSize(_repeated_challengeFinishVictory_codec);
      size += challengeFinishDefeat_.CalculateSize(_repeated_challengeFinishDefeat_codec);
      size += challengeEliteMobSpawnsStinger_.CalculateSize(_repeated_challengeEliteMobSpawnsStinger_codec);
      if (InternetReachabilityCheckUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InternetReachabilityCheckUrl);
      }
      if (RateAppMaxPrompts != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppMaxPrompts);
      }
      if (RateAppVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppVersion);
      }
      if (RateAppTriggerWizardingChallenge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppTriggerWizardingChallenge);
      }
      if (RateAppTriggerStickerPageComplete != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppTriggerStickerPageComplete);
      }
      if (RateAppTriggerEventQuestLineComplete != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RateAppTriggerEventQuestLineComplete);
      }
      if (ChecksUntilGpsPrompt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChecksUntilGpsPrompt);
      }
      size += fortressSoundBanks_.CalculateSize(_repeated_fortressSoundBanks_codec);
      if (tenSecondsLeftInChallengeSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TenSecondsLeftInChallengeSfx);
      }
      if (longSecondLeftInChallengeSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LongSecondLeftInChallengeSfx);
      }
      if (shortHalfSecondLeftInChallengeSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShortHalfSecondLeftInChallengeSfx);
      }
      if (oneMinuteWarningSfx_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OneMinuteWarningSfx);
      }
      if (RateAppTriggerMapEnter != false) {
        size += 2 + 1;
      }
      if (ProfessionsAffinityAdvantageIcon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProfessionsAffinityAdvantageIcon);
      }
      if (ProfessionsAffinityNeutralIcon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProfessionsAffinityNeutralIcon);
      }
      if (ProfessionsAffinityDisadvantageIcon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProfessionsAffinityDisadvantageIcon);
      }
      if (InternetOutageBackoffTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InternetOutageBackoffTime);
      }
      if (ArCoreStoryboardTrigger.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ArCoreStoryboardTrigger);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientGameConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.targetGlyphColor_ != null) {
        if (targetGlyphColor_ == null) {
          TargetGlyphColor = new global::WUProtos.Data.Color();
        }
        TargetGlyphColor.MergeFrom(other.TargetGlyphColor);
      }
      if (other.reticleGlyphColor_ != null) {
        if (reticleGlyphColor_ == null) {
          ReticleGlyphColor = new global::WUProtos.Data.Color();
        }
        ReticleGlyphColor.MergeFrom(other.ReticleGlyphColor);
      }
      if (other.alignedGlyphColor_ != null) {
        if (alignedGlyphColor_ == null) {
          AlignedGlyphColor = new global::WUProtos.Data.Color();
        }
        AlignedGlyphColor.MergeFrom(other.AlignedGlyphColor);
      }
      if (other.EncounterAngleOfSpawn != 0F) {
        EncounterAngleOfSpawn = other.EncounterAngleOfSpawn;
      }
      if (other.TimeBeforeArHintDisplay != 0F) {
        TimeBeforeArHintDisplay = other.TimeBeforeArHintDisplay;
      }
      if (other.MaxLockDistanceFromOrigin != 0F) {
        MaxLockDistanceFromOrigin = other.MaxLockDistanceFromOrigin;
      }
      if (other.DistanceBehindCameraToSpawnMarker != 0F) {
        DistanceBehindCameraToSpawnMarker = other.DistanceBehindCameraToSpawnMarker;
      }
      if (other.TimeBeforeSwitchToArSimple != 0F) {
        TimeBeforeSwitchToArSimple = other.TimeBeforeSwitchToArSimple;
      }
      if (other.TutorialEncounterId.Length != 0) {
        TutorialEncounterId = other.TutorialEncounterId;
      }
      if (other.EncounterResetGforce != 0F) {
        EncounterResetGforce = other.EncounterResetGforce;
      }
      if (other.LocalMapUpdateIntervalSeconds != 0F) {
        LocalMapUpdateIntervalSeconds = other.LocalMapUpdateIntervalSeconds;
      }
      if (other.flooNetworkConfig_ != null) {
        if (flooNetworkConfig_ == null) {
          FlooNetworkConfig = new global::WUProtos.Data.Client.ClientFlooNetworkConfig();
        }
        FlooNetworkConfig.MergeFrom(other.FlooNetworkConfig);
      }
      flooContributionButtonValues_.Add(other.flooContributionButtonValues_);
      if (other.AppBackgroundMap != 0) {
        AppBackgroundMap = other.AppBackgroundMap;
      }
      if (other.AppBackgroundFull != 0) {
        AppBackgroundFull = other.AppBackgroundFull;
      }
      if (other.TriggerableCooldown != 0F) {
        TriggerableCooldown = other.TriggerableCooldown;
      }
      if (other.LevelUpTriggerPriority != 0) {
        LevelUpTriggerPriority = other.LevelUpTriggerPriority;
      }
      if (other.WalkboxTriggerPriority != 0) {
        WalkboxTriggerPriority = other.WalkboxTriggerPriority;
      }
      if (other.permissionsConfig_ != null) {
        if (permissionsConfig_ == null) {
          PermissionsConfig = new global::WUProtos.Data.PermissionsConfigStaticList();
        }
        PermissionsConfig.MergeFrom(other.PermissionsConfig);
      }
      swishGameScoringThresholds_.Add(other.swishGameScoringThresholds_);
      swishGameScoringBonuses_.Add(other.swishGameScoringBonuses_);
      if (other.audioConfig_ != null) {
        if (audioConfig_ == null) {
          AudioConfig = new global::WUProtos.Data.AudioConfig();
        }
        AudioConfig.MergeFrom(other.AudioConfig);
      }
      audioInitialBanks_.Add(other.audioInitialBanks_);
      subfeaturePrestigeLevels_.Add(other.subfeaturePrestigeLevels_);
      if (other.bonusConfig_ != null) {
        if (bonusConfig_ == null) {
          BonusConfig = new global::WUProtos.Data.Client.ClientBonusConfig();
        }
        BonusConfig.MergeFrom(other.BonusConfig);
      }
      if (other.PortkeyWrackspurtCollectionHapticKey.Length != 0) {
        PortkeyWrackspurtCollectionHapticKey = other.PortkeyWrackspurtCollectionHapticKey;
      }
      if (other.PotionMasternoteUnlockTreshold != 0) {
        PotionMasternoteUnlockTreshold = other.PotionMasternoteUnlockTreshold;
      }
      subfeatureFamilyOrders_.Add(other.subfeatureFamilyOrders_);
      batterySaverProfiles_.Add(other.batterySaverProfiles_);
      if (other.RateAppMinPlayerLevel != 0) {
        RateAppMinPlayerLevel = other.RateAppMinPlayerLevel;
      }
      if (other.RateAppCooldownDays != 0) {
        RateAppCooldownDays = other.RateAppCooldownDays;
      }
      if (other.TooFastCooldown != 0) {
        TooFastCooldown = other.TooFastCooldown;
      }
      encounterBanks_.Add(other.encounterBanks_);
      if (other.DailyRewardPopupTriggerPriority != 0) {
        DailyRewardPopupTriggerPriority = other.DailyRewardPopupTriggerPriority;
      }
      if (other.RateAppTriggerPriority != 0) {
        RateAppTriggerPriority = other.RateAppTriggerPriority;
      }
      if (other.ftueVideo_ != null) {
        if (ftueVideo_ == null) {
          FtueVideo = new global::WUProtos.Data.Client.ClientFtueVideoConfig();
        }
        FtueVideo.MergeFrom(other.FtueVideo);
      }
      if (other.TutorialPotionBrew.Length != 0) {
        TutorialPotionBrew = other.TutorialPotionBrew;
      }
      if (other.GenericTraceSpellFailSfx.Length != 0) {
        GenericTraceSpellFailSfx = other.GenericTraceSpellFailSfx;
      }
      if (other.TracingSpellGlyphSfx.Length != 0) {
        TracingSpellGlyphSfx = other.TracingSpellGlyphSfx;
      }
      if (other.TracingCompleteSfx.Length != 0) {
        TracingCompleteSfx = other.TracingCompleteSfx;
      }
      if (other.SpellBarIncreasingSfx.Length != 0) {
        SpellBarIncreasingSfx = other.SpellBarIncreasingSfx;
      }
      if (other.BadSpellCastSfx.Length != 0) {
        BadSpellCastSfx = other.BadSpellCastSfx;
      }
      if (other.GoodSpellCastSfx.Length != 0) {
        GoodSpellCastSfx = other.GoodSpellCastSfx;
      }
      if (other.GreatSpellCastSfx.Length != 0) {
        GreatSpellCastSfx = other.GreatSpellCastSfx;
      }
      if (other.PerfectSpellCastSfx.Length != 0) {
        PerfectSpellCastSfx = other.PerfectSpellCastSfx;
      }
      if (other.RegistryStickerPlacedHapticKey.Length != 0) {
        RegistryStickerPlacedHapticKey = other.RegistryStickerPlacedHapticKey;
      }
      rewardsVesselByRarity_.Add(other.rewardsVesselByRarity_);
      rewardsSoundBanks_.Add(other.rewardsSoundBanks_);
      if (other.FirstStickerStoryboardId.Length != 0) {
        FirstStickerStoryboardId = other.FirstStickerStoryboardId;
      }
      if (other.FirstStickerCollectionId.Length != 0) {
        FirstStickerCollectionId = other.FirstStickerCollectionId;
      }
      if (other.avatarDefaultColor_ != null) {
        if (avatarDefaultColor_ == null) {
          AvatarDefaultColor = new global::WUProtos.Data.Color();
        }
        AvatarDefaultColor.MergeFrom(other.AvatarDefaultColor);
      }
      if (other.lockOnCompletionSfx_ != null) {
        if (lockOnCompletionSfx_ == null) {
          LockOnCompletionSfx = new global::WUProtos.Data.SoundConfig();
        }
        LockOnCompletionSfx.MergeFrom(other.LockOnCompletionSfx);
      }
      if (other.lockOnTimeUpSfx_ != null) {
        if (lockOnTimeUpSfx_ == null) {
          LockOnTimeUpSfx = new global::WUProtos.Data.SoundConfig();
        }
        LockOnTimeUpSfx.MergeFrom(other.LockOnTimeUpSfx);
      }
      if (other.protegoCastSfx_ != null) {
        if (protegoCastSfx_ == null) {
          ProtegoCastSfx = new global::WUProtos.Data.SoundConfig();
        }
        ProtegoCastSfx.MergeFrom(other.ProtegoCastSfx);
      }
      if (other.protegoTimeUpSfx_ != null) {
        if (protegoTimeUpSfx_ == null) {
          ProtegoTimeUpSfx = new global::WUProtos.Data.SoundConfig();
        }
        ProtegoTimeUpSfx.MergeFrom(other.ProtegoTimeUpSfx);
      }
      if (other.MsBeforeFinalIntensity != 0) {
        MsBeforeFinalIntensity = other.MsBeforeFinalIntensity;
      }
      if (other.MsBeforeSecondaryIntensity != 0) {
        MsBeforeSecondaryIntensity = other.MsBeforeSecondaryIntensity;
      }
      challengeThirtySecondsLeftStinger_.Add(other.challengeThirtySecondsLeftStinger_);
      challengeEncounterPlayerVictoriousStinger_.Add(other.challengeEncounterPlayerVictoriousStinger_);
      challengeEncounterPlayerDefeatedStinger_.Add(other.challengeEncounterPlayerDefeatedStinger_);
      challengeBeginStinger_.Add(other.challengeBeginStinger_);
      challengeFinishVictory_.Add(other.challengeFinishVictory_);
      challengeFinishDefeat_.Add(other.challengeFinishDefeat_);
      challengeEliteMobSpawnsStinger_.Add(other.challengeEliteMobSpawnsStinger_);
      if (other.InternetReachabilityCheckUrl.Length != 0) {
        InternetReachabilityCheckUrl = other.InternetReachabilityCheckUrl;
      }
      if (other.RateAppMaxPrompts != 0) {
        RateAppMaxPrompts = other.RateAppMaxPrompts;
      }
      if (other.RateAppVersion != 0) {
        RateAppVersion = other.RateAppVersion;
      }
      if (other.RateAppTriggerWizardingChallenge != 0) {
        RateAppTriggerWizardingChallenge = other.RateAppTriggerWizardingChallenge;
      }
      if (other.RateAppTriggerStickerPageComplete != 0) {
        RateAppTriggerStickerPageComplete = other.RateAppTriggerStickerPageComplete;
      }
      if (other.RateAppTriggerEventQuestLineComplete != 0) {
        RateAppTriggerEventQuestLineComplete = other.RateAppTriggerEventQuestLineComplete;
      }
      if (other.ChecksUntilGpsPrompt != 0) {
        ChecksUntilGpsPrompt = other.ChecksUntilGpsPrompt;
      }
      fortressSoundBanks_.Add(other.fortressSoundBanks_);
      if (other.tenSecondsLeftInChallengeSfx_ != null) {
        if (tenSecondsLeftInChallengeSfx_ == null) {
          TenSecondsLeftInChallengeSfx = new global::WUProtos.Data.SoundConfig();
        }
        TenSecondsLeftInChallengeSfx.MergeFrom(other.TenSecondsLeftInChallengeSfx);
      }
      if (other.longSecondLeftInChallengeSfx_ != null) {
        if (longSecondLeftInChallengeSfx_ == null) {
          LongSecondLeftInChallengeSfx = new global::WUProtos.Data.SoundConfig();
        }
        LongSecondLeftInChallengeSfx.MergeFrom(other.LongSecondLeftInChallengeSfx);
      }
      if (other.shortHalfSecondLeftInChallengeSfx_ != null) {
        if (shortHalfSecondLeftInChallengeSfx_ == null) {
          ShortHalfSecondLeftInChallengeSfx = new global::WUProtos.Data.SoundConfig();
        }
        ShortHalfSecondLeftInChallengeSfx.MergeFrom(other.ShortHalfSecondLeftInChallengeSfx);
      }
      if (other.oneMinuteWarningSfx_ != null) {
        if (oneMinuteWarningSfx_ == null) {
          OneMinuteWarningSfx = new global::WUProtos.Data.SoundConfig();
        }
        OneMinuteWarningSfx.MergeFrom(other.OneMinuteWarningSfx);
      }
      if (other.RateAppTriggerMapEnter != false) {
        RateAppTriggerMapEnter = other.RateAppTriggerMapEnter;
      }
      if (other.ProfessionsAffinityAdvantageIcon.Length != 0) {
        ProfessionsAffinityAdvantageIcon = other.ProfessionsAffinityAdvantageIcon;
      }
      if (other.ProfessionsAffinityNeutralIcon.Length != 0) {
        ProfessionsAffinityNeutralIcon = other.ProfessionsAffinityNeutralIcon;
      }
      if (other.ProfessionsAffinityDisadvantageIcon.Length != 0) {
        ProfessionsAffinityDisadvantageIcon = other.ProfessionsAffinityDisadvantageIcon;
      }
      if (other.InternetOutageBackoffTime != 0) {
        InternetOutageBackoffTime = other.InternetOutageBackoffTime;
      }
      if (other.ArCoreStoryboardTrigger.Length != 0) {
        ArCoreStoryboardTrigger = other.ArCoreStoryboardTrigger;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (targetGlyphColor_ == null) {
              TargetGlyphColor = new global::WUProtos.Data.Color();
            }
            input.ReadMessage(TargetGlyphColor);
            break;
          }
          case 26: {
            if (reticleGlyphColor_ == null) {
              ReticleGlyphColor = new global::WUProtos.Data.Color();
            }
            input.ReadMessage(ReticleGlyphColor);
            break;
          }
          case 34: {
            if (alignedGlyphColor_ == null) {
              AlignedGlyphColor = new global::WUProtos.Data.Color();
            }
            input.ReadMessage(AlignedGlyphColor);
            break;
          }
          case 45: {
            EncounterAngleOfSpawn = input.ReadFloat();
            break;
          }
          case 53: {
            TimeBeforeArHintDisplay = input.ReadFloat();
            break;
          }
          case 61: {
            MaxLockDistanceFromOrigin = input.ReadFloat();
            break;
          }
          case 69: {
            DistanceBehindCameraToSpawnMarker = input.ReadFloat();
            break;
          }
          case 77: {
            TimeBeforeSwitchToArSimple = input.ReadFloat();
            break;
          }
          case 82: {
            TutorialEncounterId = input.ReadString();
            break;
          }
          case 93: {
            EncounterResetGforce = input.ReadFloat();
            break;
          }
          case 101: {
            LocalMapUpdateIntervalSeconds = input.ReadFloat();
            break;
          }
          case 106: {
            if (flooNetworkConfig_ == null) {
              FlooNetworkConfig = new global::WUProtos.Data.Client.ClientFlooNetworkConfig();
            }
            input.ReadMessage(FlooNetworkConfig);
            break;
          }
          case 114:
          case 112: {
            flooContributionButtonValues_.AddEntriesFrom(input, _repeated_flooContributionButtonValues_codec);
            break;
          }
          case 120: {
            AppBackgroundMap = input.ReadInt32();
            break;
          }
          case 128: {
            AppBackgroundFull = input.ReadInt32();
            break;
          }
          case 141: {
            TriggerableCooldown = input.ReadFloat();
            break;
          }
          case 144: {
            LevelUpTriggerPriority = input.ReadInt32();
            break;
          }
          case 152: {
            WalkboxTriggerPriority = input.ReadInt32();
            break;
          }
          case 162: {
            if (permissionsConfig_ == null) {
              PermissionsConfig = new global::WUProtos.Data.PermissionsConfigStaticList();
            }
            input.ReadMessage(PermissionsConfig);
            break;
          }
          case 178:
          case 181: {
            swishGameScoringThresholds_.AddEntriesFrom(input, _repeated_swishGameScoringThresholds_codec);
            break;
          }
          case 186:
          case 189: {
            swishGameScoringBonuses_.AddEntriesFrom(input, _repeated_swishGameScoringBonuses_codec);
            break;
          }
          case 194: {
            if (audioConfig_ == null) {
              AudioConfig = new global::WUProtos.Data.AudioConfig();
            }
            input.ReadMessage(AudioConfig);
            break;
          }
          case 202: {
            audioInitialBanks_.AddEntriesFrom(input, _repeated_audioInitialBanks_codec);
            break;
          }
          case 210: {
            subfeaturePrestigeLevels_.AddEntriesFrom(input, _repeated_subfeaturePrestigeLevels_codec);
            break;
          }
          case 218: {
            if (bonusConfig_ == null) {
              BonusConfig = new global::WUProtos.Data.Client.ClientBonusConfig();
            }
            input.ReadMessage(BonusConfig);
            break;
          }
          case 226: {
            PortkeyWrackspurtCollectionHapticKey = input.ReadString();
            break;
          }
          case 240: {
            PotionMasternoteUnlockTreshold = input.ReadInt32();
            break;
          }
          case 250: {
            subfeatureFamilyOrders_.AddEntriesFrom(input, _repeated_subfeatureFamilyOrders_codec);
            break;
          }
          case 258: {
            batterySaverProfiles_.AddEntriesFrom(input, _repeated_batterySaverProfiles_codec);
            break;
          }
          case 264: {
            RateAppMinPlayerLevel = input.ReadInt32();
            break;
          }
          case 272: {
            RateAppCooldownDays = input.ReadInt32();
            break;
          }
          case 280: {
            TooFastCooldown = input.ReadInt32();
            break;
          }
          case 290: {
            encounterBanks_.AddEntriesFrom(input, _repeated_encounterBanks_codec);
            break;
          }
          case 296: {
            DailyRewardPopupTriggerPriority = input.ReadInt32();
            break;
          }
          case 304: {
            RateAppTriggerPriority = input.ReadInt32();
            break;
          }
          case 346: {
            if (ftueVideo_ == null) {
              FtueVideo = new global::WUProtos.Data.Client.ClientFtueVideoConfig();
            }
            input.ReadMessage(FtueVideo);
            break;
          }
          case 354: {
            TutorialPotionBrew = input.ReadString();
            break;
          }
          case 362: {
            GenericTraceSpellFailSfx = input.ReadString();
            break;
          }
          case 370: {
            TracingSpellGlyphSfx = input.ReadString();
            break;
          }
          case 378: {
            TracingCompleteSfx = input.ReadString();
            break;
          }
          case 386: {
            SpellBarIncreasingSfx = input.ReadString();
            break;
          }
          case 394: {
            BadSpellCastSfx = input.ReadString();
            break;
          }
          case 402: {
            GoodSpellCastSfx = input.ReadString();
            break;
          }
          case 410: {
            GreatSpellCastSfx = input.ReadString();
            break;
          }
          case 418: {
            PerfectSpellCastSfx = input.ReadString();
            break;
          }
          case 426: {
            RegistryStickerPlacedHapticKey = input.ReadString();
            break;
          }
          case 434: {
            rewardsVesselByRarity_.AddEntriesFrom(input, _repeated_rewardsVesselByRarity_codec);
            break;
          }
          case 442: {
            rewardsSoundBanks_.AddEntriesFrom(input, _repeated_rewardsSoundBanks_codec);
            break;
          }
          case 450: {
            FirstStickerStoryboardId = input.ReadString();
            break;
          }
          case 458: {
            FirstStickerCollectionId = input.ReadString();
            break;
          }
          case 466: {
            if (avatarDefaultColor_ == null) {
              AvatarDefaultColor = new global::WUProtos.Data.Color();
            }
            input.ReadMessage(AvatarDefaultColor);
            break;
          }
          case 474: {
            if (lockOnCompletionSfx_ == null) {
              LockOnCompletionSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(LockOnCompletionSfx);
            break;
          }
          case 482: {
            if (lockOnTimeUpSfx_ == null) {
              LockOnTimeUpSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(LockOnTimeUpSfx);
            break;
          }
          case 490: {
            if (protegoCastSfx_ == null) {
              ProtegoCastSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(ProtegoCastSfx);
            break;
          }
          case 498: {
            if (protegoTimeUpSfx_ == null) {
              ProtegoTimeUpSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(ProtegoTimeUpSfx);
            break;
          }
          case 504: {
            MsBeforeFinalIntensity = input.ReadInt32();
            break;
          }
          case 512: {
            MsBeforeSecondaryIntensity = input.ReadInt32();
            break;
          }
          case 522: {
            challengeThirtySecondsLeftStinger_.AddEntriesFrom(input, _repeated_challengeThirtySecondsLeftStinger_codec);
            break;
          }
          case 530: {
            challengeEncounterPlayerVictoriousStinger_.AddEntriesFrom(input, _repeated_challengeEncounterPlayerVictoriousStinger_codec);
            break;
          }
          case 538: {
            challengeEncounterPlayerDefeatedStinger_.AddEntriesFrom(input, _repeated_challengeEncounterPlayerDefeatedStinger_codec);
            break;
          }
          case 546: {
            challengeBeginStinger_.AddEntriesFrom(input, _repeated_challengeBeginStinger_codec);
            break;
          }
          case 554: {
            challengeFinishVictory_.AddEntriesFrom(input, _repeated_challengeFinishVictory_codec);
            break;
          }
          case 562: {
            challengeFinishDefeat_.AddEntriesFrom(input, _repeated_challengeFinishDefeat_codec);
            break;
          }
          case 570: {
            challengeEliteMobSpawnsStinger_.AddEntriesFrom(input, _repeated_challengeEliteMobSpawnsStinger_codec);
            break;
          }
          case 578: {
            InternetReachabilityCheckUrl = input.ReadString();
            break;
          }
          case 584: {
            RateAppMaxPrompts = input.ReadInt32();
            break;
          }
          case 592: {
            RateAppVersion = input.ReadInt32();
            break;
          }
          case 600: {
            RateAppTriggerWizardingChallenge = input.ReadInt32();
            break;
          }
          case 608: {
            RateAppTriggerStickerPageComplete = input.ReadInt32();
            break;
          }
          case 616: {
            RateAppTriggerEventQuestLineComplete = input.ReadInt32();
            break;
          }
          case 624: {
            ChecksUntilGpsPrompt = input.ReadInt32();
            break;
          }
          case 634: {
            fortressSoundBanks_.AddEntriesFrom(input, _repeated_fortressSoundBanks_codec);
            break;
          }
          case 642: {
            if (tenSecondsLeftInChallengeSfx_ == null) {
              TenSecondsLeftInChallengeSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(TenSecondsLeftInChallengeSfx);
            break;
          }
          case 650: {
            if (longSecondLeftInChallengeSfx_ == null) {
              LongSecondLeftInChallengeSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(LongSecondLeftInChallengeSfx);
            break;
          }
          case 658: {
            if (shortHalfSecondLeftInChallengeSfx_ == null) {
              ShortHalfSecondLeftInChallengeSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(ShortHalfSecondLeftInChallengeSfx);
            break;
          }
          case 666: {
            if (oneMinuteWarningSfx_ == null) {
              OneMinuteWarningSfx = new global::WUProtos.Data.SoundConfig();
            }
            input.ReadMessage(OneMinuteWarningSfx);
            break;
          }
          case 672: {
            RateAppTriggerMapEnter = input.ReadBool();
            break;
          }
          case 682: {
            ProfessionsAffinityAdvantageIcon = input.ReadString();
            break;
          }
          case 690: {
            ProfessionsAffinityNeutralIcon = input.ReadString();
            break;
          }
          case 698: {
            ProfessionsAffinityDisadvantageIcon = input.ReadString();
            break;
          }
          case 704: {
            InternetOutageBackoffTime = input.ReadInt32();
            break;
          }
          case 714: {
            ArCoreStoryboardTrigger = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
