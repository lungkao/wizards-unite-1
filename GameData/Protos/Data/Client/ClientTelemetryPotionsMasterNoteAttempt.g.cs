// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientTelemetryPotionsMasterNoteAttempt.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientTelemetryPotionsMasterNoteAttempt.proto</summary>
  public static partial class ClientTelemetryPotionsMasterNoteAttemptReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientTelemetryPotionsMasterNoteAttempt.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientTelemetryPotionsMasterNoteAttemptReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkJXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlQb3Rpb25z",
            "TWFzdGVyTm90ZUF0dGVtcHQucHJvdG8SFFdVUHJvdG9zLkRhdGEuQ2xpZW50",
            "Iu4BCidDbGllbnRUZWxlbWV0cnlQb3Rpb25zTWFzdGVyTm90ZUF0dGVtcHQS",
            "FgoOcG90aW9uX25hbWVfaWQYASABKAkSEwoLY2F1bGRyb25faWQYAiABKAkS",
            "FgoObWFzdGVyX25vdGVfaWQYAyABKAkSFQoNZ2VzdHVyZV9jb3VudBgEIAEo",
            "BRIVCg1nZXN0dXJlX3N0ZXBzGAUgAygJEhkKEW1hc3Rlcl9ub3RlX3N0YXJ0",
            "GAYgASgIEhwKFGdlc3R1cmVfYXR0ZW1wdF9zdGVwGAcgASgFEhcKD2dlc3R1",
            "cmVfc3VjY2VzcxgIIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttempt), global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttempt.Parser, new[]{ "PotionNameId", "CauldronId", "MasterNoteId", "GestureCount", "GestureSteps", "MasterNoteStart", "GestureAttemptStep", "GestureSuccess" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientTelemetryPotionsMasterNoteAttempt : pb::IMessage<ClientTelemetryPotionsMasterNoteAttempt> {
    private static readonly pb::MessageParser<ClientTelemetryPotionsMasterNoteAttempt> _parser = new pb::MessageParser<ClientTelemetryPotionsMasterNoteAttempt>(() => new ClientTelemetryPotionsMasterNoteAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientTelemetryPotionsMasterNoteAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttemptReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetryPotionsMasterNoteAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetryPotionsMasterNoteAttempt(ClientTelemetryPotionsMasterNoteAttempt other) : this() {
      potionNameId_ = other.potionNameId_;
      cauldronId_ = other.cauldronId_;
      masterNoteId_ = other.masterNoteId_;
      gestureCount_ = other.gestureCount_;
      gestureSteps_ = other.gestureSteps_.Clone();
      masterNoteStart_ = other.masterNoteStart_;
      gestureAttemptStep_ = other.gestureAttemptStep_;
      gestureSuccess_ = other.gestureSuccess_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetryPotionsMasterNoteAttempt Clone() {
      return new ClientTelemetryPotionsMasterNoteAttempt(this);
    }

    /// <summary>Field number for the "potion_name_id" field.</summary>
    public const int PotionNameIdFieldNumber = 1;
    private string potionNameId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PotionNameId {
      get { return potionNameId_; }
      set {
        potionNameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cauldron_id" field.</summary>
    public const int CauldronIdFieldNumber = 2;
    private string cauldronId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CauldronId {
      get { return cauldronId_; }
      set {
        cauldronId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "master_note_id" field.</summary>
    public const int MasterNoteIdFieldNumber = 3;
    private string masterNoteId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MasterNoteId {
      get { return masterNoteId_; }
      set {
        masterNoteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gesture_count" field.</summary>
    public const int GestureCountFieldNumber = 4;
    private int gestureCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GestureCount {
      get { return gestureCount_; }
      set {
        gestureCount_ = value;
      }
    }

    /// <summary>Field number for the "gesture_steps" field.</summary>
    public const int GestureStepsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_gestureSteps_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> gestureSteps_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GestureSteps {
      get { return gestureSteps_; }
    }

    /// <summary>Field number for the "master_note_start" field.</summary>
    public const int MasterNoteStartFieldNumber = 6;
    private bool masterNoteStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MasterNoteStart {
      get { return masterNoteStart_; }
      set {
        masterNoteStart_ = value;
      }
    }

    /// <summary>Field number for the "gesture_attempt_step" field.</summary>
    public const int GestureAttemptStepFieldNumber = 7;
    private int gestureAttemptStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GestureAttemptStep {
      get { return gestureAttemptStep_; }
      set {
        gestureAttemptStep_ = value;
      }
    }

    /// <summary>Field number for the "gesture_success" field.</summary>
    public const int GestureSuccessFieldNumber = 8;
    private bool gestureSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GestureSuccess {
      get { return gestureSuccess_; }
      set {
        gestureSuccess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientTelemetryPotionsMasterNoteAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientTelemetryPotionsMasterNoteAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PotionNameId != other.PotionNameId) return false;
      if (CauldronId != other.CauldronId) return false;
      if (MasterNoteId != other.MasterNoteId) return false;
      if (GestureCount != other.GestureCount) return false;
      if(!gestureSteps_.Equals(other.gestureSteps_)) return false;
      if (MasterNoteStart != other.MasterNoteStart) return false;
      if (GestureAttemptStep != other.GestureAttemptStep) return false;
      if (GestureSuccess != other.GestureSuccess) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PotionNameId.Length != 0) hash ^= PotionNameId.GetHashCode();
      if (CauldronId.Length != 0) hash ^= CauldronId.GetHashCode();
      if (MasterNoteId.Length != 0) hash ^= MasterNoteId.GetHashCode();
      if (GestureCount != 0) hash ^= GestureCount.GetHashCode();
      hash ^= gestureSteps_.GetHashCode();
      if (MasterNoteStart != false) hash ^= MasterNoteStart.GetHashCode();
      if (GestureAttemptStep != 0) hash ^= GestureAttemptStep.GetHashCode();
      if (GestureSuccess != false) hash ^= GestureSuccess.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PotionNameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PotionNameId);
      }
      if (CauldronId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CauldronId);
      }
      if (MasterNoteId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MasterNoteId);
      }
      if (GestureCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GestureCount);
      }
      gestureSteps_.WriteTo(output, _repeated_gestureSteps_codec);
      if (MasterNoteStart != false) {
        output.WriteRawTag(48);
        output.WriteBool(MasterNoteStart);
      }
      if (GestureAttemptStep != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GestureAttemptStep);
      }
      if (GestureSuccess != false) {
        output.WriteRawTag(64);
        output.WriteBool(GestureSuccess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PotionNameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PotionNameId);
      }
      if (CauldronId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CauldronId);
      }
      if (MasterNoteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterNoteId);
      }
      if (GestureCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GestureCount);
      }
      size += gestureSteps_.CalculateSize(_repeated_gestureSteps_codec);
      if (MasterNoteStart != false) {
        size += 1 + 1;
      }
      if (GestureAttemptStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GestureAttemptStep);
      }
      if (GestureSuccess != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientTelemetryPotionsMasterNoteAttempt other) {
      if (other == null) {
        return;
      }
      if (other.PotionNameId.Length != 0) {
        PotionNameId = other.PotionNameId;
      }
      if (other.CauldronId.Length != 0) {
        CauldronId = other.CauldronId;
      }
      if (other.MasterNoteId.Length != 0) {
        MasterNoteId = other.MasterNoteId;
      }
      if (other.GestureCount != 0) {
        GestureCount = other.GestureCount;
      }
      gestureSteps_.Add(other.gestureSteps_);
      if (other.MasterNoteStart != false) {
        MasterNoteStart = other.MasterNoteStart;
      }
      if (other.GestureAttemptStep != 0) {
        GestureAttemptStep = other.GestureAttemptStep;
      }
      if (other.GestureSuccess != false) {
        GestureSuccess = other.GestureSuccess;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PotionNameId = input.ReadString();
            break;
          }
          case 18: {
            CauldronId = input.ReadString();
            break;
          }
          case 26: {
            MasterNoteId = input.ReadString();
            break;
          }
          case 32: {
            GestureCount = input.ReadInt32();
            break;
          }
          case 42: {
            gestureSteps_.AddEntriesFrom(input, _repeated_gestureSteps_codec);
            break;
          }
          case 48: {
            MasterNoteStart = input.ReadBool();
            break;
          }
          case 56: {
            GestureAttemptStep = input.ReadInt32();
            break;
          }
          case 64: {
            GestureSuccess = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
