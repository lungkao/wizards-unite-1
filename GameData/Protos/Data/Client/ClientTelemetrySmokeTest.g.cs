// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientTelemetrySmokeTest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientTelemetrySmokeTest.proto</summary>
  public static partial class ClientTelemetrySmokeTestReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientTelemetrySmokeTest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientTelemetrySmokeTestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlTbW9rZVRl",
            "c3QucHJvdG8SFFdVUHJvdG9zLkRhdGEuQ2xpZW50IpABChhDbGllbnRUZWxl",
            "bWV0cnlTbW9rZVRlc3QSIAoYY3VycmVudF9ib3RfcHJvZ3JhbV9uYW1lGAEg",
            "ASgJEhIKCnRpbWVfc3RhcnQYAiABKAESEAoIdGltZV9lbmQYAyABKAESEgoK",
            "dGltZV9kZWx0YRgEIAEoARIYChBzbW9rZV90ZXN0X2NvdW50GAUgASgFYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientTelemetrySmokeTest), global::WUProtos.Data.Client.ClientTelemetrySmokeTest.Parser, new[]{ "CurrentBotProgramName", "TimeStart", "TimeEnd", "TimeDelta", "SmokeTestCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientTelemetrySmokeTest : pb::IMessage<ClientTelemetrySmokeTest> {
    private static readonly pb::MessageParser<ClientTelemetrySmokeTest> _parser = new pb::MessageParser<ClientTelemetrySmokeTest>(() => new ClientTelemetrySmokeTest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientTelemetrySmokeTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientTelemetrySmokeTestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetrySmokeTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetrySmokeTest(ClientTelemetrySmokeTest other) : this() {
      currentBotProgramName_ = other.currentBotProgramName_;
      timeStart_ = other.timeStart_;
      timeEnd_ = other.timeEnd_;
      timeDelta_ = other.timeDelta_;
      smokeTestCount_ = other.smokeTestCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetrySmokeTest Clone() {
      return new ClientTelemetrySmokeTest(this);
    }

    /// <summary>Field number for the "current_bot_program_name" field.</summary>
    public const int CurrentBotProgramNameFieldNumber = 1;
    private string currentBotProgramName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentBotProgramName {
      get { return currentBotProgramName_; }
      set {
        currentBotProgramName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_start" field.</summary>
    public const int TimeStartFieldNumber = 2;
    private double timeStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeStart {
      get { return timeStart_; }
      set {
        timeStart_ = value;
      }
    }

    /// <summary>Field number for the "time_end" field.</summary>
    public const int TimeEndFieldNumber = 3;
    private double timeEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeEnd {
      get { return timeEnd_; }
      set {
        timeEnd_ = value;
      }
    }

    /// <summary>Field number for the "time_delta" field.</summary>
    public const int TimeDeltaFieldNumber = 4;
    private double timeDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TimeDelta {
      get { return timeDelta_; }
      set {
        timeDelta_ = value;
      }
    }

    /// <summary>Field number for the "smoke_test_count" field.</summary>
    public const int SmokeTestCountFieldNumber = 5;
    private int smokeTestCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SmokeTestCount {
      get { return smokeTestCount_; }
      set {
        smokeTestCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientTelemetrySmokeTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientTelemetrySmokeTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentBotProgramName != other.CurrentBotProgramName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeStart, other.TimeStart)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeEnd, other.TimeEnd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeDelta, other.TimeDelta)) return false;
      if (SmokeTestCount != other.SmokeTestCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentBotProgramName.Length != 0) hash ^= CurrentBotProgramName.GetHashCode();
      if (TimeStart != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeStart);
      if (TimeEnd != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeEnd);
      if (TimeDelta != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeDelta);
      if (SmokeTestCount != 0) hash ^= SmokeTestCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentBotProgramName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CurrentBotProgramName);
      }
      if (TimeStart != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TimeStart);
      }
      if (TimeEnd != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TimeEnd);
      }
      if (TimeDelta != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TimeDelta);
      }
      if (SmokeTestCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SmokeTestCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentBotProgramName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentBotProgramName);
      }
      if (TimeStart != 0D) {
        size += 1 + 8;
      }
      if (TimeEnd != 0D) {
        size += 1 + 8;
      }
      if (TimeDelta != 0D) {
        size += 1 + 8;
      }
      if (SmokeTestCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmokeTestCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientTelemetrySmokeTest other) {
      if (other == null) {
        return;
      }
      if (other.CurrentBotProgramName.Length != 0) {
        CurrentBotProgramName = other.CurrentBotProgramName;
      }
      if (other.TimeStart != 0D) {
        TimeStart = other.TimeStart;
      }
      if (other.TimeEnd != 0D) {
        TimeEnd = other.TimeEnd;
      }
      if (other.TimeDelta != 0D) {
        TimeDelta = other.TimeDelta;
      }
      if (other.SmokeTestCount != 0) {
        SmokeTestCount = other.SmokeTestCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CurrentBotProgramName = input.ReadString();
            break;
          }
          case 17: {
            TimeStart = input.ReadDouble();
            break;
          }
          case 25: {
            TimeEnd = input.ReadDouble();
            break;
          }
          case 33: {
            TimeDelta = input.ReadDouble();
            break;
          }
          case 40: {
            SmokeTestCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
