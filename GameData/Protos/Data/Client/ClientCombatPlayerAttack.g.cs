// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientCombatPlayerAttack.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientCombatPlayerAttack.proto</summary>
  public static partial class ClientCombatPlayerAttackReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientCombatPlayerAttack.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientCombatPlayerAttackReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRDb21iYXRQbGF5ZXJBdHRh",
            "Y2sucHJvdG8SFFdVUHJvdG9zLkRhdGEuQ2xpZW50ImsKGENsaWVudENvbWJh",
            "dFBsYXllckF0dGFjaxIXCg9lbmVteV9ib25lX25hbWUYASABKAkSGAoQdWlf",
            "dGFyZ2V0X3JhZGl1cxgCIAEoAhIcChRyZXRpY2xlX3RpbWVfdG9fZmlsbBgD",
            "IAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientCombatPlayerAttack), global::WUProtos.Data.Client.ClientCombatPlayerAttack.Parser, new[]{ "EnemyBoneName", "UiTargetRadius", "ReticleTimeToFill" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientCombatPlayerAttack : pb::IMessage<ClientCombatPlayerAttack> {
    private static readonly pb::MessageParser<ClientCombatPlayerAttack> _parser = new pb::MessageParser<ClientCombatPlayerAttack>(() => new ClientCombatPlayerAttack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientCombatPlayerAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientCombatPlayerAttackReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientCombatPlayerAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientCombatPlayerAttack(ClientCombatPlayerAttack other) : this() {
      enemyBoneName_ = other.enemyBoneName_;
      uiTargetRadius_ = other.uiTargetRadius_;
      reticleTimeToFill_ = other.reticleTimeToFill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientCombatPlayerAttack Clone() {
      return new ClientCombatPlayerAttack(this);
    }

    /// <summary>Field number for the "enemy_bone_name" field.</summary>
    public const int EnemyBoneNameFieldNumber = 1;
    private string enemyBoneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EnemyBoneName {
      get { return enemyBoneName_; }
      set {
        enemyBoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ui_target_radius" field.</summary>
    public const int UiTargetRadiusFieldNumber = 2;
    private float uiTargetRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UiTargetRadius {
      get { return uiTargetRadius_; }
      set {
        uiTargetRadius_ = value;
      }
    }

    /// <summary>Field number for the "reticle_time_to_fill" field.</summary>
    public const int ReticleTimeToFillFieldNumber = 3;
    private float reticleTimeToFill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReticleTimeToFill {
      get { return reticleTimeToFill_; }
      set {
        reticleTimeToFill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientCombatPlayerAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientCombatPlayerAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnemyBoneName != other.EnemyBoneName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UiTargetRadius, other.UiTargetRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReticleTimeToFill, other.ReticleTimeToFill)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnemyBoneName.Length != 0) hash ^= EnemyBoneName.GetHashCode();
      if (UiTargetRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UiTargetRadius);
      if (ReticleTimeToFill != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReticleTimeToFill);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnemyBoneName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EnemyBoneName);
      }
      if (UiTargetRadius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(UiTargetRadius);
      }
      if (ReticleTimeToFill != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ReticleTimeToFill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnemyBoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EnemyBoneName);
      }
      if (UiTargetRadius != 0F) {
        size += 1 + 4;
      }
      if (ReticleTimeToFill != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientCombatPlayerAttack other) {
      if (other == null) {
        return;
      }
      if (other.EnemyBoneName.Length != 0) {
        EnemyBoneName = other.EnemyBoneName;
      }
      if (other.UiTargetRadius != 0F) {
        UiTargetRadius = other.UiTargetRadius;
      }
      if (other.ReticleTimeToFill != 0F) {
        ReticleTimeToFill = other.ReticleTimeToFill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EnemyBoneName = input.ReadString();
            break;
          }
          case 21: {
            UiTargetRadius = input.ReadFloat();
            break;
          }
          case 29: {
            ReticleTimeToFill = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
