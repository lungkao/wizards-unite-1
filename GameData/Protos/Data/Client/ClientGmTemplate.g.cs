// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientGmTemplate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientGmTemplate.proto</summary>
  public static partial class ClientGmTemplateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientGmTemplate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientGmTemplateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRHbVRlbXBsYXRlLnByb3Rv",
            "EhRXVVByb3Rvcy5EYXRhLkNsaWVudBoxV1VQcm90b3MvRGF0YS9DbGllbnQv",
            "Q2xpZW50Q29sbGVjdGlvbkZhbWlseS5wcm90bxovV1VQcm90b3MvRGF0YS9D",
            "bGllbnQvQ2xpZW50Q29sbGVjdGlvbkl0ZW0ucHJvdG8aMFdVUHJvdG9zL0Rh",
            "dGEvQ2xpZW50L0NsaWVudFdhbGtib3hUZW1wbGF0ZS5wcm90bxoqV1VQcm90",
            "b3MvRGF0YS9DbGllbnQvQ2xpZW50RW5jb3VudGVyLnByb3RvGi5XVVByb3Rv",
            "cy9EYXRhL0NsaWVudC9DbGllbnRFbmNvdW50ZXJUeXBlLnByb3RvGihXVVBy",
            "b3Rvcy9EYXRhL0NsaWVudC9DbGllbnRQb3J0a2V5LnByb3RvGipXVVByb3Rv",
            "cy9EYXRhL0NsaWVudC9DbGllbnRWYXVsdEl0ZW0ucHJvdG8aK1dVUHJvdG9z",
            "L0RhdGEvQ2xpZW50L0NsaWVudEdhbWVDb25maWcucHJvdG8aKldVUHJvdG9z",
            "L0RhdGEvQ2xpZW50L0NsaWVudFN0b3JlUGFjay5wcm90bxomV1VQcm90b3Mv",
            "RGF0YS9DbGllbnQvQ2xpZW50U3BlbGwucHJvdG8aL1dVUHJvdG9zL0RhdGEv",
            "Q2xpZW50L0NsaWVudFByb3RlZ29QYXR0ZXJuLnByb3RvGjBXVVByb3Rvcy9E",
            "YXRhL0NsaWVudC9DbGllbnRDaGFtYmVyVGVtcGxhdGUucHJvdG8aLFdVUHJv",
            "dG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlYW1Db250cm9sLnByb3RvGixXVVBy",
            "b3Rvcy9EYXRhL0NsaWVudC9DbGllbnRTdG9yZUNvbmZpZy5wcm90bxoxV1VQ",
            "cm90b3MvRGF0YS9DbGllbnQvQ2xpZW50U3RvcmVTdWJjYXRlZ29yeS5wcm90",
            "bxonV1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50SGFwdGljLnByb3RvGitX",
            "VVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRQcm9mZXNzaW9uLnByb3RvGi5X",
            "VVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRCb251c0NhdGVnb3J5LnByb3Rv",
            "Gi5XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRWYXVsdENhdGVnb3J5LnBy",
            "b3RvGi5XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRQcm9maWxlQ29uZmln",
            "LnByb3RvGi5XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRNYXBJbmdyZWRp",
            "ZW50LnByb3RvGitXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRNYXBBYmls",
            "aXR5LnByb3RvGitXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRTdG9yeWJv",
            "YXJkLnByb3RvGihXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRScGdzdGF0",
            "LnByb3RvGi5XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRScGdzdGF0c0Js",
            "b2NrLnByb3RvGjJXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRTZWxmaWVB",
            "dmF0YXJBc3NldC5wcm90bxolV1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50",
            "QnVmZi5wcm90bxowV1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50T3V0cG9z",
            "dFRlbXBsYXRlLnByb3RvGi9XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRD",
            "aGFsbGVuZ2VCb251cy5wcm90bxonV1VQcm90b3MvRGF0YS9DbGllbnQvQ2xp",
            "ZW50UmVjaXBlLnByb3RvGitXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRN",
            "YXN0ZXJOb3RlLnByb3RvGiZXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRR",
            "dWVzdC5wcm90bxo7V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50RGFpbHlS",
            "ZXdhcmRNb250aGx5U2NoZWR1bGUucHJvdG8i3xEKEENsaWVudEdtVGVtcGxh",
            "dGUSSQoRY29sbGVjdGlvbl9mYW1pbHkYASABKAsyLC5XVVByb3Rvcy5EYXRh",
            "LkNsaWVudC5DbGllbnRDb2xsZWN0aW9uRmFtaWx5SAASRQoPY29sbGVjdGlv",
            "bl9pdGVtGAIgASgLMiouV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50Q29s",
            "bGVjdGlvbkl0ZW1IABJHChB3YWxrYm94X3RlbXBsYXRlGAMgASgLMisuV1VQ",
            "cm90b3MuRGF0YS5DbGllbnQuQ2xpZW50V2Fsa2JveFRlbXBsYXRlSAASOgoJ",
            "ZW5jb3VudGVyGAQgASgLMiUuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50",
            "RW5jb3VudGVySAASNgoHcG9ydGtleRgFIAEoCzIjLldVUHJvdG9zLkRhdGEu",
            "Q2xpZW50LkNsaWVudFBvcnRrZXlIABI7Cgp2YXVsdF9pdGVtGAYgASgLMiUu",
            "V1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VmF1bHRJdGVtSAASPQoLZ2Ft",
            "ZV9jb25maWcYByABKAsyJi5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRH",
            "YW1lQ29uZmlnSAASOwoKc3RvcmVfcGFjaxgIIAEoCzIlLldVUHJvdG9zLkRh",
            "dGEuQ2xpZW50LkNsaWVudFN0b3JlUGFja0gAEjIKBXNwZWxsGAkgASgLMiEu",
            "V1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50U3BlbGxIABJFCg9wcm90ZWdv",
            "X3BhdHRlcm4YCiABKAsyKi5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRQ",
            "cm90ZWdvUGF0dGVybkgAEkcKEGNoYW1iZXJfdGVtcGxhdGUYCyABKAsyKy5X",
            "VVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRDaGFtYmVyVGVtcGxhdGVIABJC",
            "Cg9jb2xsZWN0aW9uX3BhZ2UYDCABKAsyJy5XVVByb3Rvcy5EYXRhLkNsaWVu",
            "dC5DbGllbnRUZWFtQ29udHJvbEgAEj8KDHRlYW1fY29udHJvbBgNIAEoCzIn",
            "LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlYW1Db250cm9sSAASPwoM",
            "c3RvcmVfY29uZmlnGA4gASgLMicuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xp",
            "ZW50U3RvcmVDb25maWdIABJJChFzdG9yZV9zdWJjYXRlZ29yeRgPIAEoCzIs",
            "LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFN0b3JlU3ViY2F0ZWdvcnlI",
            "ABI0CgZoYXB0aWMYECABKAsyIi5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGll",
            "bnRIYXB0aWNIABI8Cgpwcm9mZXNzaW9uGBEgASgLMiYuV1VQcm90b3MuRGF0",
            "YS5DbGllbnQuQ2xpZW50UHJvZmVzc2lvbkgAEkMKDmJvbnVzX2NhdGVnb3J5",
            "GBIgASgLMikuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50Qm9udXNDYXRl",
            "Z29yeUgAEkMKDnZhdWx0X2NhdGVnb3J5GBMgASgLMikuV1VQcm90b3MuRGF0",
            "YS5DbGllbnQuQ2xpZW50VmF1bHRDYXRlZ29yeUgAEkMKDnByb2ZpbGVfY29u",
            "ZmlnGBQgASgLMikuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50UHJvZmls",
            "ZUNvbmZpZ0gAEkMKDm1hcF9pbmdyZWRpZW50GBUgASgLMikuV1VQcm90b3Mu",
            "RGF0YS5DbGllbnQuQ2xpZW50TWFwSW5ncmVkaWVudEgAEj0KC21hcF9hYmls",
            "aXR5GBYgASgLMiYuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50TWFwQWJp",
            "bGl0eUgAEjwKCnN0b3J5Ym9hcmQYFyABKAsyJi5XVVByb3Rvcy5EYXRhLkNs",
            "aWVudC5DbGllbnRTdG9yeWJvYXJkSAASNgoHcnBnc3RhdBgYIAEoCzIjLldV",
            "UHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFJwZ3N0YXRIABJDCg5ycGdzdGF0",
            "c19ibG9jaxgZIAEoCzIpLldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFJw",
            "Z3N0YXRzQmxvY2tIABJMChNzZWxmaWVfYXZhdGFyX2Fzc2V0GBogASgLMi0u",
            "V1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50U2VsZmllQXZhdGFyQXNzZXRI",
            "ABIwCgRidWZmGBsgASgLMiAuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50",
            "QnVmZkgAEkcKEG91dHBvc3RfdGVtcGxhdGUYHSABKAsyKy5XVVByb3Rvcy5E",
            "YXRhLkNsaWVudC5DbGllbnRPdXRwb3N0VGVtcGxhdGVIABJFCg9jaGFsbGVu",
            "Z2VfYm9udXMYHiABKAsyKi5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRD",
            "aGFsbGVuZ2VCb251c0gAEjQKBnJlY2lwZRgfIAEoCzIiLldVUHJvdG9zLkRh",
            "dGEuQ2xpZW50LkNsaWVudFJlY2lwZUgAEj0KC21hc3Rlcl9ub3RlGCAgASgL",
            "MiYuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50TWFzdGVyTm90ZUgAEjIK",
            "BXF1ZXN0GCEgASgLMiEuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50UXVl",
            "c3RIABJfCh1kYWlseV9yZXdhcmRfbW9udGhseV9zY2hlZHVsZRgiIAEoCzI2",
            "LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudERhaWx5UmV3YXJkTW9udGhs",
            "eVNjaGVkdWxlSAASQwoOZW5jb3VudGVyX3R5cGUYIyABKAsyKS5XVVByb3Rv",
            "cy5EYXRhLkNsaWVudC5DbGllbnRFbmNvdW50ZXJUeXBlSABCDQoLTWVzc2Fn",
            "ZVR5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Client.ClientCollectionFamilyReflection.Descriptor, global::WUProtos.Data.Client.ClientCollectionItemReflection.Descriptor, global::WUProtos.Data.Client.ClientWalkboxTemplateReflection.Descriptor, global::WUProtos.Data.Client.ClientEncounterReflection.Descriptor, global::WUProtos.Data.Client.ClientEncounterTypeReflection.Descriptor, global::WUProtos.Data.Client.ClientPortkeyReflection.Descriptor, global::WUProtos.Data.Client.ClientVaultItemReflection.Descriptor, global::WUProtos.Data.Client.ClientGameConfigReflection.Descriptor, global::WUProtos.Data.Client.ClientStorePackReflection.Descriptor, global::WUProtos.Data.Client.ClientSpellReflection.Descriptor, global::WUProtos.Data.Client.ClientProtegoPatternReflection.Descriptor, global::WUProtos.Data.Client.ClientChamberTemplateReflection.Descriptor, global::WUProtos.Data.Client.ClientTeamControlReflection.Descriptor, global::WUProtos.Data.Client.ClientStoreConfigReflection.Descriptor, global::WUProtos.Data.Client.ClientStoreSubcategoryReflection.Descriptor, global::WUProtos.Data.Client.ClientHapticReflection.Descriptor, global::WUProtos.Data.Client.ClientProfessionReflection.Descriptor, global::WUProtos.Data.Client.ClientBonusCategoryReflection.Descriptor, global::WUProtos.Data.Client.ClientVaultCategoryReflection.Descriptor, global::WUProtos.Data.Client.ClientProfileConfigReflection.Descriptor, global::WUProtos.Data.Client.ClientMapIngredientReflection.Descriptor, global::WUProtos.Data.Client.ClientMapAbilityReflection.Descriptor, global::WUProtos.Data.Client.ClientStoryboardReflection.Descriptor, global::WUProtos.Data.Client.ClientRpgstatReflection.Descriptor, global::WUProtos.Data.Client.ClientRpgstatsBlockReflection.Descriptor, global::WUProtos.Data.Client.ClientSelfieAvatarAssetReflection.Descriptor, global::WUProtos.Data.Client.ClientBuffReflection.Descriptor, global::WUProtos.Data.Client.ClientOutpostTemplateReflection.Descriptor, global::WUProtos.Data.Client.ClientChallengeBonusReflection.Descriptor, global::WUProtos.Data.Client.ClientRecipeReflection.Descriptor, global::WUProtos.Data.Client.ClientMasterNoteReflection.Descriptor, global::WUProtos.Data.Client.ClientQuestReflection.Descriptor, global::WUProtos.Data.Client.ClientDailyRewardMonthlyScheduleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientGmTemplate), global::WUProtos.Data.Client.ClientGmTemplate.Parser, new[]{ "CollectionFamily", "CollectionItem", "WalkboxTemplate", "Encounter", "Portkey", "VaultItem", "GameConfig", "StorePack", "Spell", "ProtegoPattern", "ChamberTemplate", "CollectionPage", "TeamControl", "StoreConfig", "StoreSubcategory", "Haptic", "Profession", "BonusCategory", "VaultCategory", "ProfileConfig", "MapIngredient", "MapAbility", "Storyboard", "Rpgstat", "RpgstatsBlock", "SelfieAvatarAsset", "Buff", "OutpostTemplate", "ChallengeBonus", "Recipe", "MasterNote", "Quest", "DailyRewardMonthlySchedule", "EncounterType" }, new[]{ "MessageType" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientGmTemplate : pb::IMessage<ClientGmTemplate> {
    private static readonly pb::MessageParser<ClientGmTemplate> _parser = new pb::MessageParser<ClientGmTemplate>(() => new ClientGmTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientGmTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientGmTemplateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGmTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGmTemplate(ClientGmTemplate other) : this() {
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.CollectionFamily:
          CollectionFamily = other.CollectionFamily.Clone();
          break;
        case MessageTypeOneofCase.CollectionItem:
          CollectionItem = other.CollectionItem.Clone();
          break;
        case MessageTypeOneofCase.WalkboxTemplate:
          WalkboxTemplate = other.WalkboxTemplate.Clone();
          break;
        case MessageTypeOneofCase.Encounter:
          Encounter = other.Encounter.Clone();
          break;
        case MessageTypeOneofCase.Portkey:
          Portkey = other.Portkey.Clone();
          break;
        case MessageTypeOneofCase.VaultItem:
          VaultItem = other.VaultItem.Clone();
          break;
        case MessageTypeOneofCase.GameConfig:
          GameConfig = other.GameConfig.Clone();
          break;
        case MessageTypeOneofCase.StorePack:
          StorePack = other.StorePack.Clone();
          break;
        case MessageTypeOneofCase.Spell:
          Spell = other.Spell.Clone();
          break;
        case MessageTypeOneofCase.ProtegoPattern:
          ProtegoPattern = other.ProtegoPattern.Clone();
          break;
        case MessageTypeOneofCase.ChamberTemplate:
          ChamberTemplate = other.ChamberTemplate.Clone();
          break;
        case MessageTypeOneofCase.CollectionPage:
          CollectionPage = other.CollectionPage.Clone();
          break;
        case MessageTypeOneofCase.TeamControl:
          TeamControl = other.TeamControl.Clone();
          break;
        case MessageTypeOneofCase.StoreConfig:
          StoreConfig = other.StoreConfig.Clone();
          break;
        case MessageTypeOneofCase.StoreSubcategory:
          StoreSubcategory = other.StoreSubcategory.Clone();
          break;
        case MessageTypeOneofCase.Haptic:
          Haptic = other.Haptic.Clone();
          break;
        case MessageTypeOneofCase.Profession:
          Profession = other.Profession.Clone();
          break;
        case MessageTypeOneofCase.BonusCategory:
          BonusCategory = other.BonusCategory.Clone();
          break;
        case MessageTypeOneofCase.VaultCategory:
          VaultCategory = other.VaultCategory.Clone();
          break;
        case MessageTypeOneofCase.ProfileConfig:
          ProfileConfig = other.ProfileConfig.Clone();
          break;
        case MessageTypeOneofCase.MapIngredient:
          MapIngredient = other.MapIngredient.Clone();
          break;
        case MessageTypeOneofCase.MapAbility:
          MapAbility = other.MapAbility.Clone();
          break;
        case MessageTypeOneofCase.Storyboard:
          Storyboard = other.Storyboard.Clone();
          break;
        case MessageTypeOneofCase.Rpgstat:
          Rpgstat = other.Rpgstat.Clone();
          break;
        case MessageTypeOneofCase.RpgstatsBlock:
          RpgstatsBlock = other.RpgstatsBlock.Clone();
          break;
        case MessageTypeOneofCase.SelfieAvatarAsset:
          SelfieAvatarAsset = other.SelfieAvatarAsset.Clone();
          break;
        case MessageTypeOneofCase.Buff:
          Buff = other.Buff.Clone();
          break;
        case MessageTypeOneofCase.OutpostTemplate:
          OutpostTemplate = other.OutpostTemplate.Clone();
          break;
        case MessageTypeOneofCase.ChallengeBonus:
          ChallengeBonus = other.ChallengeBonus.Clone();
          break;
        case MessageTypeOneofCase.Recipe:
          Recipe = other.Recipe.Clone();
          break;
        case MessageTypeOneofCase.MasterNote:
          MasterNote = other.MasterNote.Clone();
          break;
        case MessageTypeOneofCase.Quest:
          Quest = other.Quest.Clone();
          break;
        case MessageTypeOneofCase.DailyRewardMonthlySchedule:
          DailyRewardMonthlySchedule = other.DailyRewardMonthlySchedule.Clone();
          break;
        case MessageTypeOneofCase.EncounterType:
          EncounterType = other.EncounterType.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGmTemplate Clone() {
      return new ClientGmTemplate(this);
    }

    /// <summary>Field number for the "collection_family" field.</summary>
    public const int CollectionFamilyFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientCollectionFamily CollectionFamily {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionFamily ? (global::WUProtos.Data.Client.ClientCollectionFamily) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionFamily;
      }
    }

    /// <summary>Field number for the "collection_item" field.</summary>
    public const int CollectionItemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientCollectionItem CollectionItem {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionItem ? (global::WUProtos.Data.Client.ClientCollectionItem) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionItem;
      }
    }

    /// <summary>Field number for the "walkbox_template" field.</summary>
    public const int WalkboxTemplateFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientWalkboxTemplate WalkboxTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate ? (global::WUProtos.Data.Client.ClientWalkboxTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.WalkboxTemplate;
      }
    }

    /// <summary>Field number for the "encounter" field.</summary>
    public const int EncounterFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientEncounter Encounter {
      get { return messageTypeCase_ == MessageTypeOneofCase.Encounter ? (global::WUProtos.Data.Client.ClientEncounter) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Encounter;
      }
    }

    /// <summary>Field number for the "portkey" field.</summary>
    public const int PortkeyFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientPortkey Portkey {
      get { return messageTypeCase_ == MessageTypeOneofCase.Portkey ? (global::WUProtos.Data.Client.ClientPortkey) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Portkey;
      }
    }

    /// <summary>Field number for the "vault_item" field.</summary>
    public const int VaultItemFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientVaultItem VaultItem {
      get { return messageTypeCase_ == MessageTypeOneofCase.VaultItem ? (global::WUProtos.Data.Client.ClientVaultItem) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.VaultItem;
      }
    }

    /// <summary>Field number for the "game_config" field.</summary>
    public const int GameConfigFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientGameConfig GameConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.GameConfig ? (global::WUProtos.Data.Client.ClientGameConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.GameConfig;
      }
    }

    /// <summary>Field number for the "store_pack" field.</summary>
    public const int StorePackFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientStorePack StorePack {
      get { return messageTypeCase_ == MessageTypeOneofCase.StorePack ? (global::WUProtos.Data.Client.ClientStorePack) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StorePack;
      }
    }

    /// <summary>Field number for the "spell" field.</summary>
    public const int SpellFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientSpell Spell {
      get { return messageTypeCase_ == MessageTypeOneofCase.Spell ? (global::WUProtos.Data.Client.ClientSpell) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Spell;
      }
    }

    /// <summary>Field number for the "protego_pattern" field.</summary>
    public const int ProtegoPatternFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientProtegoPattern ProtegoPattern {
      get { return messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern ? (global::WUProtos.Data.Client.ClientProtegoPattern) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ProtegoPattern;
      }
    }

    /// <summary>Field number for the "chamber_template" field.</summary>
    public const int ChamberTemplateFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientChamberTemplate ChamberTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate ? (global::WUProtos.Data.Client.ClientChamberTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChamberTemplate;
      }
    }

    /// <summary>Field number for the "collection_page" field.</summary>
    public const int CollectionPageFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTeamControl CollectionPage {
      get { return messageTypeCase_ == MessageTypeOneofCase.CollectionPage ? (global::WUProtos.Data.Client.ClientTeamControl) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.CollectionPage;
      }
    }

    /// <summary>Field number for the "team_control" field.</summary>
    public const int TeamControlFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTeamControl TeamControl {
      get { return messageTypeCase_ == MessageTypeOneofCase.TeamControl ? (global::WUProtos.Data.Client.ClientTeamControl) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.TeamControl;
      }
    }

    /// <summary>Field number for the "store_config" field.</summary>
    public const int StoreConfigFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientStoreConfig StoreConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.StoreConfig ? (global::WUProtos.Data.Client.ClientStoreConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StoreConfig;
      }
    }

    /// <summary>Field number for the "store_subcategory" field.</summary>
    public const int StoreSubcategoryFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientStoreSubcategory StoreSubcategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory ? (global::WUProtos.Data.Client.ClientStoreSubcategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.StoreSubcategory;
      }
    }

    /// <summary>Field number for the "haptic" field.</summary>
    public const int HapticFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientHaptic Haptic {
      get { return messageTypeCase_ == MessageTypeOneofCase.Haptic ? (global::WUProtos.Data.Client.ClientHaptic) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Haptic;
      }
    }

    /// <summary>Field number for the "profession" field.</summary>
    public const int ProfessionFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientProfession Profession {
      get { return messageTypeCase_ == MessageTypeOneofCase.Profession ? (global::WUProtos.Data.Client.ClientProfession) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Profession;
      }
    }

    /// <summary>Field number for the "bonus_category" field.</summary>
    public const int BonusCategoryFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientBonusCategory BonusCategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.BonusCategory ? (global::WUProtos.Data.Client.ClientBonusCategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.BonusCategory;
      }
    }

    /// <summary>Field number for the "vault_category" field.</summary>
    public const int VaultCategoryFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientVaultCategory VaultCategory {
      get { return messageTypeCase_ == MessageTypeOneofCase.VaultCategory ? (global::WUProtos.Data.Client.ClientVaultCategory) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.VaultCategory;
      }
    }

    /// <summary>Field number for the "profile_config" field.</summary>
    public const int ProfileConfigFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientProfileConfig ProfileConfig {
      get { return messageTypeCase_ == MessageTypeOneofCase.ProfileConfig ? (global::WUProtos.Data.Client.ClientProfileConfig) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ProfileConfig;
      }
    }

    /// <summary>Field number for the "map_ingredient" field.</summary>
    public const int MapIngredientFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientMapIngredient MapIngredient {
      get { return messageTypeCase_ == MessageTypeOneofCase.MapIngredient ? (global::WUProtos.Data.Client.ClientMapIngredient) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MapIngredient;
      }
    }

    /// <summary>Field number for the "map_ability" field.</summary>
    public const int MapAbilityFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientMapAbility MapAbility {
      get { return messageTypeCase_ == MessageTypeOneofCase.MapAbility ? (global::WUProtos.Data.Client.ClientMapAbility) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MapAbility;
      }
    }

    /// <summary>Field number for the "storyboard" field.</summary>
    public const int StoryboardFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientStoryboard Storyboard {
      get { return messageTypeCase_ == MessageTypeOneofCase.Storyboard ? (global::WUProtos.Data.Client.ClientStoryboard) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Storyboard;
      }
    }

    /// <summary>Field number for the "rpgstat" field.</summary>
    public const int RpgstatFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientRpgstat Rpgstat {
      get { return messageTypeCase_ == MessageTypeOneofCase.Rpgstat ? (global::WUProtos.Data.Client.ClientRpgstat) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Rpgstat;
      }
    }

    /// <summary>Field number for the "rpgstats_block" field.</summary>
    public const int RpgstatsBlockFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientRpgstatsBlock RpgstatsBlock {
      get { return messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock ? (global::WUProtos.Data.Client.ClientRpgstatsBlock) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.RpgstatsBlock;
      }
    }

    /// <summary>Field number for the "selfie_avatar_asset" field.</summary>
    public const int SelfieAvatarAssetFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientSelfieAvatarAsset SelfieAvatarAsset {
      get { return messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset ? (global::WUProtos.Data.Client.ClientSelfieAvatarAsset) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.SelfieAvatarAsset;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientBuff Buff {
      get { return messageTypeCase_ == MessageTypeOneofCase.Buff ? (global::WUProtos.Data.Client.ClientBuff) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Buff;
      }
    }

    /// <summary>Field number for the "outpost_template" field.</summary>
    public const int OutpostTemplateFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientOutpostTemplate OutpostTemplate {
      get { return messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate ? (global::WUProtos.Data.Client.ClientOutpostTemplate) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.OutpostTemplate;
      }
    }

    /// <summary>Field number for the "challenge_bonus" field.</summary>
    public const int ChallengeBonusFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientChallengeBonus ChallengeBonus {
      get { return messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus ? (global::WUProtos.Data.Client.ClientChallengeBonus) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.ChallengeBonus;
      }
    }

    /// <summary>Field number for the "recipe" field.</summary>
    public const int RecipeFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientRecipe Recipe {
      get { return messageTypeCase_ == MessageTypeOneofCase.Recipe ? (global::WUProtos.Data.Client.ClientRecipe) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Recipe;
      }
    }

    /// <summary>Field number for the "master_note" field.</summary>
    public const int MasterNoteFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientMasterNote MasterNote {
      get { return messageTypeCase_ == MessageTypeOneofCase.MasterNote ? (global::WUProtos.Data.Client.ClientMasterNote) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.MasterNote;
      }
    }

    /// <summary>Field number for the "quest" field.</summary>
    public const int QuestFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientQuest Quest {
      get { return messageTypeCase_ == MessageTypeOneofCase.Quest ? (global::WUProtos.Data.Client.ClientQuest) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.Quest;
      }
    }

    /// <summary>Field number for the "daily_reward_monthly_schedule" field.</summary>
    public const int DailyRewardMonthlyScheduleFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientDailyRewardMonthlySchedule DailyRewardMonthlySchedule {
      get { return messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule ? (global::WUProtos.Data.Client.ClientDailyRewardMonthlySchedule) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.DailyRewardMonthlySchedule;
      }
    }

    /// <summary>Field number for the "encounter_type" field.</summary>
    public const int EncounterTypeFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientEncounterType EncounterType {
      get { return messageTypeCase_ == MessageTypeOneofCase.EncounterType ? (global::WUProtos.Data.Client.ClientEncounterType) messageType_ : null; }
      set {
        messageType_ = value;
        messageTypeCase_ = value == null ? MessageTypeOneofCase.None : MessageTypeOneofCase.EncounterType;
      }
    }

    private object messageType_;
    /// <summary>Enum of possible cases for the "MessageType" oneof.</summary>
    public enum MessageTypeOneofCase {
      None = 0,
      CollectionFamily = 1,
      CollectionItem = 2,
      WalkboxTemplate = 3,
      Encounter = 4,
      Portkey = 5,
      VaultItem = 6,
      GameConfig = 7,
      StorePack = 8,
      Spell = 9,
      ProtegoPattern = 10,
      ChamberTemplate = 11,
      CollectionPage = 12,
      TeamControl = 13,
      StoreConfig = 14,
      StoreSubcategory = 15,
      Haptic = 16,
      Profession = 17,
      BonusCategory = 18,
      VaultCategory = 19,
      ProfileConfig = 20,
      MapIngredient = 21,
      MapAbility = 22,
      Storyboard = 23,
      Rpgstat = 24,
      RpgstatsBlock = 25,
      SelfieAvatarAsset = 26,
      Buff = 27,
      OutpostTemplate = 29,
      ChallengeBonus = 30,
      Recipe = 31,
      MasterNote = 32,
      Quest = 33,
      DailyRewardMonthlySchedule = 34,
      EncounterType = 35,
    }
    private MessageTypeOneofCase messageTypeCase_ = MessageTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageTypeOneofCase MessageTypeCase {
      get { return messageTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessageType() {
      messageTypeCase_ = MessageTypeOneofCase.None;
      messageType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientGmTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientGmTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CollectionFamily, other.CollectionFamily)) return false;
      if (!object.Equals(CollectionItem, other.CollectionItem)) return false;
      if (!object.Equals(WalkboxTemplate, other.WalkboxTemplate)) return false;
      if (!object.Equals(Encounter, other.Encounter)) return false;
      if (!object.Equals(Portkey, other.Portkey)) return false;
      if (!object.Equals(VaultItem, other.VaultItem)) return false;
      if (!object.Equals(GameConfig, other.GameConfig)) return false;
      if (!object.Equals(StorePack, other.StorePack)) return false;
      if (!object.Equals(Spell, other.Spell)) return false;
      if (!object.Equals(ProtegoPattern, other.ProtegoPattern)) return false;
      if (!object.Equals(ChamberTemplate, other.ChamberTemplate)) return false;
      if (!object.Equals(CollectionPage, other.CollectionPage)) return false;
      if (!object.Equals(TeamControl, other.TeamControl)) return false;
      if (!object.Equals(StoreConfig, other.StoreConfig)) return false;
      if (!object.Equals(StoreSubcategory, other.StoreSubcategory)) return false;
      if (!object.Equals(Haptic, other.Haptic)) return false;
      if (!object.Equals(Profession, other.Profession)) return false;
      if (!object.Equals(BonusCategory, other.BonusCategory)) return false;
      if (!object.Equals(VaultCategory, other.VaultCategory)) return false;
      if (!object.Equals(ProfileConfig, other.ProfileConfig)) return false;
      if (!object.Equals(MapIngredient, other.MapIngredient)) return false;
      if (!object.Equals(MapAbility, other.MapAbility)) return false;
      if (!object.Equals(Storyboard, other.Storyboard)) return false;
      if (!object.Equals(Rpgstat, other.Rpgstat)) return false;
      if (!object.Equals(RpgstatsBlock, other.RpgstatsBlock)) return false;
      if (!object.Equals(SelfieAvatarAsset, other.SelfieAvatarAsset)) return false;
      if (!object.Equals(Buff, other.Buff)) return false;
      if (!object.Equals(OutpostTemplate, other.OutpostTemplate)) return false;
      if (!object.Equals(ChallengeBonus, other.ChallengeBonus)) return false;
      if (!object.Equals(Recipe, other.Recipe)) return false;
      if (!object.Equals(MasterNote, other.MasterNote)) return false;
      if (!object.Equals(Quest, other.Quest)) return false;
      if (!object.Equals(DailyRewardMonthlySchedule, other.DailyRewardMonthlySchedule)) return false;
      if (!object.Equals(EncounterType, other.EncounterType)) return false;
      if (MessageTypeCase != other.MessageTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) hash ^= CollectionFamily.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) hash ^= CollectionItem.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) hash ^= WalkboxTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) hash ^= Encounter.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) hash ^= Portkey.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) hash ^= VaultItem.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) hash ^= GameConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) hash ^= StorePack.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) hash ^= Spell.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) hash ^= ProtegoPattern.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) hash ^= ChamberTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) hash ^= CollectionPage.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) hash ^= TeamControl.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) hash ^= StoreConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) hash ^= StoreSubcategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) hash ^= Haptic.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) hash ^= Profession.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) hash ^= BonusCategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) hash ^= VaultCategory.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) hash ^= ProfileConfig.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) hash ^= MapIngredient.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) hash ^= MapAbility.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) hash ^= Storyboard.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) hash ^= Rpgstat.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) hash ^= RpgstatsBlock.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) hash ^= SelfieAvatarAsset.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) hash ^= Buff.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) hash ^= OutpostTemplate.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) hash ^= ChallengeBonus.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) hash ^= Recipe.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) hash ^= MasterNote.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) hash ^= Quest.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) hash ^= DailyRewardMonthlySchedule.GetHashCode();
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) hash ^= EncounterType.GetHashCode();
      hash ^= (int) messageTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
        output.WriteRawTag(10);
        output.WriteMessage(CollectionFamily);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
        output.WriteRawTag(18);
        output.WriteMessage(CollectionItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
        output.WriteRawTag(26);
        output.WriteMessage(WalkboxTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
        output.WriteRawTag(34);
        output.WriteMessage(Encounter);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
        output.WriteRawTag(42);
        output.WriteMessage(Portkey);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
        output.WriteRawTag(50);
        output.WriteMessage(VaultItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
        output.WriteRawTag(58);
        output.WriteMessage(GameConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
        output.WriteRawTag(66);
        output.WriteMessage(StorePack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
        output.WriteRawTag(74);
        output.WriteMessage(Spell);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
        output.WriteRawTag(82);
        output.WriteMessage(ProtegoPattern);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
        output.WriteRawTag(90);
        output.WriteMessage(ChamberTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
        output.WriteRawTag(98);
        output.WriteMessage(CollectionPage);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
        output.WriteRawTag(106);
        output.WriteMessage(TeamControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
        output.WriteRawTag(114);
        output.WriteMessage(StoreConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
        output.WriteRawTag(122);
        output.WriteMessage(StoreSubcategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Haptic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Profession);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(BonusCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(VaultCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ProfileConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MapIngredient);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MapAbility);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Storyboard);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Rpgstat);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(RpgstatsBlock);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(SelfieAvatarAsset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Buff);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(OutpostTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ChallengeBonus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Recipe);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(MasterNote);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Quest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(DailyRewardMonthlySchedule);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(EncounterType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamily);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WalkboxTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Encounter);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portkey);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultItem);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StorePack);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spell);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProtegoPattern);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChamberTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionPage);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamControl);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StoreConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StoreSubcategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Haptic);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Profession);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VaultCategory);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileConfig);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapIngredient);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapAbility);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Storyboard);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rpgstat);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RpgstatsBlock);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelfieAvatarAsset);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutpostTemplate);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChallengeBonus);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Recipe);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MasterNote);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Quest);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DailyRewardMonthlySchedule);
      }
      if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncounterType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientGmTemplate other) {
      if (other == null) {
        return;
      }
      switch (other.MessageTypeCase) {
        case MessageTypeOneofCase.CollectionFamily:
          if (CollectionFamily == null) {
            CollectionFamily = new global::WUProtos.Data.Client.ClientCollectionFamily();
          }
          CollectionFamily.MergeFrom(other.CollectionFamily);
          break;
        case MessageTypeOneofCase.CollectionItem:
          if (CollectionItem == null) {
            CollectionItem = new global::WUProtos.Data.Client.ClientCollectionItem();
          }
          CollectionItem.MergeFrom(other.CollectionItem);
          break;
        case MessageTypeOneofCase.WalkboxTemplate:
          if (WalkboxTemplate == null) {
            WalkboxTemplate = new global::WUProtos.Data.Client.ClientWalkboxTemplate();
          }
          WalkboxTemplate.MergeFrom(other.WalkboxTemplate);
          break;
        case MessageTypeOneofCase.Encounter:
          if (Encounter == null) {
            Encounter = new global::WUProtos.Data.Client.ClientEncounter();
          }
          Encounter.MergeFrom(other.Encounter);
          break;
        case MessageTypeOneofCase.Portkey:
          if (Portkey == null) {
            Portkey = new global::WUProtos.Data.Client.ClientPortkey();
          }
          Portkey.MergeFrom(other.Portkey);
          break;
        case MessageTypeOneofCase.VaultItem:
          if (VaultItem == null) {
            VaultItem = new global::WUProtos.Data.Client.ClientVaultItem();
          }
          VaultItem.MergeFrom(other.VaultItem);
          break;
        case MessageTypeOneofCase.GameConfig:
          if (GameConfig == null) {
            GameConfig = new global::WUProtos.Data.Client.ClientGameConfig();
          }
          GameConfig.MergeFrom(other.GameConfig);
          break;
        case MessageTypeOneofCase.StorePack:
          if (StorePack == null) {
            StorePack = new global::WUProtos.Data.Client.ClientStorePack();
          }
          StorePack.MergeFrom(other.StorePack);
          break;
        case MessageTypeOneofCase.Spell:
          if (Spell == null) {
            Spell = new global::WUProtos.Data.Client.ClientSpell();
          }
          Spell.MergeFrom(other.Spell);
          break;
        case MessageTypeOneofCase.ProtegoPattern:
          if (ProtegoPattern == null) {
            ProtegoPattern = new global::WUProtos.Data.Client.ClientProtegoPattern();
          }
          ProtegoPattern.MergeFrom(other.ProtegoPattern);
          break;
        case MessageTypeOneofCase.ChamberTemplate:
          if (ChamberTemplate == null) {
            ChamberTemplate = new global::WUProtos.Data.Client.ClientChamberTemplate();
          }
          ChamberTemplate.MergeFrom(other.ChamberTemplate);
          break;
        case MessageTypeOneofCase.CollectionPage:
          if (CollectionPage == null) {
            CollectionPage = new global::WUProtos.Data.Client.ClientTeamControl();
          }
          CollectionPage.MergeFrom(other.CollectionPage);
          break;
        case MessageTypeOneofCase.TeamControl:
          if (TeamControl == null) {
            TeamControl = new global::WUProtos.Data.Client.ClientTeamControl();
          }
          TeamControl.MergeFrom(other.TeamControl);
          break;
        case MessageTypeOneofCase.StoreConfig:
          if (StoreConfig == null) {
            StoreConfig = new global::WUProtos.Data.Client.ClientStoreConfig();
          }
          StoreConfig.MergeFrom(other.StoreConfig);
          break;
        case MessageTypeOneofCase.StoreSubcategory:
          if (StoreSubcategory == null) {
            StoreSubcategory = new global::WUProtos.Data.Client.ClientStoreSubcategory();
          }
          StoreSubcategory.MergeFrom(other.StoreSubcategory);
          break;
        case MessageTypeOneofCase.Haptic:
          if (Haptic == null) {
            Haptic = new global::WUProtos.Data.Client.ClientHaptic();
          }
          Haptic.MergeFrom(other.Haptic);
          break;
        case MessageTypeOneofCase.Profession:
          if (Profession == null) {
            Profession = new global::WUProtos.Data.Client.ClientProfession();
          }
          Profession.MergeFrom(other.Profession);
          break;
        case MessageTypeOneofCase.BonusCategory:
          if (BonusCategory == null) {
            BonusCategory = new global::WUProtos.Data.Client.ClientBonusCategory();
          }
          BonusCategory.MergeFrom(other.BonusCategory);
          break;
        case MessageTypeOneofCase.VaultCategory:
          if (VaultCategory == null) {
            VaultCategory = new global::WUProtos.Data.Client.ClientVaultCategory();
          }
          VaultCategory.MergeFrom(other.VaultCategory);
          break;
        case MessageTypeOneofCase.ProfileConfig:
          if (ProfileConfig == null) {
            ProfileConfig = new global::WUProtos.Data.Client.ClientProfileConfig();
          }
          ProfileConfig.MergeFrom(other.ProfileConfig);
          break;
        case MessageTypeOneofCase.MapIngredient:
          if (MapIngredient == null) {
            MapIngredient = new global::WUProtos.Data.Client.ClientMapIngredient();
          }
          MapIngredient.MergeFrom(other.MapIngredient);
          break;
        case MessageTypeOneofCase.MapAbility:
          if (MapAbility == null) {
            MapAbility = new global::WUProtos.Data.Client.ClientMapAbility();
          }
          MapAbility.MergeFrom(other.MapAbility);
          break;
        case MessageTypeOneofCase.Storyboard:
          if (Storyboard == null) {
            Storyboard = new global::WUProtos.Data.Client.ClientStoryboard();
          }
          Storyboard.MergeFrom(other.Storyboard);
          break;
        case MessageTypeOneofCase.Rpgstat:
          if (Rpgstat == null) {
            Rpgstat = new global::WUProtos.Data.Client.ClientRpgstat();
          }
          Rpgstat.MergeFrom(other.Rpgstat);
          break;
        case MessageTypeOneofCase.RpgstatsBlock:
          if (RpgstatsBlock == null) {
            RpgstatsBlock = new global::WUProtos.Data.Client.ClientRpgstatsBlock();
          }
          RpgstatsBlock.MergeFrom(other.RpgstatsBlock);
          break;
        case MessageTypeOneofCase.SelfieAvatarAsset:
          if (SelfieAvatarAsset == null) {
            SelfieAvatarAsset = new global::WUProtos.Data.Client.ClientSelfieAvatarAsset();
          }
          SelfieAvatarAsset.MergeFrom(other.SelfieAvatarAsset);
          break;
        case MessageTypeOneofCase.Buff:
          if (Buff == null) {
            Buff = new global::WUProtos.Data.Client.ClientBuff();
          }
          Buff.MergeFrom(other.Buff);
          break;
        case MessageTypeOneofCase.OutpostTemplate:
          if (OutpostTemplate == null) {
            OutpostTemplate = new global::WUProtos.Data.Client.ClientOutpostTemplate();
          }
          OutpostTemplate.MergeFrom(other.OutpostTemplate);
          break;
        case MessageTypeOneofCase.ChallengeBonus:
          if (ChallengeBonus == null) {
            ChallengeBonus = new global::WUProtos.Data.Client.ClientChallengeBonus();
          }
          ChallengeBonus.MergeFrom(other.ChallengeBonus);
          break;
        case MessageTypeOneofCase.Recipe:
          if (Recipe == null) {
            Recipe = new global::WUProtos.Data.Client.ClientRecipe();
          }
          Recipe.MergeFrom(other.Recipe);
          break;
        case MessageTypeOneofCase.MasterNote:
          if (MasterNote == null) {
            MasterNote = new global::WUProtos.Data.Client.ClientMasterNote();
          }
          MasterNote.MergeFrom(other.MasterNote);
          break;
        case MessageTypeOneofCase.Quest:
          if (Quest == null) {
            Quest = new global::WUProtos.Data.Client.ClientQuest();
          }
          Quest.MergeFrom(other.Quest);
          break;
        case MessageTypeOneofCase.DailyRewardMonthlySchedule:
          if (DailyRewardMonthlySchedule == null) {
            DailyRewardMonthlySchedule = new global::WUProtos.Data.Client.ClientDailyRewardMonthlySchedule();
          }
          DailyRewardMonthlySchedule.MergeFrom(other.DailyRewardMonthlySchedule);
          break;
        case MessageTypeOneofCase.EncounterType:
          if (EncounterType == null) {
            EncounterType = new global::WUProtos.Data.Client.ClientEncounterType();
          }
          EncounterType.MergeFrom(other.EncounterType);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.Client.ClientCollectionFamily subBuilder = new global::WUProtos.Data.Client.ClientCollectionFamily();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionFamily) {
              subBuilder.MergeFrom(CollectionFamily);
            }
            input.ReadMessage(subBuilder);
            CollectionFamily = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.Client.ClientCollectionItem subBuilder = new global::WUProtos.Data.Client.ClientCollectionItem();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionItem) {
              subBuilder.MergeFrom(CollectionItem);
            }
            input.ReadMessage(subBuilder);
            CollectionItem = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.Client.ClientWalkboxTemplate subBuilder = new global::WUProtos.Data.Client.ClientWalkboxTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.WalkboxTemplate) {
              subBuilder.MergeFrom(WalkboxTemplate);
            }
            input.ReadMessage(subBuilder);
            WalkboxTemplate = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.Client.ClientEncounter subBuilder = new global::WUProtos.Data.Client.ClientEncounter();
            if (messageTypeCase_ == MessageTypeOneofCase.Encounter) {
              subBuilder.MergeFrom(Encounter);
            }
            input.ReadMessage(subBuilder);
            Encounter = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.Client.ClientPortkey subBuilder = new global::WUProtos.Data.Client.ClientPortkey();
            if (messageTypeCase_ == MessageTypeOneofCase.Portkey) {
              subBuilder.MergeFrom(Portkey);
            }
            input.ReadMessage(subBuilder);
            Portkey = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.Client.ClientVaultItem subBuilder = new global::WUProtos.Data.Client.ClientVaultItem();
            if (messageTypeCase_ == MessageTypeOneofCase.VaultItem) {
              subBuilder.MergeFrom(VaultItem);
            }
            input.ReadMessage(subBuilder);
            VaultItem = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.Client.ClientGameConfig subBuilder = new global::WUProtos.Data.Client.ClientGameConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.GameConfig) {
              subBuilder.MergeFrom(GameConfig);
            }
            input.ReadMessage(subBuilder);
            GameConfig = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Client.ClientStorePack subBuilder = new global::WUProtos.Data.Client.ClientStorePack();
            if (messageTypeCase_ == MessageTypeOneofCase.StorePack) {
              subBuilder.MergeFrom(StorePack);
            }
            input.ReadMessage(subBuilder);
            StorePack = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.Client.ClientSpell subBuilder = new global::WUProtos.Data.Client.ClientSpell();
            if (messageTypeCase_ == MessageTypeOneofCase.Spell) {
              subBuilder.MergeFrom(Spell);
            }
            input.ReadMessage(subBuilder);
            Spell = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.Client.ClientProtegoPattern subBuilder = new global::WUProtos.Data.Client.ClientProtegoPattern();
            if (messageTypeCase_ == MessageTypeOneofCase.ProtegoPattern) {
              subBuilder.MergeFrom(ProtegoPattern);
            }
            input.ReadMessage(subBuilder);
            ProtegoPattern = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.Client.ClientChamberTemplate subBuilder = new global::WUProtos.Data.Client.ClientChamberTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.ChamberTemplate) {
              subBuilder.MergeFrom(ChamberTemplate);
            }
            input.ReadMessage(subBuilder);
            ChamberTemplate = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.Client.ClientTeamControl subBuilder = new global::WUProtos.Data.Client.ClientTeamControl();
            if (messageTypeCase_ == MessageTypeOneofCase.CollectionPage) {
              subBuilder.MergeFrom(CollectionPage);
            }
            input.ReadMessage(subBuilder);
            CollectionPage = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.Client.ClientTeamControl subBuilder = new global::WUProtos.Data.Client.ClientTeamControl();
            if (messageTypeCase_ == MessageTypeOneofCase.TeamControl) {
              subBuilder.MergeFrom(TeamControl);
            }
            input.ReadMessage(subBuilder);
            TeamControl = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.Client.ClientStoreConfig subBuilder = new global::WUProtos.Data.Client.ClientStoreConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.StoreConfig) {
              subBuilder.MergeFrom(StoreConfig);
            }
            input.ReadMessage(subBuilder);
            StoreConfig = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Data.Client.ClientStoreSubcategory subBuilder = new global::WUProtos.Data.Client.ClientStoreSubcategory();
            if (messageTypeCase_ == MessageTypeOneofCase.StoreSubcategory) {
              subBuilder.MergeFrom(StoreSubcategory);
            }
            input.ReadMessage(subBuilder);
            StoreSubcategory = subBuilder;
            break;
          }
          case 130: {
            global::WUProtos.Data.Client.ClientHaptic subBuilder = new global::WUProtos.Data.Client.ClientHaptic();
            if (messageTypeCase_ == MessageTypeOneofCase.Haptic) {
              subBuilder.MergeFrom(Haptic);
            }
            input.ReadMessage(subBuilder);
            Haptic = subBuilder;
            break;
          }
          case 138: {
            global::WUProtos.Data.Client.ClientProfession subBuilder = new global::WUProtos.Data.Client.ClientProfession();
            if (messageTypeCase_ == MessageTypeOneofCase.Profession) {
              subBuilder.MergeFrom(Profession);
            }
            input.ReadMessage(subBuilder);
            Profession = subBuilder;
            break;
          }
          case 146: {
            global::WUProtos.Data.Client.ClientBonusCategory subBuilder = new global::WUProtos.Data.Client.ClientBonusCategory();
            if (messageTypeCase_ == MessageTypeOneofCase.BonusCategory) {
              subBuilder.MergeFrom(BonusCategory);
            }
            input.ReadMessage(subBuilder);
            BonusCategory = subBuilder;
            break;
          }
          case 154: {
            global::WUProtos.Data.Client.ClientVaultCategory subBuilder = new global::WUProtos.Data.Client.ClientVaultCategory();
            if (messageTypeCase_ == MessageTypeOneofCase.VaultCategory) {
              subBuilder.MergeFrom(VaultCategory);
            }
            input.ReadMessage(subBuilder);
            VaultCategory = subBuilder;
            break;
          }
          case 162: {
            global::WUProtos.Data.Client.ClientProfileConfig subBuilder = new global::WUProtos.Data.Client.ClientProfileConfig();
            if (messageTypeCase_ == MessageTypeOneofCase.ProfileConfig) {
              subBuilder.MergeFrom(ProfileConfig);
            }
            input.ReadMessage(subBuilder);
            ProfileConfig = subBuilder;
            break;
          }
          case 170: {
            global::WUProtos.Data.Client.ClientMapIngredient subBuilder = new global::WUProtos.Data.Client.ClientMapIngredient();
            if (messageTypeCase_ == MessageTypeOneofCase.MapIngredient) {
              subBuilder.MergeFrom(MapIngredient);
            }
            input.ReadMessage(subBuilder);
            MapIngredient = subBuilder;
            break;
          }
          case 178: {
            global::WUProtos.Data.Client.ClientMapAbility subBuilder = new global::WUProtos.Data.Client.ClientMapAbility();
            if (messageTypeCase_ == MessageTypeOneofCase.MapAbility) {
              subBuilder.MergeFrom(MapAbility);
            }
            input.ReadMessage(subBuilder);
            MapAbility = subBuilder;
            break;
          }
          case 186: {
            global::WUProtos.Data.Client.ClientStoryboard subBuilder = new global::WUProtos.Data.Client.ClientStoryboard();
            if (messageTypeCase_ == MessageTypeOneofCase.Storyboard) {
              subBuilder.MergeFrom(Storyboard);
            }
            input.ReadMessage(subBuilder);
            Storyboard = subBuilder;
            break;
          }
          case 194: {
            global::WUProtos.Data.Client.ClientRpgstat subBuilder = new global::WUProtos.Data.Client.ClientRpgstat();
            if (messageTypeCase_ == MessageTypeOneofCase.Rpgstat) {
              subBuilder.MergeFrom(Rpgstat);
            }
            input.ReadMessage(subBuilder);
            Rpgstat = subBuilder;
            break;
          }
          case 202: {
            global::WUProtos.Data.Client.ClientRpgstatsBlock subBuilder = new global::WUProtos.Data.Client.ClientRpgstatsBlock();
            if (messageTypeCase_ == MessageTypeOneofCase.RpgstatsBlock) {
              subBuilder.MergeFrom(RpgstatsBlock);
            }
            input.ReadMessage(subBuilder);
            RpgstatsBlock = subBuilder;
            break;
          }
          case 210: {
            global::WUProtos.Data.Client.ClientSelfieAvatarAsset subBuilder = new global::WUProtos.Data.Client.ClientSelfieAvatarAsset();
            if (messageTypeCase_ == MessageTypeOneofCase.SelfieAvatarAsset) {
              subBuilder.MergeFrom(SelfieAvatarAsset);
            }
            input.ReadMessage(subBuilder);
            SelfieAvatarAsset = subBuilder;
            break;
          }
          case 218: {
            global::WUProtos.Data.Client.ClientBuff subBuilder = new global::WUProtos.Data.Client.ClientBuff();
            if (messageTypeCase_ == MessageTypeOneofCase.Buff) {
              subBuilder.MergeFrom(Buff);
            }
            input.ReadMessage(subBuilder);
            Buff = subBuilder;
            break;
          }
          case 234: {
            global::WUProtos.Data.Client.ClientOutpostTemplate subBuilder = new global::WUProtos.Data.Client.ClientOutpostTemplate();
            if (messageTypeCase_ == MessageTypeOneofCase.OutpostTemplate) {
              subBuilder.MergeFrom(OutpostTemplate);
            }
            input.ReadMessage(subBuilder);
            OutpostTemplate = subBuilder;
            break;
          }
          case 242: {
            global::WUProtos.Data.Client.ClientChallengeBonus subBuilder = new global::WUProtos.Data.Client.ClientChallengeBonus();
            if (messageTypeCase_ == MessageTypeOneofCase.ChallengeBonus) {
              subBuilder.MergeFrom(ChallengeBonus);
            }
            input.ReadMessage(subBuilder);
            ChallengeBonus = subBuilder;
            break;
          }
          case 250: {
            global::WUProtos.Data.Client.ClientRecipe subBuilder = new global::WUProtos.Data.Client.ClientRecipe();
            if (messageTypeCase_ == MessageTypeOneofCase.Recipe) {
              subBuilder.MergeFrom(Recipe);
            }
            input.ReadMessage(subBuilder);
            Recipe = subBuilder;
            break;
          }
          case 258: {
            global::WUProtos.Data.Client.ClientMasterNote subBuilder = new global::WUProtos.Data.Client.ClientMasterNote();
            if (messageTypeCase_ == MessageTypeOneofCase.MasterNote) {
              subBuilder.MergeFrom(MasterNote);
            }
            input.ReadMessage(subBuilder);
            MasterNote = subBuilder;
            break;
          }
          case 266: {
            global::WUProtos.Data.Client.ClientQuest subBuilder = new global::WUProtos.Data.Client.ClientQuest();
            if (messageTypeCase_ == MessageTypeOneofCase.Quest) {
              subBuilder.MergeFrom(Quest);
            }
            input.ReadMessage(subBuilder);
            Quest = subBuilder;
            break;
          }
          case 274: {
            global::WUProtos.Data.Client.ClientDailyRewardMonthlySchedule subBuilder = new global::WUProtos.Data.Client.ClientDailyRewardMonthlySchedule();
            if (messageTypeCase_ == MessageTypeOneofCase.DailyRewardMonthlySchedule) {
              subBuilder.MergeFrom(DailyRewardMonthlySchedule);
            }
            input.ReadMessage(subBuilder);
            DailyRewardMonthlySchedule = subBuilder;
            break;
          }
          case 282: {
            global::WUProtos.Data.Client.ClientEncounterType subBuilder = new global::WUProtos.Data.Client.ClientEncounterType();
            if (messageTypeCase_ == MessageTypeOneofCase.EncounterType) {
              subBuilder.MergeFrom(EncounterType);
            }
            input.ReadMessage(subBuilder);
            EncounterType = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
