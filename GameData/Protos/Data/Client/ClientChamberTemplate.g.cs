// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientChamberTemplate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientChamberTemplate.proto</summary>
  public static partial class ClientChamberTemplateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientChamberTemplate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientChamberTemplateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRDaGFtYmVyVGVtcGxhdGUu",
            "cHJvdG8SFFdVUHJvdG9zLkRhdGEuQ2xpZW50IokBChVDbGllbnRDaGFtYmVy",
            "VGVtcGxhdGUSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIoCiBjaGFsbGVu",
            "Z2VfbGVhdmluZ193YXJuaW5nX3JhZGl1cxgDIAEoAhITCgthcmVuYV9zY2Vu",
            "ZRgEIAEoCRIXCg9iYXNlX2RpZmZpY3VsdHkYBSABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientChamberTemplate), global::WUProtos.Data.Client.ClientChamberTemplate.Parser, new[]{ "Id", "Name", "ChallengeLeavingWarningRadius", "ArenaScene", "BaseDifficulty" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientChamberTemplate : pb::IMessage<ClientChamberTemplate> {
    private static readonly pb::MessageParser<ClientChamberTemplate> _parser = new pb::MessageParser<ClientChamberTemplate>(() => new ClientChamberTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientChamberTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientChamberTemplateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientChamberTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientChamberTemplate(ClientChamberTemplate other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      challengeLeavingWarningRadius_ = other.challengeLeavingWarningRadius_;
      arenaScene_ = other.arenaScene_;
      baseDifficulty_ = other.baseDifficulty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientChamberTemplate Clone() {
      return new ClientChamberTemplate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challenge_leaving_warning_radius" field.</summary>
    public const int ChallengeLeavingWarningRadiusFieldNumber = 3;
    private float challengeLeavingWarningRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChallengeLeavingWarningRadius {
      get { return challengeLeavingWarningRadius_; }
      set {
        challengeLeavingWarningRadius_ = value;
      }
    }

    /// <summary>Field number for the "arena_scene" field.</summary>
    public const int ArenaSceneFieldNumber = 4;
    private string arenaScene_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArenaScene {
      get { return arenaScene_; }
      set {
        arenaScene_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_difficulty" field.</summary>
    public const int BaseDifficultyFieldNumber = 5;
    private int baseDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseDifficulty {
      get { return baseDifficulty_; }
      set {
        baseDifficulty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientChamberTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientChamberTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChallengeLeavingWarningRadius, other.ChallengeLeavingWarningRadius)) return false;
      if (ArenaScene != other.ArenaScene) return false;
      if (BaseDifficulty != other.BaseDifficulty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ChallengeLeavingWarningRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChallengeLeavingWarningRadius);
      if (ArenaScene.Length != 0) hash ^= ArenaScene.GetHashCode();
      if (BaseDifficulty != 0) hash ^= BaseDifficulty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ChallengeLeavingWarningRadius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ChallengeLeavingWarningRadius);
      }
      if (ArenaScene.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ArenaScene);
      }
      if (BaseDifficulty != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BaseDifficulty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ChallengeLeavingWarningRadius != 0F) {
        size += 1 + 4;
      }
      if (ArenaScene.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArenaScene);
      }
      if (BaseDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseDifficulty);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientChamberTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ChallengeLeavingWarningRadius != 0F) {
        ChallengeLeavingWarningRadius = other.ChallengeLeavingWarningRadius;
      }
      if (other.ArenaScene.Length != 0) {
        ArenaScene = other.ArenaScene;
      }
      if (other.BaseDifficulty != 0) {
        BaseDifficulty = other.BaseDifficulty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 29: {
            ChallengeLeavingWarningRadius = input.ReadFloat();
            break;
          }
          case 34: {
            ArenaScene = input.ReadString();
            break;
          }
          case 40: {
            BaseDifficulty = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
