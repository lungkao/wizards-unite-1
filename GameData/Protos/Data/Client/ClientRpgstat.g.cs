// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientRpgstat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientRpgstat.proto</summary>
  public static partial class ClientRpgstatReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientRpgstat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientRpgstatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRScGdzdGF0LnByb3RvEhRX",
            "VVByb3Rvcy5EYXRhLkNsaWVudCKtAQoNQ2xpZW50UnBnc3RhdBIKCgJpZBgB",
            "IAEoCRIPCgd0b29sdGlwGAIgASgJEhIKCnBlcmNlbnRhZ2UYAyABKAgSDwoH",
            "c2hvd191aRgEIAEoCBIRCglzdGF0X25hbWUYBSABKAkSGQoRZGlzcGxheV90",
            "aHJlc2hvbGQYBiABKAUSGQoRaWNvbl9kaXNwbGF5X3R5cGUYByABKAkSEQoJ",
            "aW5mb19kZXNjGAggASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientRpgstat), global::WUProtos.Data.Client.ClientRpgstat.Parser, new[]{ "Id", "Tooltip", "Percentage", "ShowUi", "StatName", "DisplayThreshold", "IconDisplayType", "InfoDesc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientRpgstat : pb::IMessage<ClientRpgstat> {
    private static readonly pb::MessageParser<ClientRpgstat> _parser = new pb::MessageParser<ClientRpgstat>(() => new ClientRpgstat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientRpgstat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientRpgstatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRpgstat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRpgstat(ClientRpgstat other) : this() {
      id_ = other.id_;
      tooltip_ = other.tooltip_;
      percentage_ = other.percentage_;
      showUi_ = other.showUi_;
      statName_ = other.statName_;
      displayThreshold_ = other.displayThreshold_;
      iconDisplayType_ = other.iconDisplayType_;
      infoDesc_ = other.infoDesc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientRpgstat Clone() {
      return new ClientRpgstat(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tooltip" field.</summary>
    public const int TooltipFieldNumber = 2;
    private string tooltip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tooltip {
      get { return tooltip_; }
      set {
        tooltip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "percentage" field.</summary>
    public const int PercentageFieldNumber = 3;
    private bool percentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Percentage {
      get { return percentage_; }
      set {
        percentage_ = value;
      }
    }

    /// <summary>Field number for the "show_ui" field.</summary>
    public const int ShowUiFieldNumber = 4;
    private bool showUi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowUi {
      get { return showUi_; }
      set {
        showUi_ = value;
      }
    }

    /// <summary>Field number for the "stat_name" field.</summary>
    public const int StatNameFieldNumber = 5;
    private string statName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatName {
      get { return statName_; }
      set {
        statName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_threshold" field.</summary>
    public const int DisplayThresholdFieldNumber = 6;
    private int displayThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DisplayThreshold {
      get { return displayThreshold_; }
      set {
        displayThreshold_ = value;
      }
    }

    /// <summary>Field number for the "icon_display_type" field.</summary>
    public const int IconDisplayTypeFieldNumber = 7;
    private string iconDisplayType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconDisplayType {
      get { return iconDisplayType_; }
      set {
        iconDisplayType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info_desc" field.</summary>
    public const int InfoDescFieldNumber = 8;
    private string infoDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InfoDesc {
      get { return infoDesc_; }
      set {
        infoDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientRpgstat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientRpgstat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Tooltip != other.Tooltip) return false;
      if (Percentage != other.Percentage) return false;
      if (ShowUi != other.ShowUi) return false;
      if (StatName != other.StatName) return false;
      if (DisplayThreshold != other.DisplayThreshold) return false;
      if (IconDisplayType != other.IconDisplayType) return false;
      if (InfoDesc != other.InfoDesc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Tooltip.Length != 0) hash ^= Tooltip.GetHashCode();
      if (Percentage != false) hash ^= Percentage.GetHashCode();
      if (ShowUi != false) hash ^= ShowUi.GetHashCode();
      if (StatName.Length != 0) hash ^= StatName.GetHashCode();
      if (DisplayThreshold != 0) hash ^= DisplayThreshold.GetHashCode();
      if (IconDisplayType.Length != 0) hash ^= IconDisplayType.GetHashCode();
      if (InfoDesc.Length != 0) hash ^= InfoDesc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Tooltip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tooltip);
      }
      if (Percentage != false) {
        output.WriteRawTag(24);
        output.WriteBool(Percentage);
      }
      if (ShowUi != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShowUi);
      }
      if (StatName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(StatName);
      }
      if (DisplayThreshold != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DisplayThreshold);
      }
      if (IconDisplayType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(IconDisplayType);
      }
      if (InfoDesc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(InfoDesc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Tooltip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tooltip);
      }
      if (Percentage != false) {
        size += 1 + 1;
      }
      if (ShowUi != false) {
        size += 1 + 1;
      }
      if (StatName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatName);
      }
      if (DisplayThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayThreshold);
      }
      if (IconDisplayType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconDisplayType);
      }
      if (InfoDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InfoDesc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientRpgstat other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Tooltip.Length != 0) {
        Tooltip = other.Tooltip;
      }
      if (other.Percentage != false) {
        Percentage = other.Percentage;
      }
      if (other.ShowUi != false) {
        ShowUi = other.ShowUi;
      }
      if (other.StatName.Length != 0) {
        StatName = other.StatName;
      }
      if (other.DisplayThreshold != 0) {
        DisplayThreshold = other.DisplayThreshold;
      }
      if (other.IconDisplayType.Length != 0) {
        IconDisplayType = other.IconDisplayType;
      }
      if (other.InfoDesc.Length != 0) {
        InfoDesc = other.InfoDesc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Tooltip = input.ReadString();
            break;
          }
          case 24: {
            Percentage = input.ReadBool();
            break;
          }
          case 32: {
            ShowUi = input.ReadBool();
            break;
          }
          case 42: {
            StatName = input.ReadString();
            break;
          }
          case 48: {
            DisplayThreshold = input.ReadInt32();
            break;
          }
          case 58: {
            IconDisplayType = input.ReadString();
            break;
          }
          case 66: {
            InfoDesc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
