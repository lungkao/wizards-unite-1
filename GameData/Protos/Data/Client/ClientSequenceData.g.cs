// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientSequenceData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientSequenceData.proto</summary>
  public static partial class ClientSequenceDataReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientSequenceData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientSequenceDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRTZXF1ZW5jZURhdGEucHJv",
            "dG8SFFdVUHJvdG9zLkRhdGEuQ2xpZW50IsEBChJDbGllbnRTZXF1ZW5jZURh",
            "dGESFQoNc2VxdWVuY2VfdHlwZRgBIAEoBRIQCghvYnN0YWNsZRgCIAEoCRIW",
            "Cg5vYnN0YWNsZV9hbGlhcxgDIAEoCRIYChBlbmNvdW50ZXJfdGFyZ2V0GAQg",
            "ASgJEhUKDXRpbWVsaW5lX2ZpbGUYBSABKAkSGwoTc2VxdWVuY2VfZGVsYXlf",
            "dGltZRgGIAEoAhIcChRzZXF1ZW5jZV9sYXlvdXRfbm9kZRgHIAEoCWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientSequenceData), global::WUProtos.Data.Client.ClientSequenceData.Parser, new[]{ "SequenceType", "Obstacle", "ObstacleAlias", "EncounterTarget", "TimelineFile", "SequenceDelayTime", "SequenceLayoutNode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientSequenceData : pb::IMessage<ClientSequenceData> {
    private static readonly pb::MessageParser<ClientSequenceData> _parser = new pb::MessageParser<ClientSequenceData>(() => new ClientSequenceData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSequenceData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientSequenceDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSequenceData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSequenceData(ClientSequenceData other) : this() {
      sequenceType_ = other.sequenceType_;
      obstacle_ = other.obstacle_;
      obstacleAlias_ = other.obstacleAlias_;
      encounterTarget_ = other.encounterTarget_;
      timelineFile_ = other.timelineFile_;
      sequenceDelayTime_ = other.sequenceDelayTime_;
      sequenceLayoutNode_ = other.sequenceLayoutNode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSequenceData Clone() {
      return new ClientSequenceData(this);
    }

    /// <summary>Field number for the "sequence_type" field.</summary>
    public const int SequenceTypeFieldNumber = 1;
    private int sequenceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceType {
      get { return sequenceType_; }
      set {
        sequenceType_ = value;
      }
    }

    /// <summary>Field number for the "obstacle" field.</summary>
    public const int ObstacleFieldNumber = 2;
    private string obstacle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Obstacle {
      get { return obstacle_; }
      set {
        obstacle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "obstacle_alias" field.</summary>
    public const int ObstacleAliasFieldNumber = 3;
    private string obstacleAlias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObstacleAlias {
      get { return obstacleAlias_; }
      set {
        obstacleAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encounter_target" field.</summary>
    public const int EncounterTargetFieldNumber = 4;
    private string encounterTarget_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncounterTarget {
      get { return encounterTarget_; }
      set {
        encounterTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeline_file" field.</summary>
    public const int TimelineFileFieldNumber = 5;
    private string timelineFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimelineFile {
      get { return timelineFile_; }
      set {
        timelineFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence_delay_time" field.</summary>
    public const int SequenceDelayTimeFieldNumber = 6;
    private float sequenceDelayTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SequenceDelayTime {
      get { return sequenceDelayTime_; }
      set {
        sequenceDelayTime_ = value;
      }
    }

    /// <summary>Field number for the "sequence_layout_node" field.</summary>
    public const int SequenceLayoutNodeFieldNumber = 7;
    private string sequenceLayoutNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SequenceLayoutNode {
      get { return sequenceLayoutNode_; }
      set {
        sequenceLayoutNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSequenceData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSequenceData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SequenceType != other.SequenceType) return false;
      if (Obstacle != other.Obstacle) return false;
      if (ObstacleAlias != other.ObstacleAlias) return false;
      if (EncounterTarget != other.EncounterTarget) return false;
      if (TimelineFile != other.TimelineFile) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SequenceDelayTime, other.SequenceDelayTime)) return false;
      if (SequenceLayoutNode != other.SequenceLayoutNode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SequenceType != 0) hash ^= SequenceType.GetHashCode();
      if (Obstacle.Length != 0) hash ^= Obstacle.GetHashCode();
      if (ObstacleAlias.Length != 0) hash ^= ObstacleAlias.GetHashCode();
      if (EncounterTarget.Length != 0) hash ^= EncounterTarget.GetHashCode();
      if (TimelineFile.Length != 0) hash ^= TimelineFile.GetHashCode();
      if (SequenceDelayTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SequenceDelayTime);
      if (SequenceLayoutNode.Length != 0) hash ^= SequenceLayoutNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SequenceType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SequenceType);
      }
      if (Obstacle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Obstacle);
      }
      if (ObstacleAlias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ObstacleAlias);
      }
      if (EncounterTarget.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EncounterTarget);
      }
      if (TimelineFile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TimelineFile);
      }
      if (SequenceDelayTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SequenceDelayTime);
      }
      if (SequenceLayoutNode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SequenceLayoutNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SequenceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceType);
      }
      if (Obstacle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Obstacle);
      }
      if (ObstacleAlias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObstacleAlias);
      }
      if (EncounterTarget.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncounterTarget);
      }
      if (TimelineFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimelineFile);
      }
      if (SequenceDelayTime != 0F) {
        size += 1 + 4;
      }
      if (SequenceLayoutNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SequenceLayoutNode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSequenceData other) {
      if (other == null) {
        return;
      }
      if (other.SequenceType != 0) {
        SequenceType = other.SequenceType;
      }
      if (other.Obstacle.Length != 0) {
        Obstacle = other.Obstacle;
      }
      if (other.ObstacleAlias.Length != 0) {
        ObstacleAlias = other.ObstacleAlias;
      }
      if (other.EncounterTarget.Length != 0) {
        EncounterTarget = other.EncounterTarget;
      }
      if (other.TimelineFile.Length != 0) {
        TimelineFile = other.TimelineFile;
      }
      if (other.SequenceDelayTime != 0F) {
        SequenceDelayTime = other.SequenceDelayTime;
      }
      if (other.SequenceLayoutNode.Length != 0) {
        SequenceLayoutNode = other.SequenceLayoutNode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SequenceType = input.ReadInt32();
            break;
          }
          case 18: {
            Obstacle = input.ReadString();
            break;
          }
          case 26: {
            ObstacleAlias = input.ReadString();
            break;
          }
          case 34: {
            EncounterTarget = input.ReadString();
            break;
          }
          case 42: {
            TimelineFile = input.ReadString();
            break;
          }
          case 53: {
            SequenceDelayTime = input.ReadFloat();
            break;
          }
          case 58: {
            SequenceLayoutNode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
