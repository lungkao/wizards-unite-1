// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/Client/ClientTelemetryStartup.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data.Client {

  /// <summary>Holder for reflection information generated from WUProtos/Data/Client/ClientTelemetryStartup.proto</summary>
  public static partial class ClientTelemetryStartupReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/Client/ClientTelemetryStartup.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientTelemetryStartupReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlTdGFydHVw",
            "LnByb3RvEhRXVVByb3Rvcy5EYXRhLkNsaWVudBo6V1VQcm90b3MvRGF0YS9D",
            "bGllbnQvQ2xpZW50VGVsZW1ldHJ5U3Vic3lzdGVtU3RhcnR1cC5wcm90byL2",
            "AgoWQ2xpZW50VGVsZW1ldHJ5U3RhcnR1cBIWCg5jbGllbnRfdmVyc2lvbhgC",
            "IAEoCRITCgtkZXZpY2VfdHlwZRgDIAEoCRISCgpmaXJzdF90aW1lGAQgASgI",
            "Eh4KFmxvYWRfdG9fdG9zX2xvZ2luX3RpbWUYBSABKAESGAoQbG9hZF90b19t",
            "YXBfdGltZRgGIAEoARIRCglkZXZpY2Vfb3MYByABKAkSHgoWZ3JhcGhpY3Nf",
            "ZGV2aWNlX3ZlbmRvchgIIAEoCRIcChRncmFwaGljc19kZXZpY2VfbmFtZRgJ",
            "IAEoCRIcChRncmFwaGljc19kZXZpY2VfdHlwZRgKIAEoCRIdChVncmFwaGlj",
            "c19zaGFkZXJfbGV2ZWwYCyABKAESUwoUc3Vic3lzdGVtX2xvYWRfdGltZXMY",
            "DCADKAsyNS5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlT",
            "dWJzeXN0ZW1TdGFydHVwYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Client.ClientTelemetrySubsystemStartupReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.Client.ClientTelemetryStartup), global::WUProtos.Data.Client.ClientTelemetryStartup.Parser, new[]{ "ClientVersion", "DeviceType", "FirstTime", "LoadToTosLoginTime", "LoadToMapTime", "DeviceOs", "GraphicsDeviceVendor", "GraphicsDeviceName", "GraphicsDeviceType", "GraphicsShaderLevel", "SubsystemLoadTimes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientTelemetryStartup : pb::IMessage<ClientTelemetryStartup> {
    private static readonly pb::MessageParser<ClientTelemetryStartup> _parser = new pb::MessageParser<ClientTelemetryStartup>(() => new ClientTelemetryStartup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientTelemetryStartup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.Client.ClientTelemetryStartupReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetryStartup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetryStartup(ClientTelemetryStartup other) : this() {
      clientVersion_ = other.clientVersion_;
      deviceType_ = other.deviceType_;
      firstTime_ = other.firstTime_;
      loadToTosLoginTime_ = other.loadToTosLoginTime_;
      loadToMapTime_ = other.loadToMapTime_;
      deviceOs_ = other.deviceOs_;
      graphicsDeviceVendor_ = other.graphicsDeviceVendor_;
      graphicsDeviceName_ = other.graphicsDeviceName_;
      graphicsDeviceType_ = other.graphicsDeviceType_;
      graphicsShaderLevel_ = other.graphicsShaderLevel_;
      subsystemLoadTimes_ = other.subsystemLoadTimes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientTelemetryStartup Clone() {
      return new ClientTelemetryStartup(this);
    }

    /// <summary>Field number for the "client_version" field.</summary>
    public const int ClientVersionFieldNumber = 2;
    private string clientVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_type" field.</summary>
    public const int DeviceTypeFieldNumber = 3;
    private string deviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_time" field.</summary>
    public const int FirstTimeFieldNumber = 4;
    private bool firstTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstTime {
      get { return firstTime_; }
      set {
        firstTime_ = value;
      }
    }

    /// <summary>Field number for the "load_to_tos_login_time" field.</summary>
    public const int LoadToTosLoginTimeFieldNumber = 5;
    private double loadToTosLoginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LoadToTosLoginTime {
      get { return loadToTosLoginTime_; }
      set {
        loadToTosLoginTime_ = value;
      }
    }

    /// <summary>Field number for the "load_to_map_time" field.</summary>
    public const int LoadToMapTimeFieldNumber = 6;
    private double loadToMapTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LoadToMapTime {
      get { return loadToMapTime_; }
      set {
        loadToMapTime_ = value;
      }
    }

    /// <summary>Field number for the "device_os" field.</summary>
    public const int DeviceOsFieldNumber = 7;
    private string deviceOs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceOs {
      get { return deviceOs_; }
      set {
        deviceOs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_device_vendor" field.</summary>
    public const int GraphicsDeviceVendorFieldNumber = 8;
    private string graphicsDeviceVendor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphicsDeviceVendor {
      get { return graphicsDeviceVendor_; }
      set {
        graphicsDeviceVendor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_device_name" field.</summary>
    public const int GraphicsDeviceNameFieldNumber = 9;
    private string graphicsDeviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphicsDeviceName {
      get { return graphicsDeviceName_; }
      set {
        graphicsDeviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_device_type" field.</summary>
    public const int GraphicsDeviceTypeFieldNumber = 10;
    private string graphicsDeviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphicsDeviceType {
      get { return graphicsDeviceType_; }
      set {
        graphicsDeviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graphics_shader_level" field.</summary>
    public const int GraphicsShaderLevelFieldNumber = 11;
    private double graphicsShaderLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GraphicsShaderLevel {
      get { return graphicsShaderLevel_; }
      set {
        graphicsShaderLevel_ = value;
      }
    }

    /// <summary>Field number for the "subsystem_load_times" field.</summary>
    public const int SubsystemLoadTimesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::WUProtos.Data.Client.ClientTelemetrySubsystemStartup> _repeated_subsystemLoadTimes_codec
        = pb::FieldCodec.ForMessage(98, global::WUProtos.Data.Client.ClientTelemetrySubsystemStartup.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.Client.ClientTelemetrySubsystemStartup> subsystemLoadTimes_ = new pbc::RepeatedField<global::WUProtos.Data.Client.ClientTelemetrySubsystemStartup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.Client.ClientTelemetrySubsystemStartup> SubsystemLoadTimes {
      get { return subsystemLoadTimes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientTelemetryStartup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientTelemetryStartup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientVersion != other.ClientVersion) return false;
      if (DeviceType != other.DeviceType) return false;
      if (FirstTime != other.FirstTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LoadToTosLoginTime, other.LoadToTosLoginTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LoadToMapTime, other.LoadToMapTime)) return false;
      if (DeviceOs != other.DeviceOs) return false;
      if (GraphicsDeviceVendor != other.GraphicsDeviceVendor) return false;
      if (GraphicsDeviceName != other.GraphicsDeviceName) return false;
      if (GraphicsDeviceType != other.GraphicsDeviceType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GraphicsShaderLevel, other.GraphicsShaderLevel)) return false;
      if(!subsystemLoadTimes_.Equals(other.subsystemLoadTimes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientVersion.Length != 0) hash ^= ClientVersion.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      if (FirstTime != false) hash ^= FirstTime.GetHashCode();
      if (LoadToTosLoginTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LoadToTosLoginTime);
      if (LoadToMapTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LoadToMapTime);
      if (DeviceOs.Length != 0) hash ^= DeviceOs.GetHashCode();
      if (GraphicsDeviceVendor.Length != 0) hash ^= GraphicsDeviceVendor.GetHashCode();
      if (GraphicsDeviceName.Length != 0) hash ^= GraphicsDeviceName.GetHashCode();
      if (GraphicsDeviceType.Length != 0) hash ^= GraphicsDeviceType.GetHashCode();
      if (GraphicsShaderLevel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GraphicsShaderLevel);
      hash ^= subsystemLoadTimes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientVersion);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceType);
      }
      if (FirstTime != false) {
        output.WriteRawTag(32);
        output.WriteBool(FirstTime);
      }
      if (LoadToTosLoginTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LoadToTosLoginTime);
      }
      if (LoadToMapTime != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(LoadToMapTime);
      }
      if (DeviceOs.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeviceOs);
      }
      if (GraphicsDeviceVendor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GraphicsDeviceVendor);
      }
      if (GraphicsDeviceName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(GraphicsDeviceName);
      }
      if (GraphicsDeviceType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GraphicsDeviceType);
      }
      if (GraphicsShaderLevel != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(GraphicsShaderLevel);
      }
      subsystemLoadTimes_.WriteTo(output, _repeated_subsystemLoadTimes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientVersion);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      if (FirstTime != false) {
        size += 1 + 1;
      }
      if (LoadToTosLoginTime != 0D) {
        size += 1 + 8;
      }
      if (LoadToMapTime != 0D) {
        size += 1 + 8;
      }
      if (DeviceOs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceOs);
      }
      if (GraphicsDeviceVendor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsDeviceVendor);
      }
      if (GraphicsDeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsDeviceName);
      }
      if (GraphicsDeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphicsDeviceType);
      }
      if (GraphicsShaderLevel != 0D) {
        size += 1 + 8;
      }
      size += subsystemLoadTimes_.CalculateSize(_repeated_subsystemLoadTimes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientTelemetryStartup other) {
      if (other == null) {
        return;
      }
      if (other.ClientVersion.Length != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.FirstTime != false) {
        FirstTime = other.FirstTime;
      }
      if (other.LoadToTosLoginTime != 0D) {
        LoadToTosLoginTime = other.LoadToTosLoginTime;
      }
      if (other.LoadToMapTime != 0D) {
        LoadToMapTime = other.LoadToMapTime;
      }
      if (other.DeviceOs.Length != 0) {
        DeviceOs = other.DeviceOs;
      }
      if (other.GraphicsDeviceVendor.Length != 0) {
        GraphicsDeviceVendor = other.GraphicsDeviceVendor;
      }
      if (other.GraphicsDeviceName.Length != 0) {
        GraphicsDeviceName = other.GraphicsDeviceName;
      }
      if (other.GraphicsDeviceType.Length != 0) {
        GraphicsDeviceType = other.GraphicsDeviceType;
      }
      if (other.GraphicsShaderLevel != 0D) {
        GraphicsShaderLevel = other.GraphicsShaderLevel;
      }
      subsystemLoadTimes_.Add(other.subsystemLoadTimes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            ClientVersion = input.ReadString();
            break;
          }
          case 26: {
            DeviceType = input.ReadString();
            break;
          }
          case 32: {
            FirstTime = input.ReadBool();
            break;
          }
          case 41: {
            LoadToTosLoginTime = input.ReadDouble();
            break;
          }
          case 49: {
            LoadToMapTime = input.ReadDouble();
            break;
          }
          case 58: {
            DeviceOs = input.ReadString();
            break;
          }
          case 66: {
            GraphicsDeviceVendor = input.ReadString();
            break;
          }
          case 74: {
            GraphicsDeviceName = input.ReadString();
            break;
          }
          case 82: {
            GraphicsDeviceType = input.ReadString();
            break;
          }
          case 89: {
            GraphicsShaderLevel = input.ReadDouble();
            break;
          }
          case 98: {
            subsystemLoadTimes_.AddEntriesFrom(input, _repeated_subsystemLoadTimes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
