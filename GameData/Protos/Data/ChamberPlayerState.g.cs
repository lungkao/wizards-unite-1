// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/ChamberPlayerState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/ChamberPlayerState.proto</summary>
  public static partial class ChamberPlayerStateReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/ChamberPlayerState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChamberPlayerStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZXVVByb3Rvcy9EYXRhL0NoYW1iZXJQbGF5ZXJTdGF0ZS5wcm90bxINV1VQ",
            "cm90b3MuRGF0YRonV1VQcm90b3MvRGF0YS9CdWZmL0FjdGl2ZUJ1ZmZMaXN0",
            "LnByb3RvIpgKChJDaGFtYmVyUGxheWVyU3RhdGUSEAoIbmlja25hbWUYASAB",
            "KAkSRwoHd2FpdGluZxgDIAEoCzI0LldVUHJvdG9zLkRhdGEuQ2hhbWJlclBs",
            "YXllclN0YXRlLlBsYXllcldhaXRpbmdTdGF0ZUgAEk4KC2luX3Byb2dyZXNz",
            "GAQgASgLMjcuV1VQcm90b3MuRGF0YS5DaGFtYmVyUGxheWVyU3RhdGUuUGxh",
            "eWVySW5Qcm9ncmVzc1N0YXRlSAASSQoIZmluaXNoZWQYBSABKAsyNS5XVVBy",
            "b3Rvcy5EYXRhLkNoYW1iZXJQbGF5ZXJTdGF0ZS5QbGF5ZXJGaW5pc2hlZFN0",
            "YXRlSAASTwoPcHJvZmVzc2lvbl9pbmZvGAYgASgLMjYuV1VQcm90b3MuRGF0",
            "YS5DaGFtYmVyUGxheWVyU3RhdGUuUGxheWVyUHJvZmVzc2lvbkluZm8SPAoQ",
            "YWN0aXZlX2J1ZmZfbGlzdBgHIAEoCzIiLldVUHJvdG9zLkRhdGEuQnVmZi5B",
            "Y3RpdmVCdWZmTGlzdBotCgdIZWFsdGh5EgoKAmhwGAEgASgDEhYKDmVuZ2Fn",
            "ZWRfbW9iX2lkGAIgASgMGkAKCktub2NrZWRPdXQSGAoQa25vY2tvdXRfdGlt",
            "ZV9tcxgBIAEoAxIYChByZWNvdmVyeV90aW1lX21zGAIgASgDGmgKCk1hcEFi",
            "aWxpdHkSGgoSbWFwX2FiaWxpdHlfZ210X2lkGAEgASgJEg4KBnJhZGl1cxgC",
            "IAEoAhITCgtjb29sZG93bl9tcxgDIAEoAxIZChFtYXBfYWJpbGl0eV9sZXZl",
            "bBgEIAEoBRoyChNQbGF5ZXJGaW5pc2hlZFN0YXRlEhsKE2hhc19jbGFpbWVk",
            "X3Jld2FyZHMYASABKAgamwQKFVBsYXllckluUHJvZ3Jlc3NTdGF0ZRIQCghs",
            "YXRpdHVkZRgBIAEoARIRCglsb25naXR1ZGUYAiABKAESDgoGbWF4X2hwGAUg",
            "ASgDEkMKDW1hcF9hYmlsaXRpZXMYBiADKAsyLC5XVVByb3Rvcy5EYXRhLkNo",
            "YW1iZXJQbGF5ZXJTdGF0ZS5NYXBBYmlsaXR5EjwKB2hlYWx0aHkYByABKAsy",
            "KS5XVVByb3Rvcy5EYXRhLkNoYW1iZXJQbGF5ZXJTdGF0ZS5IZWFsdGh5SAAS",
            "QwoLa25vY2tlZF9vdXQYCCABKAsyLC5XVVByb3Rvcy5EYXRhLkNoYW1iZXJQ",
            "bGF5ZXJTdGF0ZS5Lbm9ja2VkT3V0SAASDQoFZm9jdXMYCSABKAUSEQoJbWF4",
            "X2ZvY3VzGAogASgFGi0KB0hlYWx0aHkSCgoCaHAYASABKAMSFgoOZW5nYWdl",
            "ZF9tb2JfaWQYAiABKAwaQAoKS25vY2tlZE91dBIYChBrbm9ja291dF90aW1l",
            "X21zGAEgASgDEhgKEHJlY292ZXJ5X3RpbWVfbXMYAiABKAMaaAoKTWFwQWJp",
            "bGl0eRIaChJtYXBfYWJpbGl0eV9nbXRfaWQYASABKAkSDgoGcmFkaXVzGAIg",
            "ASgCEhMKC2Nvb2xkb3duX21zGAMgASgDEhkKEW1hcF9hYmlsaXR5X2xldmVs",
            "GAQgASgFQggKBlN0YXR1cxoxChRQbGF5ZXJQcm9mZXNzaW9uSW5mbxIZChFw",
            "cm9mZXNzaW9uX2dtdF9pZBgBIAEoCRoUChJQbGF5ZXJXYWl0aW5nU3RhdGVC",
            "BwoFU3RhdGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Buff.ActiveBuffListReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState), global::WUProtos.Data.ChamberPlayerState.Parser, new[]{ "Nickname", "Waiting", "InProgress", "Finished", "ProfessionInfo", "ActiveBuffList" }, new[]{ "State" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.Healthy), global::WUProtos.Data.ChamberPlayerState.Types.Healthy.Parser, new[]{ "Hp", "EngagedMobId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.KnockedOut), global::WUProtos.Data.ChamberPlayerState.Types.KnockedOut.Parser, new[]{ "KnockoutTimeMs", "RecoveryTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.MapAbility), global::WUProtos.Data.ChamberPlayerState.Types.MapAbility.Parser, new[]{ "MapAbilityGmtId", "Radius", "CooldownMs", "MapAbilityLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.PlayerFinishedState), global::WUProtos.Data.ChamberPlayerState.Types.PlayerFinishedState.Parser, new[]{ "HasClaimedRewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState), global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Parser, new[]{ "Latitude", "Longitude", "MaxHp", "MapAbilities", "Healthy", "KnockedOut", "Focus", "MaxFocus" }, new[]{ "Status" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Types.Healthy), global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Types.Healthy.Parser, new[]{ "Hp", "EngagedMobId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Types.KnockedOut), global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Types.KnockedOut.Parser, new[]{ "KnockoutTimeMs", "RecoveryTimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Types.MapAbility), global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Types.MapAbility.Parser, new[]{ "MapAbilityGmtId", "Radius", "CooldownMs", "MapAbilityLevel" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.PlayerProfessionInfo), global::WUProtos.Data.ChamberPlayerState.Types.PlayerProfessionInfo.Parser, new[]{ "ProfessionGmtId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.ChamberPlayerState.Types.PlayerWaitingState), global::WUProtos.Data.ChamberPlayerState.Types.PlayerWaitingState.Parser, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChamberPlayerState : pb::IMessage<ChamberPlayerState> {
    private static readonly pb::MessageParser<ChamberPlayerState> _parser = new pb::MessageParser<ChamberPlayerState>(() => new ChamberPlayerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChamberPlayerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.ChamberPlayerStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberPlayerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberPlayerState(ChamberPlayerState other) : this() {
      nickname_ = other.nickname_;
      professionInfo_ = other.professionInfo_ != null ? other.professionInfo_.Clone() : null;
      activeBuffList_ = other.activeBuffList_ != null ? other.activeBuffList_.Clone() : null;
      switch (other.StateCase) {
        case StateOneofCase.Waiting:
          Waiting = other.Waiting.Clone();
          break;
        case StateOneofCase.InProgress:
          InProgress = other.InProgress.Clone();
          break;
        case StateOneofCase.Finished:
          Finished = other.Finished.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChamberPlayerState Clone() {
      return new ChamberPlayerState(this);
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 1;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "waiting" field.</summary>
    public const int WaitingFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberPlayerState.Types.PlayerWaitingState Waiting {
      get { return stateCase_ == StateOneofCase.Waiting ? (global::WUProtos.Data.ChamberPlayerState.Types.PlayerWaitingState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Waiting;
      }
    }

    /// <summary>Field number for the "in_progress" field.</summary>
    public const int InProgressFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState InProgress {
      get { return stateCase_ == StateOneofCase.InProgress ? (global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.InProgress;
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberPlayerState.Types.PlayerFinishedState Finished {
      get { return stateCase_ == StateOneofCase.Finished ? (global::WUProtos.Data.ChamberPlayerState.Types.PlayerFinishedState) state_ : null; }
      set {
        state_ = value;
        stateCase_ = value == null ? StateOneofCase.None : StateOneofCase.Finished;
      }
    }

    /// <summary>Field number for the "profession_info" field.</summary>
    public const int ProfessionInfoFieldNumber = 6;
    private global::WUProtos.Data.ChamberPlayerState.Types.PlayerProfessionInfo professionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ChamberPlayerState.Types.PlayerProfessionInfo ProfessionInfo {
      get { return professionInfo_; }
      set {
        professionInfo_ = value;
      }
    }

    /// <summary>Field number for the "active_buff_list" field.</summary>
    public const int ActiveBuffListFieldNumber = 7;
    private global::WUProtos.Data.Buff.ActiveBuffList activeBuffList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Buff.ActiveBuffList ActiveBuffList {
      get { return activeBuffList_; }
      set {
        activeBuffList_ = value;
      }
    }

    private object state_;
    /// <summary>Enum of possible cases for the "State" oneof.</summary>
    public enum StateOneofCase {
      None = 0,
      Waiting = 3,
      InProgress = 4,
      Finished = 5,
    }
    private StateOneofCase stateCase_ = StateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateOneofCase StateCase {
      get { return stateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      stateCase_ = StateOneofCase.None;
      state_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChamberPlayerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChamberPlayerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nickname != other.Nickname) return false;
      if (!object.Equals(Waiting, other.Waiting)) return false;
      if (!object.Equals(InProgress, other.InProgress)) return false;
      if (!object.Equals(Finished, other.Finished)) return false;
      if (!object.Equals(ProfessionInfo, other.ProfessionInfo)) return false;
      if (!object.Equals(ActiveBuffList, other.ActiveBuffList)) return false;
      if (StateCase != other.StateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (stateCase_ == StateOneofCase.Waiting) hash ^= Waiting.GetHashCode();
      if (stateCase_ == StateOneofCase.InProgress) hash ^= InProgress.GetHashCode();
      if (stateCase_ == StateOneofCase.Finished) hash ^= Finished.GetHashCode();
      if (professionInfo_ != null) hash ^= ProfessionInfo.GetHashCode();
      if (activeBuffList_ != null) hash ^= ActiveBuffList.GetHashCode();
      hash ^= (int) stateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nickname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nickname);
      }
      if (stateCase_ == StateOneofCase.Waiting) {
        output.WriteRawTag(26);
        output.WriteMessage(Waiting);
      }
      if (stateCase_ == StateOneofCase.InProgress) {
        output.WriteRawTag(34);
        output.WriteMessage(InProgress);
      }
      if (stateCase_ == StateOneofCase.Finished) {
        output.WriteRawTag(42);
        output.WriteMessage(Finished);
      }
      if (professionInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ProfessionInfo);
      }
      if (activeBuffList_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ActiveBuffList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (stateCase_ == StateOneofCase.Waiting) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Waiting);
      }
      if (stateCase_ == StateOneofCase.InProgress) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InProgress);
      }
      if (stateCase_ == StateOneofCase.Finished) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finished);
      }
      if (professionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfessionInfo);
      }
      if (activeBuffList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveBuffList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChamberPlayerState other) {
      if (other == null) {
        return;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.professionInfo_ != null) {
        if (professionInfo_ == null) {
          ProfessionInfo = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerProfessionInfo();
        }
        ProfessionInfo.MergeFrom(other.ProfessionInfo);
      }
      if (other.activeBuffList_ != null) {
        if (activeBuffList_ == null) {
          ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
        }
        ActiveBuffList.MergeFrom(other.ActiveBuffList);
      }
      switch (other.StateCase) {
        case StateOneofCase.Waiting:
          if (Waiting == null) {
            Waiting = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerWaitingState();
          }
          Waiting.MergeFrom(other.Waiting);
          break;
        case StateOneofCase.InProgress:
          if (InProgress == null) {
            InProgress = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState();
          }
          InProgress.MergeFrom(other.InProgress);
          break;
        case StateOneofCase.Finished:
          if (Finished == null) {
            Finished = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerFinishedState();
          }
          Finished.MergeFrom(other.Finished);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nickname = input.ReadString();
            break;
          }
          case 26: {
            global::WUProtos.Data.ChamberPlayerState.Types.PlayerWaitingState subBuilder = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerWaitingState();
            if (stateCase_ == StateOneofCase.Waiting) {
              subBuilder.MergeFrom(Waiting);
            }
            input.ReadMessage(subBuilder);
            Waiting = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState subBuilder = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState();
            if (stateCase_ == StateOneofCase.InProgress) {
              subBuilder.MergeFrom(InProgress);
            }
            input.ReadMessage(subBuilder);
            InProgress = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.ChamberPlayerState.Types.PlayerFinishedState subBuilder = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerFinishedState();
            if (stateCase_ == StateOneofCase.Finished) {
              subBuilder.MergeFrom(Finished);
            }
            input.ReadMessage(subBuilder);
            Finished = subBuilder;
            break;
          }
          case 50: {
            if (professionInfo_ == null) {
              ProfessionInfo = new global::WUProtos.Data.ChamberPlayerState.Types.PlayerProfessionInfo();
            }
            input.ReadMessage(ProfessionInfo);
            break;
          }
          case 58: {
            if (activeBuffList_ == null) {
              ActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
            }
            input.ReadMessage(ActiveBuffList);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChamberPlayerState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Healthy : pb::IMessage<Healthy> {
        private static readonly pb::MessageParser<Healthy> _parser = new pb::MessageParser<Healthy>(() => new Healthy());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Healthy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberPlayerState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Healthy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Healthy(Healthy other) : this() {
          hp_ = other.hp_;
          engagedMobId_ = other.engagedMobId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Healthy Clone() {
          return new Healthy(this);
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 1;
        private long hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "engaged_mob_id" field.</summary>
        public const int EngagedMobIdFieldNumber = 2;
        private pb::ByteString engagedMobId_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString EngagedMobId {
          get { return engagedMobId_; }
          set {
            engagedMobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Healthy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Healthy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Hp != other.Hp) return false;
          if (EngagedMobId != other.EngagedMobId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Hp != 0L) hash ^= Hp.GetHashCode();
          if (EngagedMobId.Length != 0) hash ^= EngagedMobId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Hp != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Hp);
          }
          if (EngagedMobId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(EngagedMobId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Hp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
          }
          if (EngagedMobId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(EngagedMobId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Healthy other) {
          if (other == null) {
            return;
          }
          if (other.Hp != 0L) {
            Hp = other.Hp;
          }
          if (other.EngagedMobId.Length != 0) {
            EngagedMobId = other.EngagedMobId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Hp = input.ReadInt64();
                break;
              }
              case 18: {
                EngagedMobId = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class KnockedOut : pb::IMessage<KnockedOut> {
        private static readonly pb::MessageParser<KnockedOut> _parser = new pb::MessageParser<KnockedOut>(() => new KnockedOut());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KnockedOut> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberPlayerState.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KnockedOut() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KnockedOut(KnockedOut other) : this() {
          knockoutTimeMs_ = other.knockoutTimeMs_;
          recoveryTimeMs_ = other.recoveryTimeMs_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KnockedOut Clone() {
          return new KnockedOut(this);
        }

        /// <summary>Field number for the "knockout_time_ms" field.</summary>
        public const int KnockoutTimeMsFieldNumber = 1;
        private long knockoutTimeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long KnockoutTimeMs {
          get { return knockoutTimeMs_; }
          set {
            knockoutTimeMs_ = value;
          }
        }

        /// <summary>Field number for the "recovery_time_ms" field.</summary>
        public const int RecoveryTimeMsFieldNumber = 2;
        private long recoveryTimeMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RecoveryTimeMs {
          get { return recoveryTimeMs_; }
          set {
            recoveryTimeMs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KnockedOut);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KnockedOut other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KnockoutTimeMs != other.KnockoutTimeMs) return false;
          if (RecoveryTimeMs != other.RecoveryTimeMs) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (KnockoutTimeMs != 0L) hash ^= KnockoutTimeMs.GetHashCode();
          if (RecoveryTimeMs != 0L) hash ^= RecoveryTimeMs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (KnockoutTimeMs != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(KnockoutTimeMs);
          }
          if (RecoveryTimeMs != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(RecoveryTimeMs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (KnockoutTimeMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(KnockoutTimeMs);
          }
          if (RecoveryTimeMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecoveryTimeMs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KnockedOut other) {
          if (other == null) {
            return;
          }
          if (other.KnockoutTimeMs != 0L) {
            KnockoutTimeMs = other.KnockoutTimeMs;
          }
          if (other.RecoveryTimeMs != 0L) {
            RecoveryTimeMs = other.RecoveryTimeMs;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                KnockoutTimeMs = input.ReadInt64();
                break;
              }
              case 16: {
                RecoveryTimeMs = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MapAbility : pb::IMessage<MapAbility> {
        private static readonly pb::MessageParser<MapAbility> _parser = new pb::MessageParser<MapAbility>(() => new MapAbility());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapAbility> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberPlayerState.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapAbility() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapAbility(MapAbility other) : this() {
          mapAbilityGmtId_ = other.mapAbilityGmtId_;
          radius_ = other.radius_;
          cooldownMs_ = other.cooldownMs_;
          mapAbilityLevel_ = other.mapAbilityLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapAbility Clone() {
          return new MapAbility(this);
        }

        /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
        public const int MapAbilityGmtIdFieldNumber = 1;
        private string mapAbilityGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MapAbilityGmtId {
          get { return mapAbilityGmtId_; }
          set {
            mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 2;
        private float radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "cooldown_ms" field.</summary>
        public const int CooldownMsFieldNumber = 3;
        private long cooldownMs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CooldownMs {
          get { return cooldownMs_; }
          set {
            cooldownMs_ = value;
          }
        }

        /// <summary>Field number for the "map_ability_level" field.</summary>
        public const int MapAbilityLevelFieldNumber = 4;
        private int mapAbilityLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MapAbilityLevel {
          get { return mapAbilityLevel_; }
          set {
            mapAbilityLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapAbility);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapAbility other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
          if (CooldownMs != other.CooldownMs) return false;
          if (MapAbilityLevel != other.MapAbilityLevel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
          if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
          if (CooldownMs != 0L) hash ^= CooldownMs.GetHashCode();
          if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MapAbilityGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(MapAbilityGmtId);
          }
          if (Radius != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Radius);
          }
          if (CooldownMs != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(CooldownMs);
          }
          if (MapAbilityLevel != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(MapAbilityLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MapAbilityGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
          }
          if (Radius != 0F) {
            size += 1 + 4;
          }
          if (CooldownMs != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownMs);
          }
          if (MapAbilityLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapAbilityLevel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapAbility other) {
          if (other == null) {
            return;
          }
          if (other.MapAbilityGmtId.Length != 0) {
            MapAbilityGmtId = other.MapAbilityGmtId;
          }
          if (other.Radius != 0F) {
            Radius = other.Radius;
          }
          if (other.CooldownMs != 0L) {
            CooldownMs = other.CooldownMs;
          }
          if (other.MapAbilityLevel != 0) {
            MapAbilityLevel = other.MapAbilityLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                MapAbilityGmtId = input.ReadString();
                break;
              }
              case 21: {
                Radius = input.ReadFloat();
                break;
              }
              case 24: {
                CooldownMs = input.ReadInt64();
                break;
              }
              case 32: {
                MapAbilityLevel = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayerFinishedState : pb::IMessage<PlayerFinishedState> {
        private static readonly pb::MessageParser<PlayerFinishedState> _parser = new pb::MessageParser<PlayerFinishedState>(() => new PlayerFinishedState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerFinishedState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberPlayerState.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerFinishedState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerFinishedState(PlayerFinishedState other) : this() {
          hasClaimedRewards_ = other.hasClaimedRewards_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerFinishedState Clone() {
          return new PlayerFinishedState(this);
        }

        /// <summary>Field number for the "has_claimed_rewards" field.</summary>
        public const int HasClaimedRewardsFieldNumber = 1;
        private bool hasClaimedRewards_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasClaimedRewards {
          get { return hasClaimedRewards_; }
          set {
            hasClaimedRewards_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerFinishedState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerFinishedState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (HasClaimedRewards != other.HasClaimedRewards) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasClaimedRewards != false) hash ^= HasClaimedRewards.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasClaimedRewards != false) {
            output.WriteRawTag(8);
            output.WriteBool(HasClaimedRewards);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasClaimedRewards != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerFinishedState other) {
          if (other == null) {
            return;
          }
          if (other.HasClaimedRewards != false) {
            HasClaimedRewards = other.HasClaimedRewards;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                HasClaimedRewards = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayerInProgressState : pb::IMessage<PlayerInProgressState> {
        private static readonly pb::MessageParser<PlayerInProgressState> _parser = new pb::MessageParser<PlayerInProgressState>(() => new PlayerInProgressState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerInProgressState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberPlayerState.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInProgressState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInProgressState(PlayerInProgressState other) : this() {
          latitude_ = other.latitude_;
          longitude_ = other.longitude_;
          maxHp_ = other.maxHp_;
          mapAbilities_ = other.mapAbilities_.Clone();
          focus_ = other.focus_;
          maxFocus_ = other.maxFocus_;
          switch (other.StatusCase) {
            case StatusOneofCase.Healthy:
              Healthy = other.Healthy.Clone();
              break;
            case StatusOneofCase.KnockedOut:
              KnockedOut = other.KnockedOut.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerInProgressState Clone() {
          return new PlayerInProgressState(this);
        }

        /// <summary>Field number for the "latitude" field.</summary>
        public const int LatitudeFieldNumber = 1;
        private double latitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Latitude {
          get { return latitude_; }
          set {
            latitude_ = value;
          }
        }

        /// <summary>Field number for the "longitude" field.</summary>
        public const int LongitudeFieldNumber = 2;
        private double longitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Longitude {
          get { return longitude_; }
          set {
            longitude_ = value;
          }
        }

        /// <summary>Field number for the "max_hp" field.</summary>
        public const int MaxHpFieldNumber = 5;
        private long maxHp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MaxHp {
          get { return maxHp_; }
          set {
            maxHp_ = value;
          }
        }

        /// <summary>Field number for the "map_abilities" field.</summary>
        public const int MapAbilitiesFieldNumber = 6;
        private static readonly pb::FieldCodec<global::WUProtos.Data.ChamberPlayerState.Types.MapAbility> _repeated_mapAbilities_codec
            = pb::FieldCodec.ForMessage(50, global::WUProtos.Data.ChamberPlayerState.Types.MapAbility.Parser);
        private readonly pbc::RepeatedField<global::WUProtos.Data.ChamberPlayerState.Types.MapAbility> mapAbilities_ = new pbc::RepeatedField<global::WUProtos.Data.ChamberPlayerState.Types.MapAbility>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::WUProtos.Data.ChamberPlayerState.Types.MapAbility> MapAbilities {
          get { return mapAbilities_; }
        }

        /// <summary>Field number for the "healthy" field.</summary>
        public const int HealthyFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ChamberPlayerState.Types.Healthy Healthy {
          get { return statusCase_ == StatusOneofCase.Healthy ? (global::WUProtos.Data.ChamberPlayerState.Types.Healthy) status_ : null; }
          set {
            status_ = value;
            statusCase_ = value == null ? StatusOneofCase.None : StatusOneofCase.Healthy;
          }
        }

        /// <summary>Field number for the "knocked_out" field.</summary>
        public const int KnockedOutFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::WUProtos.Data.ChamberPlayerState.Types.KnockedOut KnockedOut {
          get { return statusCase_ == StatusOneofCase.KnockedOut ? (global::WUProtos.Data.ChamberPlayerState.Types.KnockedOut) status_ : null; }
          set {
            status_ = value;
            statusCase_ = value == null ? StatusOneofCase.None : StatusOneofCase.KnockedOut;
          }
        }

        /// <summary>Field number for the "focus" field.</summary>
        public const int FocusFieldNumber = 9;
        private int focus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Focus {
          get { return focus_; }
          set {
            focus_ = value;
          }
        }

        /// <summary>Field number for the "max_focus" field.</summary>
        public const int MaxFocusFieldNumber = 10;
        private int maxFocus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxFocus {
          get { return maxFocus_; }
          set {
            maxFocus_ = value;
          }
        }

        private object status_;
        /// <summary>Enum of possible cases for the "Status" oneof.</summary>
        public enum StatusOneofCase {
          None = 0,
          Healthy = 7,
          KnockedOut = 8,
        }
        private StatusOneofCase statusCase_ = StatusOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatusOneofCase StatusCase {
          get { return statusCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStatus() {
          statusCase_ = StatusOneofCase.None;
          status_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerInProgressState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerInProgressState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
          if (MaxHp != other.MaxHp) return false;
          if(!mapAbilities_.Equals(other.mapAbilities_)) return false;
          if (!object.Equals(Healthy, other.Healthy)) return false;
          if (!object.Equals(KnockedOut, other.KnockedOut)) return false;
          if (Focus != other.Focus) return false;
          if (MaxFocus != other.MaxFocus) return false;
          if (StatusCase != other.StatusCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
          if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
          if (MaxHp != 0L) hash ^= MaxHp.GetHashCode();
          hash ^= mapAbilities_.GetHashCode();
          if (statusCase_ == StatusOneofCase.Healthy) hash ^= Healthy.GetHashCode();
          if (statusCase_ == StatusOneofCase.KnockedOut) hash ^= KnockedOut.GetHashCode();
          if (Focus != 0) hash ^= Focus.GetHashCode();
          if (MaxFocus != 0) hash ^= MaxFocus.GetHashCode();
          hash ^= (int) statusCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Latitude != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Latitude);
          }
          if (Longitude != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Longitude);
          }
          if (MaxHp != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(MaxHp);
          }
          mapAbilities_.WriteTo(output, _repeated_mapAbilities_codec);
          if (statusCase_ == StatusOneofCase.Healthy) {
            output.WriteRawTag(58);
            output.WriteMessage(Healthy);
          }
          if (statusCase_ == StatusOneofCase.KnockedOut) {
            output.WriteRawTag(66);
            output.WriteMessage(KnockedOut);
          }
          if (Focus != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(Focus);
          }
          if (MaxFocus != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(MaxFocus);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Latitude != 0D) {
            size += 1 + 8;
          }
          if (Longitude != 0D) {
            size += 1 + 8;
          }
          if (MaxHp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHp);
          }
          size += mapAbilities_.CalculateSize(_repeated_mapAbilities_codec);
          if (statusCase_ == StatusOneofCase.Healthy) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Healthy);
          }
          if (statusCase_ == StatusOneofCase.KnockedOut) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(KnockedOut);
          }
          if (Focus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Focus);
          }
          if (MaxFocus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFocus);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerInProgressState other) {
          if (other == null) {
            return;
          }
          if (other.Latitude != 0D) {
            Latitude = other.Latitude;
          }
          if (other.Longitude != 0D) {
            Longitude = other.Longitude;
          }
          if (other.MaxHp != 0L) {
            MaxHp = other.MaxHp;
          }
          mapAbilities_.Add(other.mapAbilities_);
          if (other.Focus != 0) {
            Focus = other.Focus;
          }
          if (other.MaxFocus != 0) {
            MaxFocus = other.MaxFocus;
          }
          switch (other.StatusCase) {
            case StatusOneofCase.Healthy:
              if (Healthy == null) {
                Healthy = new global::WUProtos.Data.ChamberPlayerState.Types.Healthy();
              }
              Healthy.MergeFrom(other.Healthy);
              break;
            case StatusOneofCase.KnockedOut:
              if (KnockedOut == null) {
                KnockedOut = new global::WUProtos.Data.ChamberPlayerState.Types.KnockedOut();
              }
              KnockedOut.MergeFrom(other.KnockedOut);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Latitude = input.ReadDouble();
                break;
              }
              case 17: {
                Longitude = input.ReadDouble();
                break;
              }
              case 40: {
                MaxHp = input.ReadInt64();
                break;
              }
              case 50: {
                mapAbilities_.AddEntriesFrom(input, _repeated_mapAbilities_codec);
                break;
              }
              case 58: {
                global::WUProtos.Data.ChamberPlayerState.Types.Healthy subBuilder = new global::WUProtos.Data.ChamberPlayerState.Types.Healthy();
                if (statusCase_ == StatusOneofCase.Healthy) {
                  subBuilder.MergeFrom(Healthy);
                }
                input.ReadMessage(subBuilder);
                Healthy = subBuilder;
                break;
              }
              case 66: {
                global::WUProtos.Data.ChamberPlayerState.Types.KnockedOut subBuilder = new global::WUProtos.Data.ChamberPlayerState.Types.KnockedOut();
                if (statusCase_ == StatusOneofCase.KnockedOut) {
                  subBuilder.MergeFrom(KnockedOut);
                }
                input.ReadMessage(subBuilder);
                KnockedOut = subBuilder;
                break;
              }
              case 72: {
                Focus = input.ReadInt32();
                break;
              }
              case 80: {
                MaxFocus = input.ReadInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PlayerInProgressState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Healthy : pb::IMessage<Healthy> {
            private static readonly pb::MessageParser<Healthy> _parser = new pb::MessageParser<Healthy>(() => new Healthy());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Healthy> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Healthy() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Healthy(Healthy other) : this() {
              hp_ = other.hp_;
              engagedMobId_ = other.engagedMobId_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Healthy Clone() {
              return new Healthy(this);
            }

            /// <summary>Field number for the "hp" field.</summary>
            public const int HpFieldNumber = 1;
            private long hp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Hp {
              get { return hp_; }
              set {
                hp_ = value;
              }
            }

            /// <summary>Field number for the "engaged_mob_id" field.</summary>
            public const int EngagedMobIdFieldNumber = 2;
            private pb::ByteString engagedMobId_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString EngagedMobId {
              get { return engagedMobId_; }
              set {
                engagedMobId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Healthy);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Healthy other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Hp != other.Hp) return false;
              if (EngagedMobId != other.EngagedMobId) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Hp != 0L) hash ^= Hp.GetHashCode();
              if (EngagedMobId.Length != 0) hash ^= EngagedMobId.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Hp != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Hp);
              }
              if (EngagedMobId.Length != 0) {
                output.WriteRawTag(18);
                output.WriteBytes(EngagedMobId);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Hp != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
              }
              if (EngagedMobId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(EngagedMobId);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Healthy other) {
              if (other == null) {
                return;
              }
              if (other.Hp != 0L) {
                Hp = other.Hp;
              }
              if (other.EngagedMobId.Length != 0) {
                EngagedMobId = other.EngagedMobId;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Hp = input.ReadInt64();
                    break;
                  }
                  case 18: {
                    EngagedMobId = input.ReadBytes();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class KnockedOut : pb::IMessage<KnockedOut> {
            private static readonly pb::MessageParser<KnockedOut> _parser = new pb::MessageParser<KnockedOut>(() => new KnockedOut());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<KnockedOut> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnockedOut() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnockedOut(KnockedOut other) : this() {
              knockoutTimeMs_ = other.knockoutTimeMs_;
              recoveryTimeMs_ = other.recoveryTimeMs_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public KnockedOut Clone() {
              return new KnockedOut(this);
            }

            /// <summary>Field number for the "knockout_time_ms" field.</summary>
            public const int KnockoutTimeMsFieldNumber = 1;
            private long knockoutTimeMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long KnockoutTimeMs {
              get { return knockoutTimeMs_; }
              set {
                knockoutTimeMs_ = value;
              }
            }

            /// <summary>Field number for the "recovery_time_ms" field.</summary>
            public const int RecoveryTimeMsFieldNumber = 2;
            private long recoveryTimeMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long RecoveryTimeMs {
              get { return recoveryTimeMs_; }
              set {
                recoveryTimeMs_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as KnockedOut);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(KnockedOut other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (KnockoutTimeMs != other.KnockoutTimeMs) return false;
              if (RecoveryTimeMs != other.RecoveryTimeMs) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (KnockoutTimeMs != 0L) hash ^= KnockoutTimeMs.GetHashCode();
              if (RecoveryTimeMs != 0L) hash ^= RecoveryTimeMs.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (KnockoutTimeMs != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(KnockoutTimeMs);
              }
              if (RecoveryTimeMs != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(RecoveryTimeMs);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (KnockoutTimeMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(KnockoutTimeMs);
              }
              if (RecoveryTimeMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecoveryTimeMs);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(KnockedOut other) {
              if (other == null) {
                return;
              }
              if (other.KnockoutTimeMs != 0L) {
                KnockoutTimeMs = other.KnockoutTimeMs;
              }
              if (other.RecoveryTimeMs != 0L) {
                RecoveryTimeMs = other.RecoveryTimeMs;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    KnockoutTimeMs = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    RecoveryTimeMs = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MapAbility : pb::IMessage<MapAbility> {
            private static readonly pb::MessageParser<MapAbility> _parser = new pb::MessageParser<MapAbility>(() => new MapAbility());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MapAbility> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::WUProtos.Data.ChamberPlayerState.Types.PlayerInProgressState.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbility() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbility(MapAbility other) : this() {
              mapAbilityGmtId_ = other.mapAbilityGmtId_;
              radius_ = other.radius_;
              cooldownMs_ = other.cooldownMs_;
              mapAbilityLevel_ = other.mapAbilityLevel_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MapAbility Clone() {
              return new MapAbility(this);
            }

            /// <summary>Field number for the "map_ability_gmt_id" field.</summary>
            public const int MapAbilityGmtIdFieldNumber = 1;
            private string mapAbilityGmtId_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string MapAbilityGmtId {
              get { return mapAbilityGmtId_; }
              set {
                mapAbilityGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "radius" field.</summary>
            public const int RadiusFieldNumber = 2;
            private float radius_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float Radius {
              get { return radius_; }
              set {
                radius_ = value;
              }
            }

            /// <summary>Field number for the "cooldown_ms" field.</summary>
            public const int CooldownMsFieldNumber = 3;
            private long cooldownMs_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long CooldownMs {
              get { return cooldownMs_; }
              set {
                cooldownMs_ = value;
              }
            }

            /// <summary>Field number for the "map_ability_level" field.</summary>
            public const int MapAbilityLevelFieldNumber = 4;
            private int mapAbilityLevel_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int MapAbilityLevel {
              get { return mapAbilityLevel_; }
              set {
                mapAbilityLevel_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MapAbility);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MapAbility other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MapAbilityGmtId != other.MapAbilityGmtId) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
              if (CooldownMs != other.CooldownMs) return false;
              if (MapAbilityLevel != other.MapAbilityLevel) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MapAbilityGmtId.Length != 0) hash ^= MapAbilityGmtId.GetHashCode();
              if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
              if (CooldownMs != 0L) hash ^= CooldownMs.GetHashCode();
              if (MapAbilityLevel != 0) hash ^= MapAbilityLevel.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MapAbilityGmtId.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(MapAbilityGmtId);
              }
              if (Radius != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(Radius);
              }
              if (CooldownMs != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(CooldownMs);
              }
              if (MapAbilityLevel != 0) {
                output.WriteRawTag(32);
                output.WriteInt32(MapAbilityLevel);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MapAbilityGmtId.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MapAbilityGmtId);
              }
              if (Radius != 0F) {
                size += 1 + 4;
              }
              if (CooldownMs != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownMs);
              }
              if (MapAbilityLevel != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapAbilityLevel);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MapAbility other) {
              if (other == null) {
                return;
              }
              if (other.MapAbilityGmtId.Length != 0) {
                MapAbilityGmtId = other.MapAbilityGmtId;
              }
              if (other.Radius != 0F) {
                Radius = other.Radius;
              }
              if (other.CooldownMs != 0L) {
                CooldownMs = other.CooldownMs;
              }
              if (other.MapAbilityLevel != 0) {
                MapAbilityLevel = other.MapAbilityLevel;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    MapAbilityGmtId = input.ReadString();
                    break;
                  }
                  case 21: {
                    Radius = input.ReadFloat();
                    break;
                  }
                  case 24: {
                    CooldownMs = input.ReadInt64();
                    break;
                  }
                  case 32: {
                    MapAbilityLevel = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class PlayerProfessionInfo : pb::IMessage<PlayerProfessionInfo> {
        private static readonly pb::MessageParser<PlayerProfessionInfo> _parser = new pb::MessageParser<PlayerProfessionInfo>(() => new PlayerProfessionInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerProfessionInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberPlayerState.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProfessionInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProfessionInfo(PlayerProfessionInfo other) : this() {
          professionGmtId_ = other.professionGmtId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerProfessionInfo Clone() {
          return new PlayerProfessionInfo(this);
        }

        /// <summary>Field number for the "profession_gmt_id" field.</summary>
        public const int ProfessionGmtIdFieldNumber = 1;
        private string professionGmtId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ProfessionGmtId {
          get { return professionGmtId_; }
          set {
            professionGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerProfessionInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerProfessionInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ProfessionGmtId != other.ProfessionGmtId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ProfessionGmtId.Length != 0) hash ^= ProfessionGmtId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ProfessionGmtId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ProfessionGmtId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ProfessionGmtId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ProfessionGmtId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerProfessionInfo other) {
          if (other == null) {
            return;
          }
          if (other.ProfessionGmtId.Length != 0) {
            ProfessionGmtId = other.ProfessionGmtId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ProfessionGmtId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PlayerWaitingState : pb::IMessage<PlayerWaitingState> {
        private static readonly pb::MessageParser<PlayerWaitingState> _parser = new pb::MessageParser<PlayerWaitingState>(() => new PlayerWaitingState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerWaitingState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::WUProtos.Data.ChamberPlayerState.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerWaitingState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerWaitingState(PlayerWaitingState other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerWaitingState Clone() {
          return new PlayerWaitingState(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerWaitingState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerWaitingState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerWaitingState other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
