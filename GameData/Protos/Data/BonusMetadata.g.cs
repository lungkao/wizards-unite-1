// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/BonusMetadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/BonusMetadata.proto</summary>
  public static partial class BonusMetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/BonusMetadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BonusMetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFXVVByb3Rvcy9EYXRhL0JvbnVzTWV0YWRhdGEucHJvdG8SDVdVUHJvdG9z",
            "LkRhdGEaLldVUHJvdG9zL0RhdGEvUG90aW9uL1BvdGlvbkJvbnVzTWV0YWRh",
            "dGEucHJvdG8aK1dVUHJvdG9zL0RhdGEvV3JhY2tzcHVydEJvbnVzTWV0YWRh",
            "dGEucHJvdG8aNFdVUHJvdG9zL0RhdGEvRmlyc3RUaW1lQ29sbGVjdGlvbkJv",
            "bnVzTWV0YWRhdGEucHJvdG8aLFdVUHJvdG9zL0RhdGEvQ2hhbGxlbmdlL0No",
            "YWxsZW5nZUJvbnVzLnByb3RvGipXVVByb3Rvcy9EYXRhL1NwZWxsR2FtZUJv",
            "bnVzTWV0YWRhdGEucHJvdG8aNFdVUHJvdG9zL0RhdGEvQ2hhbGxlbmdlL0No",
            "YWxsZW5nZUJvbnVzTWV0YWRhdGEucHJvdG8aMFdVUHJvdG9zL0RhdGEvU2hh",
            "cmRDb252ZXJzaW9uQm9udXNNZXRhZGF0YS5wcm90bxo7V1VQcm90b3MvRGF0",
            "YS9DaGFsbGVuZ2UvQ2hhbGxlbmdlQ2hhbWJlckJvbnVzTWV0YWRhdGEucHJv",
            "dG8i1wQKDUJvbnVzTWV0YWRhdGESOwoGcG90aW9uGAEgASgLMikuV1VQcm90",
            "b3MuRGF0YS5Qb3Rpb24uUG90aW9uQm9udXNNZXRhZGF0YUgAEjwKCndyYWNr",
            "c3B1cnQYAiABKAsyJi5XVVByb3Rvcy5EYXRhLldyYWNrc3B1cnRCb251c01l",
            "dGFkYXRhSAASUAoVZmlyc3RfdGltZV9jb2xsZWN0aW9uGAMgASgLMi8uV1VQ",
            "cm90b3MuRGF0YS5GaXJzdFRpbWVDb2xsZWN0aW9uQm9udXNNZXRhZGF0YUgA",
            "EjwKCWNoYWxsZW5nZRgEIAEoCzInLldVUHJvdG9zLkRhdGEuQ2hhbGxlbmdl",
            "LkNoYWxsZW5nZUJvbnVzSAASOwoKc3BlbGxfZ2FtZRgFIAEoCzIlLldVUHJv",
            "dG9zLkRhdGEuU3BlbGxHYW1lQm9udXNNZXRhZGF0YUgAEkoKD2NoYWxsZW5n",
            "ZV9ib251cxgGIAEoCzIvLldVUHJvdG9zLkRhdGEuQ2hhbGxlbmdlLkNoYWxs",
            "ZW5nZUJvbnVzTWV0YWRhdGFIABJHChBzaGFyZF9jb252ZXJzaW9uGAcgASgL",
            "MisuV1VQcm90b3MuRGF0YS5TaGFyZENvbnZlcnNpb25Cb251c01ldGFkYXRh",
            "SAASWQoXY2hhbGxlbmdlX2NoYW1iZXJfYm9udXMYCCABKAsyNi5XVVByb3Rv",
            "cy5EYXRhLkNoYWxsZW5nZS5DaGFsbGVuZ2VDaGFtYmVyQm9udXNNZXRhZGF0",
            "YUgAQg4KDE1ldGFkYXRhVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Potion.PotionBonusMetadataReflection.Descriptor, global::WUProtos.Data.WrackspurtBonusMetadataReflection.Descriptor, global::WUProtos.Data.FirstTimeCollectionBonusMetadataReflection.Descriptor, global::WUProtos.Data.Challenge.ChallengeBonusReflection.Descriptor, global::WUProtos.Data.SpellGameBonusMetadataReflection.Descriptor, global::WUProtos.Data.Challenge.ChallengeBonusMetadataReflection.Descriptor, global::WUProtos.Data.ShardConversionBonusMetadataReflection.Descriptor, global::WUProtos.Data.Challenge.ChallengeChamberBonusMetadataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.BonusMetadata), global::WUProtos.Data.BonusMetadata.Parser, new[]{ "Potion", "Wrackspurt", "FirstTimeCollection", "Challenge", "SpellGame", "ChallengeBonus", "ShardConversion", "ChallengeChamberBonus" }, new[]{ "MetadataType" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BonusMetadata : pb::IMessage<BonusMetadata> {
    private static readonly pb::MessageParser<BonusMetadata> _parser = new pb::MessageParser<BonusMetadata>(() => new BonusMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BonusMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.BonusMetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusMetadata(BonusMetadata other) : this() {
      switch (other.MetadataTypeCase) {
        case MetadataTypeOneofCase.Potion:
          Potion = other.Potion.Clone();
          break;
        case MetadataTypeOneofCase.Wrackspurt:
          Wrackspurt = other.Wrackspurt.Clone();
          break;
        case MetadataTypeOneofCase.FirstTimeCollection:
          FirstTimeCollection = other.FirstTimeCollection.Clone();
          break;
        case MetadataTypeOneofCase.Challenge:
          Challenge = other.Challenge.Clone();
          break;
        case MetadataTypeOneofCase.SpellGame:
          SpellGame = other.SpellGame.Clone();
          break;
        case MetadataTypeOneofCase.ChallengeBonus:
          ChallengeBonus = other.ChallengeBonus.Clone();
          break;
        case MetadataTypeOneofCase.ShardConversion:
          ShardConversion = other.ShardConversion.Clone();
          break;
        case MetadataTypeOneofCase.ChallengeChamberBonus:
          ChallengeChamberBonus = other.ChallengeChamberBonus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BonusMetadata Clone() {
      return new BonusMetadata(this);
    }

    /// <summary>Field number for the "potion" field.</summary>
    public const int PotionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Potion.PotionBonusMetadata Potion {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.Potion ? (global::WUProtos.Data.Potion.PotionBonusMetadata) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.Potion;
      }
    }

    /// <summary>Field number for the "wrackspurt" field.</summary>
    public const int WrackspurtFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.WrackspurtBonusMetadata Wrackspurt {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt ? (global::WUProtos.Data.WrackspurtBonusMetadata) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.Wrackspurt;
      }
    }

    /// <summary>Field number for the "first_time_collection" field.</summary>
    public const int FirstTimeCollectionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.FirstTimeCollectionBonusMetadata FirstTimeCollection {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection ? (global::WUProtos.Data.FirstTimeCollectionBonusMetadata) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.FirstTimeCollection;
      }
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonus Challenge {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.Challenge ? (global::WUProtos.Data.Challenge.ChallengeBonus) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.Challenge;
      }
    }

    /// <summary>Field number for the "spell_game" field.</summary>
    public const int SpellGameFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.SpellGameBonusMetadata SpellGame {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.SpellGame ? (global::WUProtos.Data.SpellGameBonusMetadata) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.SpellGame;
      }
    }

    /// <summary>Field number for the "challenge_bonus" field.</summary>
    public const int ChallengeBonusFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeBonusMetadata ChallengeBonus {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus ? (global::WUProtos.Data.Challenge.ChallengeBonusMetadata) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.ChallengeBonus;
      }
    }

    /// <summary>Field number for the "shard_conversion" field.</summary>
    public const int ShardConversionFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.ShardConversionBonusMetadata ShardConversion {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion ? (global::WUProtos.Data.ShardConversionBonusMetadata) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.ShardConversion;
      }
    }

    /// <summary>Field number for the "challenge_chamber_bonus" field.</summary>
    public const int ChallengeChamberBonusFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Challenge.ChallengeChamberBonusMetadata ChallengeChamberBonus {
      get { return metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus ? (global::WUProtos.Data.Challenge.ChallengeChamberBonusMetadata) metadataType_ : null; }
      set {
        metadataType_ = value;
        metadataTypeCase_ = value == null ? MetadataTypeOneofCase.None : MetadataTypeOneofCase.ChallengeChamberBonus;
      }
    }

    private object metadataType_;
    /// <summary>Enum of possible cases for the "MetadataType" oneof.</summary>
    public enum MetadataTypeOneofCase {
      None = 0,
      Potion = 1,
      Wrackspurt = 2,
      FirstTimeCollection = 3,
      Challenge = 4,
      SpellGame = 5,
      ChallengeBonus = 6,
      ShardConversion = 7,
      ChallengeChamberBonus = 8,
    }
    private MetadataTypeOneofCase metadataTypeCase_ = MetadataTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetadataTypeOneofCase MetadataTypeCase {
      get { return metadataTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMetadataType() {
      metadataTypeCase_ = MetadataTypeOneofCase.None;
      metadataType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BonusMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BonusMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Potion, other.Potion)) return false;
      if (!object.Equals(Wrackspurt, other.Wrackspurt)) return false;
      if (!object.Equals(FirstTimeCollection, other.FirstTimeCollection)) return false;
      if (!object.Equals(Challenge, other.Challenge)) return false;
      if (!object.Equals(SpellGame, other.SpellGame)) return false;
      if (!object.Equals(ChallengeBonus, other.ChallengeBonus)) return false;
      if (!object.Equals(ShardConversion, other.ShardConversion)) return false;
      if (!object.Equals(ChallengeChamberBonus, other.ChallengeChamberBonus)) return false;
      if (MetadataTypeCase != other.MetadataTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) hash ^= Potion.GetHashCode();
      if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) hash ^= Wrackspurt.GetHashCode();
      if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) hash ^= FirstTimeCollection.GetHashCode();
      if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) hash ^= Challenge.GetHashCode();
      if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) hash ^= SpellGame.GetHashCode();
      if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) hash ^= ChallengeBonus.GetHashCode();
      if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) hash ^= ShardConversion.GetHashCode();
      if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) hash ^= ChallengeChamberBonus.GetHashCode();
      hash ^= (int) metadataTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) {
        output.WriteRawTag(10);
        output.WriteMessage(Potion);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) {
        output.WriteRawTag(18);
        output.WriteMessage(Wrackspurt);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) {
        output.WriteRawTag(26);
        output.WriteMessage(FirstTimeCollection);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) {
        output.WriteRawTag(34);
        output.WriteMessage(Challenge);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) {
        output.WriteRawTag(42);
        output.WriteMessage(SpellGame);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) {
        output.WriteRawTag(50);
        output.WriteMessage(ChallengeBonus);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) {
        output.WriteRawTag(58);
        output.WriteMessage(ShardConversion);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) {
        output.WriteRawTag(66);
        output.WriteMessage(ChallengeChamberBonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Potion);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wrackspurt);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstTimeCollection);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Challenge);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpellGame);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeBonus);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShardConversion);
      }
      if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeChamberBonus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BonusMetadata other) {
      if (other == null) {
        return;
      }
      switch (other.MetadataTypeCase) {
        case MetadataTypeOneofCase.Potion:
          if (Potion == null) {
            Potion = new global::WUProtos.Data.Potion.PotionBonusMetadata();
          }
          Potion.MergeFrom(other.Potion);
          break;
        case MetadataTypeOneofCase.Wrackspurt:
          if (Wrackspurt == null) {
            Wrackspurt = new global::WUProtos.Data.WrackspurtBonusMetadata();
          }
          Wrackspurt.MergeFrom(other.Wrackspurt);
          break;
        case MetadataTypeOneofCase.FirstTimeCollection:
          if (FirstTimeCollection == null) {
            FirstTimeCollection = new global::WUProtos.Data.FirstTimeCollectionBonusMetadata();
          }
          FirstTimeCollection.MergeFrom(other.FirstTimeCollection);
          break;
        case MetadataTypeOneofCase.Challenge:
          if (Challenge == null) {
            Challenge = new global::WUProtos.Data.Challenge.ChallengeBonus();
          }
          Challenge.MergeFrom(other.Challenge);
          break;
        case MetadataTypeOneofCase.SpellGame:
          if (SpellGame == null) {
            SpellGame = new global::WUProtos.Data.SpellGameBonusMetadata();
          }
          SpellGame.MergeFrom(other.SpellGame);
          break;
        case MetadataTypeOneofCase.ChallengeBonus:
          if (ChallengeBonus == null) {
            ChallengeBonus = new global::WUProtos.Data.Challenge.ChallengeBonusMetadata();
          }
          ChallengeBonus.MergeFrom(other.ChallengeBonus);
          break;
        case MetadataTypeOneofCase.ShardConversion:
          if (ShardConversion == null) {
            ShardConversion = new global::WUProtos.Data.ShardConversionBonusMetadata();
          }
          ShardConversion.MergeFrom(other.ShardConversion);
          break;
        case MetadataTypeOneofCase.ChallengeChamberBonus:
          if (ChallengeChamberBonus == null) {
            ChallengeChamberBonus = new global::WUProtos.Data.Challenge.ChallengeChamberBonusMetadata();
          }
          ChallengeChamberBonus.MergeFrom(other.ChallengeChamberBonus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.Potion.PotionBonusMetadata subBuilder = new global::WUProtos.Data.Potion.PotionBonusMetadata();
            if (metadataTypeCase_ == MetadataTypeOneofCase.Potion) {
              subBuilder.MergeFrom(Potion);
            }
            input.ReadMessage(subBuilder);
            Potion = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.WrackspurtBonusMetadata subBuilder = new global::WUProtos.Data.WrackspurtBonusMetadata();
            if (metadataTypeCase_ == MetadataTypeOneofCase.Wrackspurt) {
              subBuilder.MergeFrom(Wrackspurt);
            }
            input.ReadMessage(subBuilder);
            Wrackspurt = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.FirstTimeCollectionBonusMetadata subBuilder = new global::WUProtos.Data.FirstTimeCollectionBonusMetadata();
            if (metadataTypeCase_ == MetadataTypeOneofCase.FirstTimeCollection) {
              subBuilder.MergeFrom(FirstTimeCollection);
            }
            input.ReadMessage(subBuilder);
            FirstTimeCollection = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.Challenge.ChallengeBonus subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonus();
            if (metadataTypeCase_ == MetadataTypeOneofCase.Challenge) {
              subBuilder.MergeFrom(Challenge);
            }
            input.ReadMessage(subBuilder);
            Challenge = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.SpellGameBonusMetadata subBuilder = new global::WUProtos.Data.SpellGameBonusMetadata();
            if (metadataTypeCase_ == MetadataTypeOneofCase.SpellGame) {
              subBuilder.MergeFrom(SpellGame);
            }
            input.ReadMessage(subBuilder);
            SpellGame = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.Challenge.ChallengeBonusMetadata subBuilder = new global::WUProtos.Data.Challenge.ChallengeBonusMetadata();
            if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeBonus) {
              subBuilder.MergeFrom(ChallengeBonus);
            }
            input.ReadMessage(subBuilder);
            ChallengeBonus = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.ShardConversionBonusMetadata subBuilder = new global::WUProtos.Data.ShardConversionBonusMetadata();
            if (metadataTypeCase_ == MetadataTypeOneofCase.ShardConversion) {
              subBuilder.MergeFrom(ShardConversion);
            }
            input.ReadMessage(subBuilder);
            ShardConversion = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Challenge.ChallengeChamberBonusMetadata subBuilder = new global::WUProtos.Data.Challenge.ChallengeChamberBonusMetadata();
            if (metadataTypeCase_ == MetadataTypeOneofCase.ChallengeChamberBonus) {
              subBuilder.MergeFrom(ChallengeChamberBonus);
            }
            input.ReadMessage(subBuilder);
            ChallengeChamberBonus = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
