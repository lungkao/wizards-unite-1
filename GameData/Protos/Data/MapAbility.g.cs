// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/MapAbility.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/MapAbility.proto</summary>
  public static partial class MapAbilityReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/MapAbility.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MapAbilityReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5XVVByb3Rvcy9EYXRhL01hcEFiaWxpdHkucHJvdG8SDVdVUHJvdG9zLkRh",
            "dGEaKVdVUHJvdG9zL0VudW1zL01hcEFiaWxpdHlUYXJnZXRUeXBlLnByb3Rv",
            "GiNXVVByb3Rvcy9EYXRhL01hcEFiaWxpdHlMZXZlbC5wcm90byLiAQoKTWFw",
            "QWJpbGl0eRIKCgJpZBgBIAEoCRI5Cgt0YXJnZXRfdHlwZRgCIAEoDjIkLldV",
            "UHJvdG9zLkVudW1zLk1hcEFiaWxpdHlUYXJnZXRUeXBlEhgKEGJhc2VfYnVm",
            "Zl9nbXRfaWQYAyABKAkSDgoGcmFkaXVzGAQgASgCEhMKC2Nvb2xkb3duX21z",
            "GAUgASgNEhIKCmZvY3VzX2Nvc3QYBiABKAUSOgoSbWFwX2FiaWxpdHlfbGV2",
            "ZWxzGAcgAygLMh4uV1VQcm90b3MuRGF0YS5NYXBBYmlsaXR5TGV2ZWxiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Enums.MapAbilityTargetTypeReflection.Descriptor, global::WUProtos.Data.MapAbilityLevelReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.MapAbility), global::WUProtos.Data.MapAbility.Parser, new[]{ "Id", "TargetType", "BaseBuffGmtId", "Radius", "CooldownMs", "FocusCost", "MapAbilityLevels" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MapAbility : pb::IMessage<MapAbility> {
    private static readonly pb::MessageParser<MapAbility> _parser = new pb::MessageParser<MapAbility>(() => new MapAbility());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapAbility> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.MapAbilityReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapAbility() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapAbility(MapAbility other) : this() {
      id_ = other.id_;
      targetType_ = other.targetType_;
      baseBuffGmtId_ = other.baseBuffGmtId_;
      radius_ = other.radius_;
      cooldownMs_ = other.cooldownMs_;
      focusCost_ = other.focusCost_;
      mapAbilityLevels_ = other.mapAbilityLevels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapAbility Clone() {
      return new MapAbility(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_type" field.</summary>
    public const int TargetTypeFieldNumber = 2;
    private global::WUProtos.Enums.MapAbilityTargetType targetType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Enums.MapAbilityTargetType TargetType {
      get { return targetType_; }
      set {
        targetType_ = value;
      }
    }

    /// <summary>Field number for the "base_buff_gmt_id" field.</summary>
    public const int BaseBuffGmtIdFieldNumber = 3;
    private string baseBuffGmtId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseBuffGmtId {
      get { return baseBuffGmtId_; }
      set {
        baseBuffGmtId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 4;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "cooldown_ms" field.</summary>
    public const int CooldownMsFieldNumber = 5;
    private uint cooldownMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CooldownMs {
      get { return cooldownMs_; }
      set {
        cooldownMs_ = value;
      }
    }

    /// <summary>Field number for the "focus_cost" field.</summary>
    public const int FocusCostFieldNumber = 6;
    private int focusCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FocusCost {
      get { return focusCost_; }
      set {
        focusCost_ = value;
      }
    }

    /// <summary>Field number for the "map_ability_levels" field.</summary>
    public const int MapAbilityLevelsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::WUProtos.Data.MapAbilityLevel> _repeated_mapAbilityLevels_codec
        = pb::FieldCodec.ForMessage(58, global::WUProtos.Data.MapAbilityLevel.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.MapAbilityLevel> mapAbilityLevels_ = new pbc::RepeatedField<global::WUProtos.Data.MapAbilityLevel>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.MapAbilityLevel> MapAbilityLevels {
      get { return mapAbilityLevels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapAbility);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapAbility other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TargetType != other.TargetType) return false;
      if (BaseBuffGmtId != other.BaseBuffGmtId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (CooldownMs != other.CooldownMs) return false;
      if (FocusCost != other.FocusCost) return false;
      if(!mapAbilityLevels_.Equals(other.mapAbilityLevels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TargetType != 0) hash ^= TargetType.GetHashCode();
      if (BaseBuffGmtId.Length != 0) hash ^= BaseBuffGmtId.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (CooldownMs != 0) hash ^= CooldownMs.GetHashCode();
      if (FocusCost != 0) hash ^= FocusCost.GetHashCode();
      hash ^= mapAbilityLevels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TargetType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TargetType);
      }
      if (BaseBuffGmtId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BaseBuffGmtId);
      }
      if (Radius != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Radius);
      }
      if (CooldownMs != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CooldownMs);
      }
      if (FocusCost != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FocusCost);
      }
      mapAbilityLevels_.WriteTo(output, _repeated_mapAbilityLevels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetType);
      }
      if (BaseBuffGmtId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseBuffGmtId);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (CooldownMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CooldownMs);
      }
      if (FocusCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FocusCost);
      }
      size += mapAbilityLevels_.CalculateSize(_repeated_mapAbilityLevels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapAbility other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TargetType != 0) {
        TargetType = other.TargetType;
      }
      if (other.BaseBuffGmtId.Length != 0) {
        BaseBuffGmtId = other.BaseBuffGmtId;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.CooldownMs != 0) {
        CooldownMs = other.CooldownMs;
      }
      if (other.FocusCost != 0) {
        FocusCost = other.FocusCost;
      }
      mapAbilityLevels_.Add(other.mapAbilityLevels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            TargetType = (global::WUProtos.Enums.MapAbilityTargetType) input.ReadEnum();
            break;
          }
          case 26: {
            BaseBuffGmtId = input.ReadString();
            break;
          }
          case 37: {
            Radius = input.ReadFloat();
            break;
          }
          case 40: {
            CooldownMs = input.ReadUInt32();
            break;
          }
          case 48: {
            FocusCost = input.ReadInt32();
            break;
          }
          case 58: {
            mapAbilityLevels_.AddEntriesFrom(input, _repeated_mapAbilityLevels_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
