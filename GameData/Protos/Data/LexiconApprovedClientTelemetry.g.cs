// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Data/LexiconApprovedClientTelemetry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Data {

  /// <summary>Holder for reflection information generated from WUProtos/Data/LexiconApprovedClientTelemetry.proto</summary>
  public static partial class LexiconApprovedClientTelemetryReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Data/LexiconApprovedClientTelemetry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LexiconApprovedClientTelemetryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJXVVByb3Rvcy9EYXRhL0xleGljb25BcHByb3ZlZENsaWVudFRlbGVtZXRy",
            "eS5wcm90bxINV1VQcm90b3MuRGF0YRowV1VQcm90b3MvRGF0YS9UZWxlbWV0",
            "cnkvUGxhdGZvcm1TZXJ2ZXJEYXRhLnByb3RvGjFXVVByb3Rvcy9EYXRhL0Ns",
            "aWVudC9DbGllbnRUZWxlbWV0cnlTdGFydHVwLnByb3RvGj1XVVByb3Rvcy9E",
            "YXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlTd2lzaFNwZWxsR2FtZVN0YXJ0",
            "LnByb3RvGjtXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlT",
            "d2lzaFNwZWxsR2FtZUVuZC5wcm90bxozV1VQcm90b3MvRGF0YS9DbGllbnQv",
            "Q2xpZW50VGVsZW1ldHJ5QXNzZXRMb2FkLnByb3RvGjhXVVByb3Rvcy9EYXRh",
            "L0NsaWVudC9DbGllbnRUZWxlbWV0cnlCdW5kbGVEb3dubG9hZC5wcm90bxoz",
            "V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5U3RvcHdhdGNo",
            "LnByb3RvGjNXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlT",
            "bW9rZVRlc3QucHJvdG8aRFdVUHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRl",
            "bGVtZXRyeUVudmlyb25tZW50YWxUYWdzVUlFbnRlcmVkLnByb3RvGlNXVVBy",
            "b3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlFbnZpcm9ubWVudGFs",
            "VGFnU2V2ZXJlV2VhdGhlckFja25vd2xlZGdlZC5wcm90bxo4V1VQcm90b3Mv",
            "RGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5QXZhdGFySW50ZXJhY3QucHJv",
            "dG8aNVdVUHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeVJld2Fy",
            "ZHNGbG93LnByb3RvGkJXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxl",
            "bWV0cnlQb3J0a2V5c1dyYWNrc3B1cnRUYXBwZWQucHJvdG8aRFdVUHJvdG9z",
            "L0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeVBvcnRrZXlzT3V0T2ZCb3Vu",
            "ZHNSZWFjaGVkLnByb3RvGkFXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRU",
            "ZWxlbWV0cnlQb3J0a2V5c0FkdmFuY2VkQVJDaGVjay5wcm90bxo8V1VQcm90",
            "b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5UHJvZmVzc2lvbk1haW5N",
            "ZW51LnByb3RvGkBXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0",
            "cnlQcm9mZXNzaW9uTm9kZVNlbGVjdGVkLnByb3RvGjVXVVByb3Rvcy9EYXRh",
            "L0NsaWVudC9DbGllbnRUZWxlbWV0cnlCdXR0b25QcmVzcy5wcm90bxpFV1VQ",
            "cm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5V2l6YXJkaW5nQ2hh",
            "bGxlbmdlU2VsZWN0TW9iLnByb3RvGkRXVVByb3Rvcy9EYXRhL0NsaWVudC9D",
            "bGllbnRUZWxlbWV0cnlXaXphcmRpbmdDaGFsbGVuZ2VNb3JlSW5mby5wcm90",
            "bxo6V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5TGFuZG1h",
            "cmtJbnRlcmFjdC5wcm90bxpKV1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50",
            "VGVsZW1ldHJ5Q29tYmF0R2FtZU9mZmVuc2l2ZUxvY2tPbkF0dGVtcHQucHJv",
            "dG8aSVdVUHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeUNvbWJh",
            "dEdhbWVPZmZlbnNpdmVUcmFjZUF0dGVtcHQucHJvdG8aRldVUHJvdG9zL0Rh",
            "dGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeUNvbWJhdEdhbWVQcm90ZWdvQ2Fz",
            "dEF0dGVtcHQucHJvdG8aSldVUHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRl",
            "bGVtZXRyeUNvbWJhdEdhbWVPdXRPZkVuZXJneURpYWxvZ1Nob3duLnByb3Rv",
            "Gk1XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlDb21iYXRH",
            "YW1lT3V0T2ZFbmVyZ3lQdXJjaGFzZUJ1dHRvbi5wcm90bxpAV1VQcm90b3Mv",
            "RGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5Q29tYmF0R2FtZVBvdGlvbkJ1",
            "dHRvbi5wcm90bxo0V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1l",
            "dHJ5SW1wcmVzc2lvbi5wcm90bxpBV1VQcm90b3MvRGF0YS9DbGllbnQvQ2xp",
            "ZW50VGVsZW1ldHJ5RGVzY3JpcHRpb25DbGlja3Rocm91Z2gucHJvdG8aP1dV",
            "UHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeUh5cGVybGlua0Ns",
            "aWNrdGhyb3VnaC5wcm90bxo6V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50",
            "VGVsZW1ldHJ5U3VyZmFjZURldGVjdGlvbi5wcm90bxo4V1VQcm90b3MvRGF0",
            "YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5RW5jb3VudGVyU3RhcnQucHJvdG8a",
            "PldVUHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeVBlcm1pc3Np",
            "b25zUmVxdWVzdGVkLnByb3RvGkBXVVByb3Rvcy9EYXRhL0NsaWVudC9DbGll",
            "bnRUZWxlbWV0cnlQZXJtaXNzaW9uc0NoZWNrRmFpbGVkLnByb3RvGjtXVVBy",
            "b3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlEZWVwbGlua1RyaWdn",
            "ZXJlZC5wcm90bxo0V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1l",
            "dHJ5TG9naW5TdGFydC5wcm90bxo3V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xp",
            "ZW50VGVsZW1ldHJ5TG9naW5Db21wbGV0ZS5wcm90bxpCV1VQcm90b3MvRGF0",
            "YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5UG90aW9uc01hc3Rlck5vdGVBdHRl",
            "bXB0LnByb3RvGj9XVVByb3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0",
            "cnlQcm9maWxlUG9ydHJhaXRBY3Rpb24ucHJvdG8aQFdVUHJvdG9zL0RhdGEv",
            "Q2xpZW50L0NsaWVudFRlbGVtZXRyeVByb2ZpbGVCdXR0b25SYW5kb21pemUu",
            "cHJvdG8aO1dVUHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeVBy",
            "b2ZpbGVCdXR0b25MZW5zLnByb3RvGj1XVVByb3Rvcy9EYXRhL0NsaWVudC9D",
            "bGllbnRUZWxlbWV0cnlQcm9maWxlQnV0dG9uQXNzc2V0LnByb3RvGjtXVVBy",
            "b3Rvcy9EYXRhL0NsaWVudC9DbGllbnRUZWxlbWV0cnlQcm9maWxlU2NyZWVu",
            "R3JhYi5wcm90bxo5V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1l",
            "dHJ5T3V0cG9zdEludGVyYWN0LnByb3RvGjxXVVByb3Rvcy9EYXRhL0NsaWVu",
            "dC9DbGllbnRUZWxlbWV0cnlHcmVlbmhvdXNlSW50ZXJhY3QucHJvdG8aN1dV",
            "UHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeUZhbWlseURldGFp",
            "bHMucHJvdG8aOFdVUHJvdG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRy",
            "eVN0aWNrZXJEZXRhaWxzLnByb3RvGjZXVVByb3Rvcy9EYXRhL0NsaWVudC9D",
            "bGllbnRUZWxlbWV0cnlSZWdpc3RyeUluZm8ucHJvdG8aMVdVUHJvdG9zL0Rh",
            "dGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeVJhdGVBcHAucHJvdG8aM1dVUHJv",
            "dG9zL0RhdGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeUV4Y2VwdGlvbi5wcm90",
            "bxo/V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5U2V0dGlu",
            "Z3NBUk1vZGVUb2dnbGVkLnByb3RvGkRXVVByb3Rvcy9EYXRhL0NsaWVudC9D",
            "bGllbnRUZWxlbWV0cnlTZXR0aW5nc0JhdHRlcnlNb2RlVG9nZ2xlZC5wcm90",
            "bxo9V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5U2V0dGlu",
            "Z3NBdXRoVXBkYXRlZC5wcm90bxo4V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xp",
            "ZW50VGVsZW1ldHJ5U3RvcmVQb3B1cE9wZW4ucHJvdG8aNldVUHJvdG9zL0Rh",
            "dGEvQ2xpZW50L0NsaWVudFRlbGVtZXRyeVN0b3JlVGFiT3Blbi5wcm90bxo9",
            "V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50VGVsZW1ldHJ5VmF1bHRJdGVt",
            "SW1wcmVzc2lvbi5wcm90bxo8V1VQcm90b3MvRGF0YS9DbGllbnQvQ2xpZW50",
            "VGVsZW1ldHJ5VmF1bHRUYWJJbXByZXNzaW9uLnByb3RvIrEnCh5MZXhpY29u",
            "QXBwcm92ZWRDbGllbnRUZWxlbWV0cnkSPwoHc3RhcnR1cBgBIAEoCzIsLldV",
            "UHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRyeVN0YXJ0dXBIABJa",
            "ChZzd2lzaF9zcGVsbF9nYW1lX3N0YXJ0GAIgASgLMjguV1VQcm90b3MuRGF0",
            "YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5U3dpc2hTcGVsbEdhbWVTdGFydEgA",
            "ElYKFHN3aXNoX3NwZWxsX2dhbWVfZW5kGAMgASgLMjYuV1VQcm90b3MuRGF0",
            "YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5U3dpc2hTcGVsbEdhbWVFbmRIABJE",
            "Cgphc3NldF9sb2FkGAQgASgLMi4uV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xp",
            "ZW50VGVsZW1ldHJ5QXNzZXRMb2FkSAASTgoPYnVuZGxlX2Rvd25sb2FkGAUg",
            "ASgLMjMuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5QnVu",
            "ZGxlRG93bmxvYWRIABJDCglzdG9wd2F0Y2gYBiABKAsyLi5XVVByb3Rvcy5E",
            "YXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlTdG9wd2F0Y2hIABJECgpzbW9r",
            "ZV90ZXN0GAcgASgLMi4uV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVs",
            "ZW1ldHJ5U21va2VUZXN0SAASaAodZW52aXJvbm1lbnRhbF90YWdzX3VpX2Vu",
            "dGVyZWQYCCABKAsyPy5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxl",
            "bWV0cnlFbnZpcm9ubWVudGFsVGFnc1VJRW50ZXJlZEgAEoEBCidlbnZpcm9u",
            "bWVudGFsX3RhZ3Nfd2VhdGhlcl9hY2tub3dsZWRnZWQYCSABKAsyTi5XVVBy",
            "b3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlFbnZpcm9ubWVudGFs",
            "VGFnU2V2ZXJlV2VhdGhlckFja25vd2xlZGdlZEgAEk4KD2F2YXRhcl9pbnRl",
            "cmFjdBgKIAEoCzIzLldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVt",
            "ZXRyeUF2YXRhckludGVyYWN0SAASSAoMcmV3YXJkc19mbG93GAsgASgLMjAu",
            "V1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5UmV3YXJkc0Zs",
            "b3dIABJjChpwb3J0a2V5c193cmFja3NwdXJ0X3RhcHBlZBgMIAEoCzI9LldV",
            "UHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRyeVBvcnRrZXlzV3Jh",
            "Y2tzcHVydFRhcHBlZEgAEmkKHnBvcnRrZXlzX291dF9vZl9ib3VuZHNfcmVh",
            "Y2hlZBgNIAEoCzI/LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVt",
            "ZXRyeVBvcnRrZXlzT3V0T2ZCb3VuZHNSZWFjaGVkSAASYgoacG9ydGtleXNf",
            "YWR2YW5jZWRfYXJfY2hlY2sYDiABKAsyPC5XVVByb3Rvcy5EYXRhLkNsaWVu",
            "dC5DbGllbnRUZWxlbWV0cnlQb3J0a2V5c0FkdmFuY2VkQVJDaGVja0gAElcK",
            "FHByb2Zlc3Npb25fbWFpbl9tZW51GA8gASgLMjcuV1VQcm90b3MuRGF0YS5D",
            "bGllbnQuQ2xpZW50VGVsZW1ldHJ5UHJvZmVzc2lvbk1haW5NZW51SAASXwoY",
            "cHJvZmVzc2lvbl9ub2RlX3NlbGVjdGVkGBAgASgLMjsuV1VQcm90b3MuRGF0",
            "YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5UHJvZmVzc2lvbk5vZGVTZWxlY3Rl",
            "ZEgAEkgKDGJ1dHRvbl9wcmVzcxgRIAEoCzIwLldVUHJvdG9zLkRhdGEuQ2xp",
            "ZW50LkNsaWVudFRlbGVtZXRyeUJ1dHRvblByZXNzSAASVgoKc2VsZWN0X21v",
            "YhgSIAEoCzJALldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRy",
            "eVdpemFyZGluZ0NoYWxsZW5nZVNlbGVjdE1vYkgAElQKCW1vcmVfaW5mbxgT",
            "IAEoCzI/LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRyeVdp",
            "emFyZGluZ0NoYWxsZW5nZU1vcmVJbmZvSAASUgoRbGFuZG1hcmtfaW50ZXJh",
            "Y3QYFCABKAsyNS5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0",
            "cnlMYW5kbWFya0ludGVyYWN0SAASYAoPbG9ja19vbl9hdHRlbXB0GBUgASgL",
            "MkUuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5Q29tYmF0",
            "R2FtZU9mZmVuc2l2ZUxvY2tPbkF0dGVtcHRIABJnChdvZmZlbnNpdmVfdHJh",
            "Y2VfYXR0ZW1wdBgWIAEoCzJELldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVu",
            "dFRlbGVtZXRyeUNvbWJhdEdhbWVPZmZlbnNpdmVUcmFjZUF0dGVtcHRIABJh",
            "ChRwcm90ZWdvX2Nhc3RfYXR0ZW1wdBgXIAEoCzJBLldVUHJvdG9zLkRhdGEu",
            "Q2xpZW50LkNsaWVudFRlbGVtZXRyeUNvbWJhdEdhbWVQcm90ZWdvQ2FzdEF0",
            "dGVtcHRIABJkChNvdXRfb2ZfZW5lcmd5X3Nob3duGBggASgLMkUuV1VQcm90",
            "b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5Q29tYmF0R2FtZU91dE9m",
            "RW5lcmd5RGlhbG9nU2hvd25IABJqChZvdXRfb2ZfZW5lcmd5X3B1cmNoYXNl",
            "GBkgASgLMkguV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5",
            "Q29tYmF0R2FtZU91dE9mRW5lcmd5UHVyY2hhc2VCdXR0b25IABJbChRjb21i",
            "YXRfcG90aW9uX2J1dHRvbhgaIAEoCzI7LldVUHJvdG9zLkRhdGEuQ2xpZW50",
            "LkNsaWVudFRlbGVtZXRyeUNvbWJhdEdhbWVQb3Rpb25CdXR0b25IABJFCgpp",
            "bXByZXNzaW9uGBsgASgLMi8uV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50",
            "VGVsZW1ldHJ5SW1wcmVzc2lvbkgAEmAKGGRlc2NyaXB0aW9uX2NsaWNrdGhy",
            "b3VnaBgcIAEoCzI8LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVt",
            "ZXRyeURlc2NyaXB0aW9uQ2xpY2t0aHJvdWdoSAASXAoWaHlwZXJsaW5rX2Ns",
            "aWNrdGhyb3VnaBgdIAEoCzI6LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVu",
            "dFRlbGVtZXRyeUh5cGVybGlua0NsaWNrdGhyb3VnaEgAElIKEXN1cmZhY2Vf",
            "ZGV0ZWN0aW9uGB4gASgLMjUuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50",
            "VGVsZW1ldHJ5U3VyZmFjZURldGVjdGlvbkgAEk4KD2VuY291bnRlcl9zdGFy",
            "dBgfIAEoCzIzLldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRy",
            "eUVuY291bnRlclN0YXJ0SAASWQoUcGVybWlzc2lvbl9yZXF1ZXN0ZWQYICAB",
            "KAsyOS5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlQZXJt",
            "aXNzaW9uc1JlcXVlc3RlZEgAEl4KF3Blcm1pc3Npb25fY2hlY2tfZmFpbGVk",
            "GCEgASgLMjsuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5",
            "UGVybWlzc2lvbnNDaGVja0ZhaWxlZEgAElQKEmRlZXBsaW5rX3RyaWdnZXJl",
            "ZBgiIAEoCzI2LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRy",
            "eURlZXBsaW5rVHJpZ2dlcmVkSAASRgoLbG9naW5fc3RhcnQYIyABKAsyLy5X",
            "VVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlMb2dpblN0YXJ0",
            "SAASTAoObG9naW5fY29tcGxldGUYJCABKAsyMi5XVVByb3Rvcy5EYXRhLkNs",
            "aWVudC5DbGllbnRUZWxlbWV0cnlMb2dpbkNvbXBsZXRlSAASZAobcG90aW9u",
            "c19tYXN0ZXJfbm90ZV9hdHRlbXB0GCUgASgLMj0uV1VQcm90b3MuRGF0YS5D",
            "bGllbnQuQ2xpZW50VGVsZW1ldHJ5UG90aW9uc01hc3Rlck5vdGVBdHRlbXB0",
            "SAASXQoXcHJvZmlsZV9wb3J0cmFpdF9hY3Rpb24YJiABKAsyOi5XVVByb3Rv",
            "cy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlQcm9maWxlUG9ydHJhaXRB",
            "Y3Rpb25IABJfChhwcm9maWxlX2J1dHRvbl9yYW5kb21pemUYJyABKAsyOy5X",
            "VVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlQcm9maWxlQnV0",
            "dG9uUmFuZG9taXplSAASVQoTcHJvZmlsZV9idXR0b25fbGVucxgoIAEoCzI2",
            "LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRyeVByb2ZpbGVC",
            "dXR0b25MZW5zSAASWAoUcHJvZmlsZV9idXR0b25fYXNzZXQYKSABKAsyOC5X",
            "VVByb3Rvcy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlQcm9maWxlQnV0",
            "dG9uQXNzc2V0SAASVAoScHJvZmlsZV9zY3JlZW5ncmFiGCogASgLMjYuV1VQ",
            "cm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5UHJvZmlsZVNjcmVl",
            "bkdyYWJIABJQChBvdXRwb3N0X2ludGVyYWN0GCsgASgLMjQuV1VQcm90b3Mu",
            "RGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5T3V0cG9zdEludGVyYWN0SAAS",
            "VgoTZ3JlZW5ob3VzZV9pbnRlcmFjdBgsIAEoCzI3LldVUHJvdG9zLkRhdGEu",
            "Q2xpZW50LkNsaWVudFRlbGVtZXRyeUdyZWVuaG91c2VJbnRlcmFjdEgAElQK",
            "FmZhbWlseV9kZXRhaWxzX2NsaWNrZWQYLSABKAsyMi5XVVByb3Rvcy5EYXRh",
            "LkNsaWVudC5DbGllbnRUZWxlbWV0cnlGYW1pbHlEZXRhaWxzSAASVgoXc3Rp",
            "Y2tlcl9kZXRhaWxzX2NsaWNrZWQYLiABKAsyMy5XVVByb3Rvcy5EYXRhLkNs",
            "aWVudC5DbGllbnRUZWxlbWV0cnlTdGlja2VyRGV0YWlsc0gAElIKFXJlZ2lz",
            "dHJ5X2luZm9fY2xpY2tlZBgvIAEoCzIxLldVUHJvdG9zLkRhdGEuQ2xpZW50",
            "LkNsaWVudFRlbGVtZXRyeVJlZ2lzdHJ5SW5mb0gAEkAKCHJhdGVfYXBwGDAg",
            "ASgLMiwuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5UmF0",
            "ZUFwcEgAEkgKDmV4Y2VwdGlvbl9pbmZvGDEgASgLMi4uV1VQcm90b3MuRGF0",
            "YS5DbGllbnQuQ2xpZW50VGVsZW1ldHJ5RXhjZXB0aW9uSAASVQoPYXJfbW9k",
            "ZV90b2dnbGVkGDIgASgLMjouV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50",
            "VGVsZW1ldHJ5U2V0dGluZ3NBUk1vZGVUb2dnbGVkSAASXwoUYmF0dGVyeV9t",
            "b2RlX3RvZ2dsZWQYMyABKAsyPy5XVVByb3Rvcy5EYXRhLkNsaWVudC5DbGll",
            "bnRUZWxlbWV0cnlTZXR0aW5nc0JhdHRlcnlNb2RlVG9nZ2xlZEgAElAKDGF1",
            "dGhfdXBkYXRlZBg0IAEoCzI4LldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVu",
            "dFRlbGVtZXRyeVNldHRpbmdzQXV0aFVwZGF0ZWRIABJPChBzdG9yZV9wb3B1",
            "cF9vcGVuGDUgASgLMjMuV1VQcm90b3MuRGF0YS5DbGllbnQuQ2xpZW50VGVs",
            "ZW1ldHJ5U3RvcmVQb3B1cE9wZW5IABJLCg5zdG9yZV90YWJfb3Blbhg2IAEo",
            "CzIxLldVUHJvdG9zLkRhdGEuQ2xpZW50LkNsaWVudFRlbGVtZXRyeVN0b3Jl",
            "VGFiT3BlbkgAElQKEHZhdWx0X3BvcHVwX29wZW4YNyABKAsyOC5XVVByb3Rv",
            "cy5EYXRhLkNsaWVudC5DbGllbnRUZWxlbWV0cnlWYXVsdEl0ZW1JbXByZXNz",
            "aW9uSAASUQoOdmF1bHRfdGFiX29wZW4YOCABKAsyNy5XVVByb3Rvcy5EYXRh",
            "LkNsaWVudC5DbGllbnRUZWxlbWV0cnlWYXVsdFRhYkltcHJlc3Npb25IABJB",
            "CgtzZXJ2ZXJfZGF0YRjpByABKAsyKy5XVVByb3Rvcy5EYXRhLlRlbGVtZXRy",
            "eS5QbGF0Zm9ybVNlcnZlckRhdGFCDwoNVGVsZW1ldHJ5RGF0YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Telemetry.PlatformServerDataReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryStartupReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameStartReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameEndReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryAssetLoadReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryBundleDownloadReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryStopwatchReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetrySmokeTestReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagsUIEnteredReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledgedReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryAvatarInteractReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryRewardsFlowReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryPortkeysWrackspurtTappedReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryPortkeysOutOfBoundsReachedReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryPortkeysAdvancedARCheckReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryProfessionMainMenuReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryProfessionNodeSelectedReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryButtonPressReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeSelectMobReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeMoreInfoReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryLandmarkInteractReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveLockOnAttemptReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveTraceAttemptReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryCombatGameProtegoCastAttemptReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyDialogShownReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyPurchaseButtonReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryCombatGamePotionButtonReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryImpressionReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryDescriptionClickthroughReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryHyperlinkClickthroughReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetrySurfaceDetectionReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryEncounterStartReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryPermissionsRequestedReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryPermissionsCheckFailedReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryDeeplinkTriggeredReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryLoginStartReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryLoginCompleteReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttemptReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryProfilePortraitActionReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryProfileButtonRandomizeReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryProfileButtonLensReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryProfileButtonAsssetReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryProfileScreenGrabReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryOutpostInteractReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryGreenhouseInteractReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryFamilyDetailsReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryStickerDetailsReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryRegistryInfoReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryRateAppReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryExceptionReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetrySettingsARModeToggledReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetrySettingsBatteryModeToggledReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetrySettingsAuthUpdatedReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryStorePopupOpenReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryStoreTabOpenReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryVaultItemImpressionReflection.Descriptor, global::WUProtos.Data.Client.ClientTelemetryVaultTabImpressionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Data.LexiconApprovedClientTelemetry), global::WUProtos.Data.LexiconApprovedClientTelemetry.Parser, new[]{ "Startup", "SwishSpellGameStart", "SwishSpellGameEnd", "AssetLoad", "BundleDownload", "Stopwatch", "SmokeTest", "EnvironmentalTagsUiEntered", "EnvironmentalTagsWeatherAcknowledged", "AvatarInteract", "RewardsFlow", "PortkeysWrackspurtTapped", "PortkeysOutOfBoundsReached", "PortkeysAdvancedArCheck", "ProfessionMainMenu", "ProfessionNodeSelected", "ButtonPress", "SelectMob", "MoreInfo", "LandmarkInteract", "LockOnAttempt", "OffensiveTraceAttempt", "ProtegoCastAttempt", "OutOfEnergyShown", "OutOfEnergyPurchase", "CombatPotionButton", "Impression", "DescriptionClickthrough", "HyperlinkClickthrough", "SurfaceDetection", "EncounterStart", "PermissionRequested", "PermissionCheckFailed", "DeeplinkTriggered", "LoginStart", "LoginComplete", "PotionsMasterNoteAttempt", "ProfilePortraitAction", "ProfileButtonRandomize", "ProfileButtonLens", "ProfileButtonAsset", "ProfileScreengrab", "OutpostInteract", "GreenhouseInteract", "FamilyDetailsClicked", "StickerDetailsClicked", "RegistryInfoClicked", "RateApp", "ExceptionInfo", "ArModeToggled", "BatteryModeToggled", "AuthUpdated", "StorePopupOpen", "StoreTabOpen", "VaultPopupOpen", "VaultTabOpen", "ServerData" }, new[]{ "TelemetryData" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LexiconApprovedClientTelemetry : pb::IMessage<LexiconApprovedClientTelemetry> {
    private static readonly pb::MessageParser<LexiconApprovedClientTelemetry> _parser = new pb::MessageParser<LexiconApprovedClientTelemetry>(() => new LexiconApprovedClientTelemetry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LexiconApprovedClientTelemetry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Data.LexiconApprovedClientTelemetryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LexiconApprovedClientTelemetry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LexiconApprovedClientTelemetry(LexiconApprovedClientTelemetry other) : this() {
      serverData_ = other.serverData_ != null ? other.serverData_.Clone() : null;
      switch (other.TelemetryDataCase) {
        case TelemetryDataOneofCase.Startup:
          Startup = other.Startup.Clone();
          break;
        case TelemetryDataOneofCase.SwishSpellGameStart:
          SwishSpellGameStart = other.SwishSpellGameStart.Clone();
          break;
        case TelemetryDataOneofCase.SwishSpellGameEnd:
          SwishSpellGameEnd = other.SwishSpellGameEnd.Clone();
          break;
        case TelemetryDataOneofCase.AssetLoad:
          AssetLoad = other.AssetLoad.Clone();
          break;
        case TelemetryDataOneofCase.BundleDownload:
          BundleDownload = other.BundleDownload.Clone();
          break;
        case TelemetryDataOneofCase.Stopwatch:
          Stopwatch = other.Stopwatch.Clone();
          break;
        case TelemetryDataOneofCase.SmokeTest:
          SmokeTest = other.SmokeTest.Clone();
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsUiEntered:
          EnvironmentalTagsUiEntered = other.EnvironmentalTagsUiEntered.Clone();
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged:
          EnvironmentalTagsWeatherAcknowledged = other.EnvironmentalTagsWeatherAcknowledged.Clone();
          break;
        case TelemetryDataOneofCase.AvatarInteract:
          AvatarInteract = other.AvatarInteract.Clone();
          break;
        case TelemetryDataOneofCase.RewardsFlow:
          RewardsFlow = other.RewardsFlow.Clone();
          break;
        case TelemetryDataOneofCase.PortkeysWrackspurtTapped:
          PortkeysWrackspurtTapped = other.PortkeysWrackspurtTapped.Clone();
          break;
        case TelemetryDataOneofCase.PortkeysOutOfBoundsReached:
          PortkeysOutOfBoundsReached = other.PortkeysOutOfBoundsReached.Clone();
          break;
        case TelemetryDataOneofCase.PortkeysAdvancedArCheck:
          PortkeysAdvancedArCheck = other.PortkeysAdvancedArCheck.Clone();
          break;
        case TelemetryDataOneofCase.ProfessionMainMenu:
          ProfessionMainMenu = other.ProfessionMainMenu.Clone();
          break;
        case TelemetryDataOneofCase.ProfessionNodeSelected:
          ProfessionNodeSelected = other.ProfessionNodeSelected.Clone();
          break;
        case TelemetryDataOneofCase.ButtonPress:
          ButtonPress = other.ButtonPress.Clone();
          break;
        case TelemetryDataOneofCase.SelectMob:
          SelectMob = other.SelectMob.Clone();
          break;
        case TelemetryDataOneofCase.MoreInfo:
          MoreInfo = other.MoreInfo.Clone();
          break;
        case TelemetryDataOneofCase.LandmarkInteract:
          LandmarkInteract = other.LandmarkInteract.Clone();
          break;
        case TelemetryDataOneofCase.LockOnAttempt:
          LockOnAttempt = other.LockOnAttempt.Clone();
          break;
        case TelemetryDataOneofCase.OffensiveTraceAttempt:
          OffensiveTraceAttempt = other.OffensiveTraceAttempt.Clone();
          break;
        case TelemetryDataOneofCase.ProtegoCastAttempt:
          ProtegoCastAttempt = other.ProtegoCastAttempt.Clone();
          break;
        case TelemetryDataOneofCase.OutOfEnergyShown:
          OutOfEnergyShown = other.OutOfEnergyShown.Clone();
          break;
        case TelemetryDataOneofCase.OutOfEnergyPurchase:
          OutOfEnergyPurchase = other.OutOfEnergyPurchase.Clone();
          break;
        case TelemetryDataOneofCase.CombatPotionButton:
          CombatPotionButton = other.CombatPotionButton.Clone();
          break;
        case TelemetryDataOneofCase.Impression:
          Impression = other.Impression.Clone();
          break;
        case TelemetryDataOneofCase.DescriptionClickthrough:
          DescriptionClickthrough = other.DescriptionClickthrough.Clone();
          break;
        case TelemetryDataOneofCase.HyperlinkClickthrough:
          HyperlinkClickthrough = other.HyperlinkClickthrough.Clone();
          break;
        case TelemetryDataOneofCase.SurfaceDetection:
          SurfaceDetection = other.SurfaceDetection.Clone();
          break;
        case TelemetryDataOneofCase.EncounterStart:
          EncounterStart = other.EncounterStart.Clone();
          break;
        case TelemetryDataOneofCase.PermissionRequested:
          PermissionRequested = other.PermissionRequested.Clone();
          break;
        case TelemetryDataOneofCase.PermissionCheckFailed:
          PermissionCheckFailed = other.PermissionCheckFailed.Clone();
          break;
        case TelemetryDataOneofCase.DeeplinkTriggered:
          DeeplinkTriggered = other.DeeplinkTriggered.Clone();
          break;
        case TelemetryDataOneofCase.LoginStart:
          LoginStart = other.LoginStart.Clone();
          break;
        case TelemetryDataOneofCase.LoginComplete:
          LoginComplete = other.LoginComplete.Clone();
          break;
        case TelemetryDataOneofCase.PotionsMasterNoteAttempt:
          PotionsMasterNoteAttempt = other.PotionsMasterNoteAttempt.Clone();
          break;
        case TelemetryDataOneofCase.ProfilePortraitAction:
          ProfilePortraitAction = other.ProfilePortraitAction.Clone();
          break;
        case TelemetryDataOneofCase.ProfileButtonRandomize:
          ProfileButtonRandomize = other.ProfileButtonRandomize.Clone();
          break;
        case TelemetryDataOneofCase.ProfileButtonLens:
          ProfileButtonLens = other.ProfileButtonLens.Clone();
          break;
        case TelemetryDataOneofCase.ProfileButtonAsset:
          ProfileButtonAsset = other.ProfileButtonAsset.Clone();
          break;
        case TelemetryDataOneofCase.ProfileScreengrab:
          ProfileScreengrab = other.ProfileScreengrab.Clone();
          break;
        case TelemetryDataOneofCase.OutpostInteract:
          OutpostInteract = other.OutpostInteract.Clone();
          break;
        case TelemetryDataOneofCase.GreenhouseInteract:
          GreenhouseInteract = other.GreenhouseInteract.Clone();
          break;
        case TelemetryDataOneofCase.FamilyDetailsClicked:
          FamilyDetailsClicked = other.FamilyDetailsClicked.Clone();
          break;
        case TelemetryDataOneofCase.StickerDetailsClicked:
          StickerDetailsClicked = other.StickerDetailsClicked.Clone();
          break;
        case TelemetryDataOneofCase.RegistryInfoClicked:
          RegistryInfoClicked = other.RegistryInfoClicked.Clone();
          break;
        case TelemetryDataOneofCase.RateApp:
          RateApp = other.RateApp.Clone();
          break;
        case TelemetryDataOneofCase.ExceptionInfo:
          ExceptionInfo = other.ExceptionInfo.Clone();
          break;
        case TelemetryDataOneofCase.ArModeToggled:
          ArModeToggled = other.ArModeToggled.Clone();
          break;
        case TelemetryDataOneofCase.BatteryModeToggled:
          BatteryModeToggled = other.BatteryModeToggled.Clone();
          break;
        case TelemetryDataOneofCase.AuthUpdated:
          AuthUpdated = other.AuthUpdated.Clone();
          break;
        case TelemetryDataOneofCase.StorePopupOpen:
          StorePopupOpen = other.StorePopupOpen.Clone();
          break;
        case TelemetryDataOneofCase.StoreTabOpen:
          StoreTabOpen = other.StoreTabOpen.Clone();
          break;
        case TelemetryDataOneofCase.VaultPopupOpen:
          VaultPopupOpen = other.VaultPopupOpen.Clone();
          break;
        case TelemetryDataOneofCase.VaultTabOpen:
          VaultTabOpen = other.VaultTabOpen.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LexiconApprovedClientTelemetry Clone() {
      return new LexiconApprovedClientTelemetry(this);
    }

    /// <summary>Field number for the "startup" field.</summary>
    public const int StartupFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryStartup Startup {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.Startup ? (global::WUProtos.Data.Client.ClientTelemetryStartup) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.Startup;
      }
    }

    /// <summary>Field number for the "swish_spell_game_start" field.</summary>
    public const int SwishSpellGameStartFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameStart SwishSpellGameStart {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart ? (global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameStart) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SwishSpellGameStart;
      }
    }

    /// <summary>Field number for the "swish_spell_game_end" field.</summary>
    public const int SwishSpellGameEndFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameEnd SwishSpellGameEnd {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd ? (global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameEnd) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SwishSpellGameEnd;
      }
    }

    /// <summary>Field number for the "asset_load" field.</summary>
    public const int AssetLoadFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryAssetLoad AssetLoad {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad ? (global::WUProtos.Data.Client.ClientTelemetryAssetLoad) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.AssetLoad;
      }
    }

    /// <summary>Field number for the "bundle_download" field.</summary>
    public const int BundleDownloadFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryBundleDownload BundleDownload {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload ? (global::WUProtos.Data.Client.ClientTelemetryBundleDownload) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.BundleDownload;
      }
    }

    /// <summary>Field number for the "stopwatch" field.</summary>
    public const int StopwatchFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryStopwatch Stopwatch {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch ? (global::WUProtos.Data.Client.ClientTelemetryStopwatch) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.Stopwatch;
      }
    }

    /// <summary>Field number for the "smoke_test" field.</summary>
    public const int SmokeTestFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetrySmokeTest SmokeTest {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest ? (global::WUProtos.Data.Client.ClientTelemetrySmokeTest) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SmokeTest;
      }
    }

    /// <summary>Field number for the "environmental_tags_ui_entered" field.</summary>
    public const int EnvironmentalTagsUiEnteredFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagsUIEntered EnvironmentalTagsUiEntered {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered ? (global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagsUIEntered) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.EnvironmentalTagsUiEntered;
      }
    }

    /// <summary>Field number for the "environmental_tags_weather_acknowledged" field.</summary>
    public const int EnvironmentalTagsWeatherAcknowledgedFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged EnvironmentalTagsWeatherAcknowledged {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged ? (global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged;
      }
    }

    /// <summary>Field number for the "avatar_interact" field.</summary>
    public const int AvatarInteractFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryAvatarInteract AvatarInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract ? (global::WUProtos.Data.Client.ClientTelemetryAvatarInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.AvatarInteract;
      }
    }

    /// <summary>Field number for the "rewards_flow" field.</summary>
    public const int RewardsFlowFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryRewardsFlow RewardsFlow {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow ? (global::WUProtos.Data.Client.ClientTelemetryRewardsFlow) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.RewardsFlow;
      }
    }

    /// <summary>Field number for the "portkeys_wrackspurt_tapped" field.</summary>
    public const int PortkeysWrackspurtTappedFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryPortkeysWrackspurtTapped PortkeysWrackspurtTapped {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped ? (global::WUProtos.Data.Client.ClientTelemetryPortkeysWrackspurtTapped) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PortkeysWrackspurtTapped;
      }
    }

    /// <summary>Field number for the "portkeys_out_of_bounds_reached" field.</summary>
    public const int PortkeysOutOfBoundsReachedFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryPortkeysOutOfBoundsReached PortkeysOutOfBoundsReached {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached ? (global::WUProtos.Data.Client.ClientTelemetryPortkeysOutOfBoundsReached) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PortkeysOutOfBoundsReached;
      }
    }

    /// <summary>Field number for the "portkeys_advanced_ar_check" field.</summary>
    public const int PortkeysAdvancedArCheckFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryPortkeysAdvancedARCheck PortkeysAdvancedArCheck {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck ? (global::WUProtos.Data.Client.ClientTelemetryPortkeysAdvancedARCheck) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PortkeysAdvancedArCheck;
      }
    }

    /// <summary>Field number for the "profession_main_menu" field.</summary>
    public const int ProfessionMainMenuFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryProfessionMainMenu ProfessionMainMenu {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu ? (global::WUProtos.Data.Client.ClientTelemetryProfessionMainMenu) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfessionMainMenu;
      }
    }

    /// <summary>Field number for the "profession_node_selected" field.</summary>
    public const int ProfessionNodeSelectedFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryProfessionNodeSelected ProfessionNodeSelected {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected ? (global::WUProtos.Data.Client.ClientTelemetryProfessionNodeSelected) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfessionNodeSelected;
      }
    }

    /// <summary>Field number for the "button_press" field.</summary>
    public const int ButtonPressFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryButtonPress ButtonPress {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress ? (global::WUProtos.Data.Client.ClientTelemetryButtonPress) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ButtonPress;
      }
    }

    /// <summary>Field number for the "select_mob" field.</summary>
    public const int SelectMobFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeSelectMob SelectMob {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SelectMob ? (global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeSelectMob) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SelectMob;
      }
    }

    /// <summary>Field number for the "more_info" field.</summary>
    public const int MoreInfoFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeMoreInfo MoreInfo {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo ? (global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeMoreInfo) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.MoreInfo;
      }
    }

    /// <summary>Field number for the "landmark_interact" field.</summary>
    public const int LandmarkInteractFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryLandmarkInteract LandmarkInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract ? (global::WUProtos.Data.Client.ClientTelemetryLandmarkInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LandmarkInteract;
      }
    }

    /// <summary>Field number for the "lock_on_attempt" field.</summary>
    public const int LockOnAttemptFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveLockOnAttempt LockOnAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt ? (global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveLockOnAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LockOnAttempt;
      }
    }

    /// <summary>Field number for the "offensive_trace_attempt" field.</summary>
    public const int OffensiveTraceAttemptFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveTraceAttempt OffensiveTraceAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt ? (global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveTraceAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OffensiveTraceAttempt;
      }
    }

    /// <summary>Field number for the "protego_cast_attempt" field.</summary>
    public const int ProtegoCastAttemptFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryCombatGameProtegoCastAttempt ProtegoCastAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt ? (global::WUProtos.Data.Client.ClientTelemetryCombatGameProtegoCastAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProtegoCastAttempt;
      }
    }

    /// <summary>Field number for the "out_of_energy_shown" field.</summary>
    public const int OutOfEnergyShownFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyDialogShown OutOfEnergyShown {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown ? (global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyDialogShown) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OutOfEnergyShown;
      }
    }

    /// <summary>Field number for the "out_of_energy_purchase" field.</summary>
    public const int OutOfEnergyPurchaseFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyPurchaseButton OutOfEnergyPurchase {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase ? (global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyPurchaseButton) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OutOfEnergyPurchase;
      }
    }

    /// <summary>Field number for the "combat_potion_button" field.</summary>
    public const int CombatPotionButtonFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryCombatGamePotionButton CombatPotionButton {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton ? (global::WUProtos.Data.Client.ClientTelemetryCombatGamePotionButton) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.CombatPotionButton;
      }
    }

    /// <summary>Field number for the "impression" field.</summary>
    public const int ImpressionFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryImpression Impression {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.Impression ? (global::WUProtos.Data.Client.ClientTelemetryImpression) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.Impression;
      }
    }

    /// <summary>Field number for the "description_clickthrough" field.</summary>
    public const int DescriptionClickthroughFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryDescriptionClickthrough DescriptionClickthrough {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough ? (global::WUProtos.Data.Client.ClientTelemetryDescriptionClickthrough) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.DescriptionClickthrough;
      }
    }

    /// <summary>Field number for the "hyperlink_clickthrough" field.</summary>
    public const int HyperlinkClickthroughFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryHyperlinkClickthrough HyperlinkClickthrough {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough ? (global::WUProtos.Data.Client.ClientTelemetryHyperlinkClickthrough) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.HyperlinkClickthrough;
      }
    }

    /// <summary>Field number for the "surface_detection" field.</summary>
    public const int SurfaceDetectionFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetrySurfaceDetection SurfaceDetection {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection ? (global::WUProtos.Data.Client.ClientTelemetrySurfaceDetection) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.SurfaceDetection;
      }
    }

    /// <summary>Field number for the "encounter_start" field.</summary>
    public const int EncounterStartFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryEncounterStart EncounterStart {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart ? (global::WUProtos.Data.Client.ClientTelemetryEncounterStart) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.EncounterStart;
      }
    }

    /// <summary>Field number for the "permission_requested" field.</summary>
    public const int PermissionRequestedFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryPermissionsRequested PermissionRequested {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested ? (global::WUProtos.Data.Client.ClientTelemetryPermissionsRequested) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PermissionRequested;
      }
    }

    /// <summary>Field number for the "permission_check_failed" field.</summary>
    public const int PermissionCheckFailedFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryPermissionsCheckFailed PermissionCheckFailed {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed ? (global::WUProtos.Data.Client.ClientTelemetryPermissionsCheckFailed) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PermissionCheckFailed;
      }
    }

    /// <summary>Field number for the "deeplink_triggered" field.</summary>
    public const int DeeplinkTriggeredFieldNumber = 34;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryDeeplinkTriggered DeeplinkTriggered {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered ? (global::WUProtos.Data.Client.ClientTelemetryDeeplinkTriggered) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.DeeplinkTriggered;
      }
    }

    /// <summary>Field number for the "login_start" field.</summary>
    public const int LoginStartFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryLoginStart LoginStart {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LoginStart ? (global::WUProtos.Data.Client.ClientTelemetryLoginStart) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LoginStart;
      }
    }

    /// <summary>Field number for the "login_complete" field.</summary>
    public const int LoginCompleteFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryLoginComplete LoginComplete {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete ? (global::WUProtos.Data.Client.ClientTelemetryLoginComplete) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.LoginComplete;
      }
    }

    /// <summary>Field number for the "potions_master_note_attempt" field.</summary>
    public const int PotionsMasterNoteAttemptFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttempt PotionsMasterNoteAttempt {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt ? (global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttempt) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.PotionsMasterNoteAttempt;
      }
    }

    /// <summary>Field number for the "profile_portrait_action" field.</summary>
    public const int ProfilePortraitActionFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryProfilePortraitAction ProfilePortraitAction {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction ? (global::WUProtos.Data.Client.ClientTelemetryProfilePortraitAction) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfilePortraitAction;
      }
    }

    /// <summary>Field number for the "profile_button_randomize" field.</summary>
    public const int ProfileButtonRandomizeFieldNumber = 39;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryProfileButtonRandomize ProfileButtonRandomize {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize ? (global::WUProtos.Data.Client.ClientTelemetryProfileButtonRandomize) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileButtonRandomize;
      }
    }

    /// <summary>Field number for the "profile_button_lens" field.</summary>
    public const int ProfileButtonLensFieldNumber = 40;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryProfileButtonLens ProfileButtonLens {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens ? (global::WUProtos.Data.Client.ClientTelemetryProfileButtonLens) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileButtonLens;
      }
    }

    /// <summary>Field number for the "profile_button_asset" field.</summary>
    public const int ProfileButtonAssetFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryProfileButtonAssset ProfileButtonAsset {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset ? (global::WUProtos.Data.Client.ClientTelemetryProfileButtonAssset) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileButtonAsset;
      }
    }

    /// <summary>Field number for the "profile_screengrab" field.</summary>
    public const int ProfileScreengrabFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryProfileScreenGrab ProfileScreengrab {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab ? (global::WUProtos.Data.Client.ClientTelemetryProfileScreenGrab) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ProfileScreengrab;
      }
    }

    /// <summary>Field number for the "outpost_interact" field.</summary>
    public const int OutpostInteractFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryOutpostInteract OutpostInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract ? (global::WUProtos.Data.Client.ClientTelemetryOutpostInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.OutpostInteract;
      }
    }

    /// <summary>Field number for the "greenhouse_interact" field.</summary>
    public const int GreenhouseInteractFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryGreenhouseInteract GreenhouseInteract {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract ? (global::WUProtos.Data.Client.ClientTelemetryGreenhouseInteract) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.GreenhouseInteract;
      }
    }

    /// <summary>Field number for the "family_details_clicked" field.</summary>
    public const int FamilyDetailsClickedFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryFamilyDetails FamilyDetailsClicked {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked ? (global::WUProtos.Data.Client.ClientTelemetryFamilyDetails) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.FamilyDetailsClicked;
      }
    }

    /// <summary>Field number for the "sticker_details_clicked" field.</summary>
    public const int StickerDetailsClickedFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryStickerDetails StickerDetailsClicked {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked ? (global::WUProtos.Data.Client.ClientTelemetryStickerDetails) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.StickerDetailsClicked;
      }
    }

    /// <summary>Field number for the "registry_info_clicked" field.</summary>
    public const int RegistryInfoClickedFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryRegistryInfo RegistryInfoClicked {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked ? (global::WUProtos.Data.Client.ClientTelemetryRegistryInfo) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.RegistryInfoClicked;
      }
    }

    /// <summary>Field number for the "rate_app" field.</summary>
    public const int RateAppFieldNumber = 48;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryRateApp RateApp {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.RateApp ? (global::WUProtos.Data.Client.ClientTelemetryRateApp) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.RateApp;
      }
    }

    /// <summary>Field number for the "exception_info" field.</summary>
    public const int ExceptionInfoFieldNumber = 49;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryException ExceptionInfo {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo ? (global::WUProtos.Data.Client.ClientTelemetryException) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ExceptionInfo;
      }
    }

    /// <summary>Field number for the "ar_mode_toggled" field.</summary>
    public const int ArModeToggledFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetrySettingsARModeToggled ArModeToggled {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled ? (global::WUProtos.Data.Client.ClientTelemetrySettingsARModeToggled) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.ArModeToggled;
      }
    }

    /// <summary>Field number for the "battery_mode_toggled" field.</summary>
    public const int BatteryModeToggledFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetrySettingsBatteryModeToggled BatteryModeToggled {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled ? (global::WUProtos.Data.Client.ClientTelemetrySettingsBatteryModeToggled) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.BatteryModeToggled;
      }
    }

    /// <summary>Field number for the "auth_updated" field.</summary>
    public const int AuthUpdatedFieldNumber = 52;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetrySettingsAuthUpdated AuthUpdated {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated ? (global::WUProtos.Data.Client.ClientTelemetrySettingsAuthUpdated) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.AuthUpdated;
      }
    }

    /// <summary>Field number for the "store_popup_open" field.</summary>
    public const int StorePopupOpenFieldNumber = 53;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryStorePopupOpen StorePopupOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen ? (global::WUProtos.Data.Client.ClientTelemetryStorePopupOpen) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.StorePopupOpen;
      }
    }

    /// <summary>Field number for the "store_tab_open" field.</summary>
    public const int StoreTabOpenFieldNumber = 54;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryStoreTabOpen StoreTabOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen ? (global::WUProtos.Data.Client.ClientTelemetryStoreTabOpen) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.StoreTabOpen;
      }
    }

    /// <summary>Field number for the "vault_popup_open" field.</summary>
    public const int VaultPopupOpenFieldNumber = 55;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryVaultItemImpression VaultPopupOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen ? (global::WUProtos.Data.Client.ClientTelemetryVaultItemImpression) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.VaultPopupOpen;
      }
    }

    /// <summary>Field number for the "vault_tab_open" field.</summary>
    public const int VaultTabOpenFieldNumber = 56;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Client.ClientTelemetryVaultTabImpression VaultTabOpen {
      get { return telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen ? (global::WUProtos.Data.Client.ClientTelemetryVaultTabImpression) telemetryData_ : null; }
      set {
        telemetryData_ = value;
        telemetryDataCase_ = value == null ? TelemetryDataOneofCase.None : TelemetryDataOneofCase.VaultTabOpen;
      }
    }

    /// <summary>Field number for the "server_data" field.</summary>
    public const int ServerDataFieldNumber = 1001;
    private global::WUProtos.Data.Telemetry.PlatformServerData serverData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Telemetry.PlatformServerData ServerData {
      get { return serverData_; }
      set {
        serverData_ = value;
      }
    }

    private object telemetryData_;
    /// <summary>Enum of possible cases for the "TelemetryData" oneof.</summary>
    public enum TelemetryDataOneofCase {
      None = 0,
      Startup = 1,
      SwishSpellGameStart = 2,
      SwishSpellGameEnd = 3,
      AssetLoad = 4,
      BundleDownload = 5,
      Stopwatch = 6,
      SmokeTest = 7,
      EnvironmentalTagsUiEntered = 8,
      EnvironmentalTagsWeatherAcknowledged = 9,
      AvatarInteract = 10,
      RewardsFlow = 11,
      PortkeysWrackspurtTapped = 12,
      PortkeysOutOfBoundsReached = 13,
      PortkeysAdvancedArCheck = 14,
      ProfessionMainMenu = 15,
      ProfessionNodeSelected = 16,
      ButtonPress = 17,
      SelectMob = 18,
      MoreInfo = 19,
      LandmarkInteract = 20,
      LockOnAttempt = 21,
      OffensiveTraceAttempt = 22,
      ProtegoCastAttempt = 23,
      OutOfEnergyShown = 24,
      OutOfEnergyPurchase = 25,
      CombatPotionButton = 26,
      Impression = 27,
      DescriptionClickthrough = 28,
      HyperlinkClickthrough = 29,
      SurfaceDetection = 30,
      EncounterStart = 31,
      PermissionRequested = 32,
      PermissionCheckFailed = 33,
      DeeplinkTriggered = 34,
      LoginStart = 35,
      LoginComplete = 36,
      PotionsMasterNoteAttempt = 37,
      ProfilePortraitAction = 38,
      ProfileButtonRandomize = 39,
      ProfileButtonLens = 40,
      ProfileButtonAsset = 41,
      ProfileScreengrab = 42,
      OutpostInteract = 43,
      GreenhouseInteract = 44,
      FamilyDetailsClicked = 45,
      StickerDetailsClicked = 46,
      RegistryInfoClicked = 47,
      RateApp = 48,
      ExceptionInfo = 49,
      ArModeToggled = 50,
      BatteryModeToggled = 51,
      AuthUpdated = 52,
      StorePopupOpen = 53,
      StoreTabOpen = 54,
      VaultPopupOpen = 55,
      VaultTabOpen = 56,
    }
    private TelemetryDataOneofCase telemetryDataCase_ = TelemetryDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TelemetryDataOneofCase TelemetryDataCase {
      get { return telemetryDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTelemetryData() {
      telemetryDataCase_ = TelemetryDataOneofCase.None;
      telemetryData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LexiconApprovedClientTelemetry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LexiconApprovedClientTelemetry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Startup, other.Startup)) return false;
      if (!object.Equals(SwishSpellGameStart, other.SwishSpellGameStart)) return false;
      if (!object.Equals(SwishSpellGameEnd, other.SwishSpellGameEnd)) return false;
      if (!object.Equals(AssetLoad, other.AssetLoad)) return false;
      if (!object.Equals(BundleDownload, other.BundleDownload)) return false;
      if (!object.Equals(Stopwatch, other.Stopwatch)) return false;
      if (!object.Equals(SmokeTest, other.SmokeTest)) return false;
      if (!object.Equals(EnvironmentalTagsUiEntered, other.EnvironmentalTagsUiEntered)) return false;
      if (!object.Equals(EnvironmentalTagsWeatherAcknowledged, other.EnvironmentalTagsWeatherAcknowledged)) return false;
      if (!object.Equals(AvatarInteract, other.AvatarInteract)) return false;
      if (!object.Equals(RewardsFlow, other.RewardsFlow)) return false;
      if (!object.Equals(PortkeysWrackspurtTapped, other.PortkeysWrackspurtTapped)) return false;
      if (!object.Equals(PortkeysOutOfBoundsReached, other.PortkeysOutOfBoundsReached)) return false;
      if (!object.Equals(PortkeysAdvancedArCheck, other.PortkeysAdvancedArCheck)) return false;
      if (!object.Equals(ProfessionMainMenu, other.ProfessionMainMenu)) return false;
      if (!object.Equals(ProfessionNodeSelected, other.ProfessionNodeSelected)) return false;
      if (!object.Equals(ButtonPress, other.ButtonPress)) return false;
      if (!object.Equals(SelectMob, other.SelectMob)) return false;
      if (!object.Equals(MoreInfo, other.MoreInfo)) return false;
      if (!object.Equals(LandmarkInteract, other.LandmarkInteract)) return false;
      if (!object.Equals(LockOnAttempt, other.LockOnAttempt)) return false;
      if (!object.Equals(OffensiveTraceAttempt, other.OffensiveTraceAttempt)) return false;
      if (!object.Equals(ProtegoCastAttempt, other.ProtegoCastAttempt)) return false;
      if (!object.Equals(OutOfEnergyShown, other.OutOfEnergyShown)) return false;
      if (!object.Equals(OutOfEnergyPurchase, other.OutOfEnergyPurchase)) return false;
      if (!object.Equals(CombatPotionButton, other.CombatPotionButton)) return false;
      if (!object.Equals(Impression, other.Impression)) return false;
      if (!object.Equals(DescriptionClickthrough, other.DescriptionClickthrough)) return false;
      if (!object.Equals(HyperlinkClickthrough, other.HyperlinkClickthrough)) return false;
      if (!object.Equals(SurfaceDetection, other.SurfaceDetection)) return false;
      if (!object.Equals(EncounterStart, other.EncounterStart)) return false;
      if (!object.Equals(PermissionRequested, other.PermissionRequested)) return false;
      if (!object.Equals(PermissionCheckFailed, other.PermissionCheckFailed)) return false;
      if (!object.Equals(DeeplinkTriggered, other.DeeplinkTriggered)) return false;
      if (!object.Equals(LoginStart, other.LoginStart)) return false;
      if (!object.Equals(LoginComplete, other.LoginComplete)) return false;
      if (!object.Equals(PotionsMasterNoteAttempt, other.PotionsMasterNoteAttempt)) return false;
      if (!object.Equals(ProfilePortraitAction, other.ProfilePortraitAction)) return false;
      if (!object.Equals(ProfileButtonRandomize, other.ProfileButtonRandomize)) return false;
      if (!object.Equals(ProfileButtonLens, other.ProfileButtonLens)) return false;
      if (!object.Equals(ProfileButtonAsset, other.ProfileButtonAsset)) return false;
      if (!object.Equals(ProfileScreengrab, other.ProfileScreengrab)) return false;
      if (!object.Equals(OutpostInteract, other.OutpostInteract)) return false;
      if (!object.Equals(GreenhouseInteract, other.GreenhouseInteract)) return false;
      if (!object.Equals(FamilyDetailsClicked, other.FamilyDetailsClicked)) return false;
      if (!object.Equals(StickerDetailsClicked, other.StickerDetailsClicked)) return false;
      if (!object.Equals(RegistryInfoClicked, other.RegistryInfoClicked)) return false;
      if (!object.Equals(RateApp, other.RateApp)) return false;
      if (!object.Equals(ExceptionInfo, other.ExceptionInfo)) return false;
      if (!object.Equals(ArModeToggled, other.ArModeToggled)) return false;
      if (!object.Equals(BatteryModeToggled, other.BatteryModeToggled)) return false;
      if (!object.Equals(AuthUpdated, other.AuthUpdated)) return false;
      if (!object.Equals(StorePopupOpen, other.StorePopupOpen)) return false;
      if (!object.Equals(StoreTabOpen, other.StoreTabOpen)) return false;
      if (!object.Equals(VaultPopupOpen, other.VaultPopupOpen)) return false;
      if (!object.Equals(VaultTabOpen, other.VaultTabOpen)) return false;
      if (!object.Equals(ServerData, other.ServerData)) return false;
      if (TelemetryDataCase != other.TelemetryDataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) hash ^= Startup.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) hash ^= SwishSpellGameStart.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) hash ^= SwishSpellGameEnd.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) hash ^= AssetLoad.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) hash ^= BundleDownload.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) hash ^= Stopwatch.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) hash ^= SmokeTest.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) hash ^= EnvironmentalTagsUiEntered.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) hash ^= EnvironmentalTagsWeatherAcknowledged.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) hash ^= AvatarInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) hash ^= RewardsFlow.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) hash ^= PortkeysWrackspurtTapped.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) hash ^= PortkeysOutOfBoundsReached.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) hash ^= PortkeysAdvancedArCheck.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) hash ^= ProfessionMainMenu.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) hash ^= ProfessionNodeSelected.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) hash ^= ButtonPress.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) hash ^= SelectMob.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) hash ^= MoreInfo.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) hash ^= LandmarkInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) hash ^= LockOnAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) hash ^= OffensiveTraceAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) hash ^= ProtegoCastAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) hash ^= OutOfEnergyShown.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) hash ^= OutOfEnergyPurchase.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) hash ^= CombatPotionButton.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) hash ^= Impression.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) hash ^= DescriptionClickthrough.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) hash ^= HyperlinkClickthrough.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) hash ^= SurfaceDetection.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) hash ^= EncounterStart.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) hash ^= PermissionRequested.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) hash ^= PermissionCheckFailed.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) hash ^= DeeplinkTriggered.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) hash ^= LoginStart.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) hash ^= LoginComplete.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) hash ^= PotionsMasterNoteAttempt.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) hash ^= ProfilePortraitAction.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) hash ^= ProfileButtonRandomize.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) hash ^= ProfileButtonLens.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) hash ^= ProfileButtonAsset.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) hash ^= ProfileScreengrab.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) hash ^= OutpostInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) hash ^= GreenhouseInteract.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) hash ^= FamilyDetailsClicked.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) hash ^= StickerDetailsClicked.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) hash ^= RegistryInfoClicked.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) hash ^= RateApp.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) hash ^= ExceptionInfo.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) hash ^= ArModeToggled.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) hash ^= BatteryModeToggled.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) hash ^= AuthUpdated.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) hash ^= StorePopupOpen.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) hash ^= StoreTabOpen.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) hash ^= VaultPopupOpen.GetHashCode();
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) hash ^= VaultTabOpen.GetHashCode();
      if (serverData_ != null) hash ^= ServerData.GetHashCode();
      hash ^= (int) telemetryDataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) {
        output.WriteRawTag(10);
        output.WriteMessage(Startup);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) {
        output.WriteRawTag(18);
        output.WriteMessage(SwishSpellGameStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) {
        output.WriteRawTag(26);
        output.WriteMessage(SwishSpellGameEnd);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) {
        output.WriteRawTag(34);
        output.WriteMessage(AssetLoad);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) {
        output.WriteRawTag(42);
        output.WriteMessage(BundleDownload);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) {
        output.WriteRawTag(50);
        output.WriteMessage(Stopwatch);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) {
        output.WriteRawTag(58);
        output.WriteMessage(SmokeTest);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) {
        output.WriteRawTag(66);
        output.WriteMessage(EnvironmentalTagsUiEntered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) {
        output.WriteRawTag(74);
        output.WriteMessage(EnvironmentalTagsWeatherAcknowledged);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) {
        output.WriteRawTag(82);
        output.WriteMessage(AvatarInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) {
        output.WriteRawTag(90);
        output.WriteMessage(RewardsFlow);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) {
        output.WriteRawTag(98);
        output.WriteMessage(PortkeysWrackspurtTapped);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) {
        output.WriteRawTag(106);
        output.WriteMessage(PortkeysOutOfBoundsReached);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) {
        output.WriteRawTag(114);
        output.WriteMessage(PortkeysAdvancedArCheck);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) {
        output.WriteRawTag(122);
        output.WriteMessage(ProfessionMainMenu);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ProfessionNodeSelected);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ButtonPress);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SelectMob);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(MoreInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(LandmarkInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LockOnAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(OffensiveTraceAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ProtegoCastAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(OutOfEnergyShown);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(OutOfEnergyPurchase);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(CombatPotionButton);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(Impression);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(DescriptionClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(HyperlinkClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(SurfaceDetection);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(EncounterStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(PermissionRequested);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(PermissionCheckFailed);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(DeeplinkTriggered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(LoginStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(LoginComplete);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(PotionsMasterNoteAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(ProfilePortraitAction);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(ProfileButtonRandomize);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(ProfileButtonLens);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ProfileButtonAsset);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(ProfileScreengrab);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(OutpostInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(GreenhouseInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(FamilyDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(StickerDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(RegistryInfoClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(RateApp);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) {
        output.WriteRawTag(138, 3);
        output.WriteMessage(ExceptionInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(ArModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(BatteryModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) {
        output.WriteRawTag(162, 3);
        output.WriteMessage(AuthUpdated);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) {
        output.WriteRawTag(170, 3);
        output.WriteMessage(StorePopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) {
        output.WriteRawTag(178, 3);
        output.WriteMessage(StoreTabOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) {
        output.WriteRawTag(186, 3);
        output.WriteMessage(VaultPopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(VaultTabOpen);
      }
      if (serverData_ != null) {
        output.WriteRawTag(202, 62);
        output.WriteMessage(ServerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Startup);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwishSpellGameStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwishSpellGameEnd);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssetLoad);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BundleDownload);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stopwatch);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SmokeTest);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentalTagsUiEntered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentalTagsWeatherAcknowledged);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardsFlow);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeysWrackspurtTapped);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeysOutOfBoundsReached);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeysAdvancedArCheck);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfessionMainMenu);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfessionNodeSelected);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ButtonPress);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectMob);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MoreInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LandmarkInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LockOnAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OffensiveTraceAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProtegoCastAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutOfEnergyShown);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutOfEnergyPurchase);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CombatPotionButton);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Impression);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DescriptionClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HyperlinkClickthrough);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SurfaceDetection);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncounterStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PermissionRequested);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PermissionCheckFailed);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeeplinkTriggered);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoginStart);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoginComplete);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PotionsMasterNoteAttempt);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfilePortraitAction);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileButtonRandomize);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileButtonLens);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileButtonAsset);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProfileScreengrab);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OutpostInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GreenhouseInteract);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FamilyDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StickerDetailsClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RegistryInfoClicked);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RateApp);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExceptionInfo);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BatteryModeToggled);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AuthUpdated);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StorePopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StoreTabOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VaultPopupOpen);
      }
      if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VaultTabOpen);
      }
      if (serverData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ServerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LexiconApprovedClientTelemetry other) {
      if (other == null) {
        return;
      }
      if (other.serverData_ != null) {
        if (serverData_ == null) {
          ServerData = new global::WUProtos.Data.Telemetry.PlatformServerData();
        }
        ServerData.MergeFrom(other.ServerData);
      }
      switch (other.TelemetryDataCase) {
        case TelemetryDataOneofCase.Startup:
          if (Startup == null) {
            Startup = new global::WUProtos.Data.Client.ClientTelemetryStartup();
          }
          Startup.MergeFrom(other.Startup);
          break;
        case TelemetryDataOneofCase.SwishSpellGameStart:
          if (SwishSpellGameStart == null) {
            SwishSpellGameStart = new global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameStart();
          }
          SwishSpellGameStart.MergeFrom(other.SwishSpellGameStart);
          break;
        case TelemetryDataOneofCase.SwishSpellGameEnd:
          if (SwishSpellGameEnd == null) {
            SwishSpellGameEnd = new global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameEnd();
          }
          SwishSpellGameEnd.MergeFrom(other.SwishSpellGameEnd);
          break;
        case TelemetryDataOneofCase.AssetLoad:
          if (AssetLoad == null) {
            AssetLoad = new global::WUProtos.Data.Client.ClientTelemetryAssetLoad();
          }
          AssetLoad.MergeFrom(other.AssetLoad);
          break;
        case TelemetryDataOneofCase.BundleDownload:
          if (BundleDownload == null) {
            BundleDownload = new global::WUProtos.Data.Client.ClientTelemetryBundleDownload();
          }
          BundleDownload.MergeFrom(other.BundleDownload);
          break;
        case TelemetryDataOneofCase.Stopwatch:
          if (Stopwatch == null) {
            Stopwatch = new global::WUProtos.Data.Client.ClientTelemetryStopwatch();
          }
          Stopwatch.MergeFrom(other.Stopwatch);
          break;
        case TelemetryDataOneofCase.SmokeTest:
          if (SmokeTest == null) {
            SmokeTest = new global::WUProtos.Data.Client.ClientTelemetrySmokeTest();
          }
          SmokeTest.MergeFrom(other.SmokeTest);
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsUiEntered:
          if (EnvironmentalTagsUiEntered == null) {
            EnvironmentalTagsUiEntered = new global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagsUIEntered();
          }
          EnvironmentalTagsUiEntered.MergeFrom(other.EnvironmentalTagsUiEntered);
          break;
        case TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged:
          if (EnvironmentalTagsWeatherAcknowledged == null) {
            EnvironmentalTagsWeatherAcknowledged = new global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged();
          }
          EnvironmentalTagsWeatherAcknowledged.MergeFrom(other.EnvironmentalTagsWeatherAcknowledged);
          break;
        case TelemetryDataOneofCase.AvatarInteract:
          if (AvatarInteract == null) {
            AvatarInteract = new global::WUProtos.Data.Client.ClientTelemetryAvatarInteract();
          }
          AvatarInteract.MergeFrom(other.AvatarInteract);
          break;
        case TelemetryDataOneofCase.RewardsFlow:
          if (RewardsFlow == null) {
            RewardsFlow = new global::WUProtos.Data.Client.ClientTelemetryRewardsFlow();
          }
          RewardsFlow.MergeFrom(other.RewardsFlow);
          break;
        case TelemetryDataOneofCase.PortkeysWrackspurtTapped:
          if (PortkeysWrackspurtTapped == null) {
            PortkeysWrackspurtTapped = new global::WUProtos.Data.Client.ClientTelemetryPortkeysWrackspurtTapped();
          }
          PortkeysWrackspurtTapped.MergeFrom(other.PortkeysWrackspurtTapped);
          break;
        case TelemetryDataOneofCase.PortkeysOutOfBoundsReached:
          if (PortkeysOutOfBoundsReached == null) {
            PortkeysOutOfBoundsReached = new global::WUProtos.Data.Client.ClientTelemetryPortkeysOutOfBoundsReached();
          }
          PortkeysOutOfBoundsReached.MergeFrom(other.PortkeysOutOfBoundsReached);
          break;
        case TelemetryDataOneofCase.PortkeysAdvancedArCheck:
          if (PortkeysAdvancedArCheck == null) {
            PortkeysAdvancedArCheck = new global::WUProtos.Data.Client.ClientTelemetryPortkeysAdvancedARCheck();
          }
          PortkeysAdvancedArCheck.MergeFrom(other.PortkeysAdvancedArCheck);
          break;
        case TelemetryDataOneofCase.ProfessionMainMenu:
          if (ProfessionMainMenu == null) {
            ProfessionMainMenu = new global::WUProtos.Data.Client.ClientTelemetryProfessionMainMenu();
          }
          ProfessionMainMenu.MergeFrom(other.ProfessionMainMenu);
          break;
        case TelemetryDataOneofCase.ProfessionNodeSelected:
          if (ProfessionNodeSelected == null) {
            ProfessionNodeSelected = new global::WUProtos.Data.Client.ClientTelemetryProfessionNodeSelected();
          }
          ProfessionNodeSelected.MergeFrom(other.ProfessionNodeSelected);
          break;
        case TelemetryDataOneofCase.ButtonPress:
          if (ButtonPress == null) {
            ButtonPress = new global::WUProtos.Data.Client.ClientTelemetryButtonPress();
          }
          ButtonPress.MergeFrom(other.ButtonPress);
          break;
        case TelemetryDataOneofCase.SelectMob:
          if (SelectMob == null) {
            SelectMob = new global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeSelectMob();
          }
          SelectMob.MergeFrom(other.SelectMob);
          break;
        case TelemetryDataOneofCase.MoreInfo:
          if (MoreInfo == null) {
            MoreInfo = new global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeMoreInfo();
          }
          MoreInfo.MergeFrom(other.MoreInfo);
          break;
        case TelemetryDataOneofCase.LandmarkInteract:
          if (LandmarkInteract == null) {
            LandmarkInteract = new global::WUProtos.Data.Client.ClientTelemetryLandmarkInteract();
          }
          LandmarkInteract.MergeFrom(other.LandmarkInteract);
          break;
        case TelemetryDataOneofCase.LockOnAttempt:
          if (LockOnAttempt == null) {
            LockOnAttempt = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveLockOnAttempt();
          }
          LockOnAttempt.MergeFrom(other.LockOnAttempt);
          break;
        case TelemetryDataOneofCase.OffensiveTraceAttempt:
          if (OffensiveTraceAttempt == null) {
            OffensiveTraceAttempt = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveTraceAttempt();
          }
          OffensiveTraceAttempt.MergeFrom(other.OffensiveTraceAttempt);
          break;
        case TelemetryDataOneofCase.ProtegoCastAttempt:
          if (ProtegoCastAttempt == null) {
            ProtegoCastAttempt = new global::WUProtos.Data.Client.ClientTelemetryCombatGameProtegoCastAttempt();
          }
          ProtegoCastAttempt.MergeFrom(other.ProtegoCastAttempt);
          break;
        case TelemetryDataOneofCase.OutOfEnergyShown:
          if (OutOfEnergyShown == null) {
            OutOfEnergyShown = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyDialogShown();
          }
          OutOfEnergyShown.MergeFrom(other.OutOfEnergyShown);
          break;
        case TelemetryDataOneofCase.OutOfEnergyPurchase:
          if (OutOfEnergyPurchase == null) {
            OutOfEnergyPurchase = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyPurchaseButton();
          }
          OutOfEnergyPurchase.MergeFrom(other.OutOfEnergyPurchase);
          break;
        case TelemetryDataOneofCase.CombatPotionButton:
          if (CombatPotionButton == null) {
            CombatPotionButton = new global::WUProtos.Data.Client.ClientTelemetryCombatGamePotionButton();
          }
          CombatPotionButton.MergeFrom(other.CombatPotionButton);
          break;
        case TelemetryDataOneofCase.Impression:
          if (Impression == null) {
            Impression = new global::WUProtos.Data.Client.ClientTelemetryImpression();
          }
          Impression.MergeFrom(other.Impression);
          break;
        case TelemetryDataOneofCase.DescriptionClickthrough:
          if (DescriptionClickthrough == null) {
            DescriptionClickthrough = new global::WUProtos.Data.Client.ClientTelemetryDescriptionClickthrough();
          }
          DescriptionClickthrough.MergeFrom(other.DescriptionClickthrough);
          break;
        case TelemetryDataOneofCase.HyperlinkClickthrough:
          if (HyperlinkClickthrough == null) {
            HyperlinkClickthrough = new global::WUProtos.Data.Client.ClientTelemetryHyperlinkClickthrough();
          }
          HyperlinkClickthrough.MergeFrom(other.HyperlinkClickthrough);
          break;
        case TelemetryDataOneofCase.SurfaceDetection:
          if (SurfaceDetection == null) {
            SurfaceDetection = new global::WUProtos.Data.Client.ClientTelemetrySurfaceDetection();
          }
          SurfaceDetection.MergeFrom(other.SurfaceDetection);
          break;
        case TelemetryDataOneofCase.EncounterStart:
          if (EncounterStart == null) {
            EncounterStart = new global::WUProtos.Data.Client.ClientTelemetryEncounterStart();
          }
          EncounterStart.MergeFrom(other.EncounterStart);
          break;
        case TelemetryDataOneofCase.PermissionRequested:
          if (PermissionRequested == null) {
            PermissionRequested = new global::WUProtos.Data.Client.ClientTelemetryPermissionsRequested();
          }
          PermissionRequested.MergeFrom(other.PermissionRequested);
          break;
        case TelemetryDataOneofCase.PermissionCheckFailed:
          if (PermissionCheckFailed == null) {
            PermissionCheckFailed = new global::WUProtos.Data.Client.ClientTelemetryPermissionsCheckFailed();
          }
          PermissionCheckFailed.MergeFrom(other.PermissionCheckFailed);
          break;
        case TelemetryDataOneofCase.DeeplinkTriggered:
          if (DeeplinkTriggered == null) {
            DeeplinkTriggered = new global::WUProtos.Data.Client.ClientTelemetryDeeplinkTriggered();
          }
          DeeplinkTriggered.MergeFrom(other.DeeplinkTriggered);
          break;
        case TelemetryDataOneofCase.LoginStart:
          if (LoginStart == null) {
            LoginStart = new global::WUProtos.Data.Client.ClientTelemetryLoginStart();
          }
          LoginStart.MergeFrom(other.LoginStart);
          break;
        case TelemetryDataOneofCase.LoginComplete:
          if (LoginComplete == null) {
            LoginComplete = new global::WUProtos.Data.Client.ClientTelemetryLoginComplete();
          }
          LoginComplete.MergeFrom(other.LoginComplete);
          break;
        case TelemetryDataOneofCase.PotionsMasterNoteAttempt:
          if (PotionsMasterNoteAttempt == null) {
            PotionsMasterNoteAttempt = new global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttempt();
          }
          PotionsMasterNoteAttempt.MergeFrom(other.PotionsMasterNoteAttempt);
          break;
        case TelemetryDataOneofCase.ProfilePortraitAction:
          if (ProfilePortraitAction == null) {
            ProfilePortraitAction = new global::WUProtos.Data.Client.ClientTelemetryProfilePortraitAction();
          }
          ProfilePortraitAction.MergeFrom(other.ProfilePortraitAction);
          break;
        case TelemetryDataOneofCase.ProfileButtonRandomize:
          if (ProfileButtonRandomize == null) {
            ProfileButtonRandomize = new global::WUProtos.Data.Client.ClientTelemetryProfileButtonRandomize();
          }
          ProfileButtonRandomize.MergeFrom(other.ProfileButtonRandomize);
          break;
        case TelemetryDataOneofCase.ProfileButtonLens:
          if (ProfileButtonLens == null) {
            ProfileButtonLens = new global::WUProtos.Data.Client.ClientTelemetryProfileButtonLens();
          }
          ProfileButtonLens.MergeFrom(other.ProfileButtonLens);
          break;
        case TelemetryDataOneofCase.ProfileButtonAsset:
          if (ProfileButtonAsset == null) {
            ProfileButtonAsset = new global::WUProtos.Data.Client.ClientTelemetryProfileButtonAssset();
          }
          ProfileButtonAsset.MergeFrom(other.ProfileButtonAsset);
          break;
        case TelemetryDataOneofCase.ProfileScreengrab:
          if (ProfileScreengrab == null) {
            ProfileScreengrab = new global::WUProtos.Data.Client.ClientTelemetryProfileScreenGrab();
          }
          ProfileScreengrab.MergeFrom(other.ProfileScreengrab);
          break;
        case TelemetryDataOneofCase.OutpostInteract:
          if (OutpostInteract == null) {
            OutpostInteract = new global::WUProtos.Data.Client.ClientTelemetryOutpostInteract();
          }
          OutpostInteract.MergeFrom(other.OutpostInteract);
          break;
        case TelemetryDataOneofCase.GreenhouseInteract:
          if (GreenhouseInteract == null) {
            GreenhouseInteract = new global::WUProtos.Data.Client.ClientTelemetryGreenhouseInteract();
          }
          GreenhouseInteract.MergeFrom(other.GreenhouseInteract);
          break;
        case TelemetryDataOneofCase.FamilyDetailsClicked:
          if (FamilyDetailsClicked == null) {
            FamilyDetailsClicked = new global::WUProtos.Data.Client.ClientTelemetryFamilyDetails();
          }
          FamilyDetailsClicked.MergeFrom(other.FamilyDetailsClicked);
          break;
        case TelemetryDataOneofCase.StickerDetailsClicked:
          if (StickerDetailsClicked == null) {
            StickerDetailsClicked = new global::WUProtos.Data.Client.ClientTelemetryStickerDetails();
          }
          StickerDetailsClicked.MergeFrom(other.StickerDetailsClicked);
          break;
        case TelemetryDataOneofCase.RegistryInfoClicked:
          if (RegistryInfoClicked == null) {
            RegistryInfoClicked = new global::WUProtos.Data.Client.ClientTelemetryRegistryInfo();
          }
          RegistryInfoClicked.MergeFrom(other.RegistryInfoClicked);
          break;
        case TelemetryDataOneofCase.RateApp:
          if (RateApp == null) {
            RateApp = new global::WUProtos.Data.Client.ClientTelemetryRateApp();
          }
          RateApp.MergeFrom(other.RateApp);
          break;
        case TelemetryDataOneofCase.ExceptionInfo:
          if (ExceptionInfo == null) {
            ExceptionInfo = new global::WUProtos.Data.Client.ClientTelemetryException();
          }
          ExceptionInfo.MergeFrom(other.ExceptionInfo);
          break;
        case TelemetryDataOneofCase.ArModeToggled:
          if (ArModeToggled == null) {
            ArModeToggled = new global::WUProtos.Data.Client.ClientTelemetrySettingsARModeToggled();
          }
          ArModeToggled.MergeFrom(other.ArModeToggled);
          break;
        case TelemetryDataOneofCase.BatteryModeToggled:
          if (BatteryModeToggled == null) {
            BatteryModeToggled = new global::WUProtos.Data.Client.ClientTelemetrySettingsBatteryModeToggled();
          }
          BatteryModeToggled.MergeFrom(other.BatteryModeToggled);
          break;
        case TelemetryDataOneofCase.AuthUpdated:
          if (AuthUpdated == null) {
            AuthUpdated = new global::WUProtos.Data.Client.ClientTelemetrySettingsAuthUpdated();
          }
          AuthUpdated.MergeFrom(other.AuthUpdated);
          break;
        case TelemetryDataOneofCase.StorePopupOpen:
          if (StorePopupOpen == null) {
            StorePopupOpen = new global::WUProtos.Data.Client.ClientTelemetryStorePopupOpen();
          }
          StorePopupOpen.MergeFrom(other.StorePopupOpen);
          break;
        case TelemetryDataOneofCase.StoreTabOpen:
          if (StoreTabOpen == null) {
            StoreTabOpen = new global::WUProtos.Data.Client.ClientTelemetryStoreTabOpen();
          }
          StoreTabOpen.MergeFrom(other.StoreTabOpen);
          break;
        case TelemetryDataOneofCase.VaultPopupOpen:
          if (VaultPopupOpen == null) {
            VaultPopupOpen = new global::WUProtos.Data.Client.ClientTelemetryVaultItemImpression();
          }
          VaultPopupOpen.MergeFrom(other.VaultPopupOpen);
          break;
        case TelemetryDataOneofCase.VaultTabOpen:
          if (VaultTabOpen == null) {
            VaultTabOpen = new global::WUProtos.Data.Client.ClientTelemetryVaultTabImpression();
          }
          VaultTabOpen.MergeFrom(other.VaultTabOpen);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.Client.ClientTelemetryStartup subBuilder = new global::WUProtos.Data.Client.ClientTelemetryStartup();
            if (telemetryDataCase_ == TelemetryDataOneofCase.Startup) {
              subBuilder.MergeFrom(Startup);
            }
            input.ReadMessage(subBuilder);
            Startup = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameStart subBuilder = new global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameStart();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameStart) {
              subBuilder.MergeFrom(SwishSpellGameStart);
            }
            input.ReadMessage(subBuilder);
            SwishSpellGameStart = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameEnd subBuilder = new global::WUProtos.Data.Client.ClientTelemetrySwishSpellGameEnd();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SwishSpellGameEnd) {
              subBuilder.MergeFrom(SwishSpellGameEnd);
            }
            input.ReadMessage(subBuilder);
            SwishSpellGameEnd = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Data.Client.ClientTelemetryAssetLoad subBuilder = new global::WUProtos.Data.Client.ClientTelemetryAssetLoad();
            if (telemetryDataCase_ == TelemetryDataOneofCase.AssetLoad) {
              subBuilder.MergeFrom(AssetLoad);
            }
            input.ReadMessage(subBuilder);
            AssetLoad = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Data.Client.ClientTelemetryBundleDownload subBuilder = new global::WUProtos.Data.Client.ClientTelemetryBundleDownload();
            if (telemetryDataCase_ == TelemetryDataOneofCase.BundleDownload) {
              subBuilder.MergeFrom(BundleDownload);
            }
            input.ReadMessage(subBuilder);
            BundleDownload = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Data.Client.ClientTelemetryStopwatch subBuilder = new global::WUProtos.Data.Client.ClientTelemetryStopwatch();
            if (telemetryDataCase_ == TelemetryDataOneofCase.Stopwatch) {
              subBuilder.MergeFrom(Stopwatch);
            }
            input.ReadMessage(subBuilder);
            Stopwatch = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Data.Client.ClientTelemetrySmokeTest subBuilder = new global::WUProtos.Data.Client.ClientTelemetrySmokeTest();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SmokeTest) {
              subBuilder.MergeFrom(SmokeTest);
            }
            input.ReadMessage(subBuilder);
            SmokeTest = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagsUIEntered subBuilder = new global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagsUIEntered();
            if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsUiEntered) {
              subBuilder.MergeFrom(EnvironmentalTagsUiEntered);
            }
            input.ReadMessage(subBuilder);
            EnvironmentalTagsUiEntered = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged subBuilder = new global::WUProtos.Data.Client.ClientTelemetryEnvironmentalTagSevereWeatherAcknowledged();
            if (telemetryDataCase_ == TelemetryDataOneofCase.EnvironmentalTagsWeatherAcknowledged) {
              subBuilder.MergeFrom(EnvironmentalTagsWeatherAcknowledged);
            }
            input.ReadMessage(subBuilder);
            EnvironmentalTagsWeatherAcknowledged = subBuilder;
            break;
          }
          case 82: {
            global::WUProtos.Data.Client.ClientTelemetryAvatarInteract subBuilder = new global::WUProtos.Data.Client.ClientTelemetryAvatarInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.AvatarInteract) {
              subBuilder.MergeFrom(AvatarInteract);
            }
            input.ReadMessage(subBuilder);
            AvatarInteract = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Data.Client.ClientTelemetryRewardsFlow subBuilder = new global::WUProtos.Data.Client.ClientTelemetryRewardsFlow();
            if (telemetryDataCase_ == TelemetryDataOneofCase.RewardsFlow) {
              subBuilder.MergeFrom(RewardsFlow);
            }
            input.ReadMessage(subBuilder);
            RewardsFlow = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Data.Client.ClientTelemetryPortkeysWrackspurtTapped subBuilder = new global::WUProtos.Data.Client.ClientTelemetryPortkeysWrackspurtTapped();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysWrackspurtTapped) {
              subBuilder.MergeFrom(PortkeysWrackspurtTapped);
            }
            input.ReadMessage(subBuilder);
            PortkeysWrackspurtTapped = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Data.Client.ClientTelemetryPortkeysOutOfBoundsReached subBuilder = new global::WUProtos.Data.Client.ClientTelemetryPortkeysOutOfBoundsReached();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysOutOfBoundsReached) {
              subBuilder.MergeFrom(PortkeysOutOfBoundsReached);
            }
            input.ReadMessage(subBuilder);
            PortkeysOutOfBoundsReached = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.Client.ClientTelemetryPortkeysAdvancedARCheck subBuilder = new global::WUProtos.Data.Client.ClientTelemetryPortkeysAdvancedARCheck();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PortkeysAdvancedArCheck) {
              subBuilder.MergeFrom(PortkeysAdvancedArCheck);
            }
            input.ReadMessage(subBuilder);
            PortkeysAdvancedArCheck = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Data.Client.ClientTelemetryProfessionMainMenu subBuilder = new global::WUProtos.Data.Client.ClientTelemetryProfessionMainMenu();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionMainMenu) {
              subBuilder.MergeFrom(ProfessionMainMenu);
            }
            input.ReadMessage(subBuilder);
            ProfessionMainMenu = subBuilder;
            break;
          }
          case 130: {
            global::WUProtos.Data.Client.ClientTelemetryProfessionNodeSelected subBuilder = new global::WUProtos.Data.Client.ClientTelemetryProfessionNodeSelected();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfessionNodeSelected) {
              subBuilder.MergeFrom(ProfessionNodeSelected);
            }
            input.ReadMessage(subBuilder);
            ProfessionNodeSelected = subBuilder;
            break;
          }
          case 138: {
            global::WUProtos.Data.Client.ClientTelemetryButtonPress subBuilder = new global::WUProtos.Data.Client.ClientTelemetryButtonPress();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ButtonPress) {
              subBuilder.MergeFrom(ButtonPress);
            }
            input.ReadMessage(subBuilder);
            ButtonPress = subBuilder;
            break;
          }
          case 146: {
            global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeSelectMob subBuilder = new global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeSelectMob();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SelectMob) {
              subBuilder.MergeFrom(SelectMob);
            }
            input.ReadMessage(subBuilder);
            SelectMob = subBuilder;
            break;
          }
          case 154: {
            global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeMoreInfo subBuilder = new global::WUProtos.Data.Client.ClientTelemetryWizardingChallengeMoreInfo();
            if (telemetryDataCase_ == TelemetryDataOneofCase.MoreInfo) {
              subBuilder.MergeFrom(MoreInfo);
            }
            input.ReadMessage(subBuilder);
            MoreInfo = subBuilder;
            break;
          }
          case 162: {
            global::WUProtos.Data.Client.ClientTelemetryLandmarkInteract subBuilder = new global::WUProtos.Data.Client.ClientTelemetryLandmarkInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LandmarkInteract) {
              subBuilder.MergeFrom(LandmarkInteract);
            }
            input.ReadMessage(subBuilder);
            LandmarkInteract = subBuilder;
            break;
          }
          case 170: {
            global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveLockOnAttempt subBuilder = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveLockOnAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LockOnAttempt) {
              subBuilder.MergeFrom(LockOnAttempt);
            }
            input.ReadMessage(subBuilder);
            LockOnAttempt = subBuilder;
            break;
          }
          case 178: {
            global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveTraceAttempt subBuilder = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOffensiveTraceAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OffensiveTraceAttempt) {
              subBuilder.MergeFrom(OffensiveTraceAttempt);
            }
            input.ReadMessage(subBuilder);
            OffensiveTraceAttempt = subBuilder;
            break;
          }
          case 186: {
            global::WUProtos.Data.Client.ClientTelemetryCombatGameProtegoCastAttempt subBuilder = new global::WUProtos.Data.Client.ClientTelemetryCombatGameProtegoCastAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProtegoCastAttempt) {
              subBuilder.MergeFrom(ProtegoCastAttempt);
            }
            input.ReadMessage(subBuilder);
            ProtegoCastAttempt = subBuilder;
            break;
          }
          case 194: {
            global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyDialogShown subBuilder = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyDialogShown();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyShown) {
              subBuilder.MergeFrom(OutOfEnergyShown);
            }
            input.ReadMessage(subBuilder);
            OutOfEnergyShown = subBuilder;
            break;
          }
          case 202: {
            global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyPurchaseButton subBuilder = new global::WUProtos.Data.Client.ClientTelemetryCombatGameOutOfEnergyPurchaseButton();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OutOfEnergyPurchase) {
              subBuilder.MergeFrom(OutOfEnergyPurchase);
            }
            input.ReadMessage(subBuilder);
            OutOfEnergyPurchase = subBuilder;
            break;
          }
          case 210: {
            global::WUProtos.Data.Client.ClientTelemetryCombatGamePotionButton subBuilder = new global::WUProtos.Data.Client.ClientTelemetryCombatGamePotionButton();
            if (telemetryDataCase_ == TelemetryDataOneofCase.CombatPotionButton) {
              subBuilder.MergeFrom(CombatPotionButton);
            }
            input.ReadMessage(subBuilder);
            CombatPotionButton = subBuilder;
            break;
          }
          case 218: {
            global::WUProtos.Data.Client.ClientTelemetryImpression subBuilder = new global::WUProtos.Data.Client.ClientTelemetryImpression();
            if (telemetryDataCase_ == TelemetryDataOneofCase.Impression) {
              subBuilder.MergeFrom(Impression);
            }
            input.ReadMessage(subBuilder);
            Impression = subBuilder;
            break;
          }
          case 226: {
            global::WUProtos.Data.Client.ClientTelemetryDescriptionClickthrough subBuilder = new global::WUProtos.Data.Client.ClientTelemetryDescriptionClickthrough();
            if (telemetryDataCase_ == TelemetryDataOneofCase.DescriptionClickthrough) {
              subBuilder.MergeFrom(DescriptionClickthrough);
            }
            input.ReadMessage(subBuilder);
            DescriptionClickthrough = subBuilder;
            break;
          }
          case 234: {
            global::WUProtos.Data.Client.ClientTelemetryHyperlinkClickthrough subBuilder = new global::WUProtos.Data.Client.ClientTelemetryHyperlinkClickthrough();
            if (telemetryDataCase_ == TelemetryDataOneofCase.HyperlinkClickthrough) {
              subBuilder.MergeFrom(HyperlinkClickthrough);
            }
            input.ReadMessage(subBuilder);
            HyperlinkClickthrough = subBuilder;
            break;
          }
          case 242: {
            global::WUProtos.Data.Client.ClientTelemetrySurfaceDetection subBuilder = new global::WUProtos.Data.Client.ClientTelemetrySurfaceDetection();
            if (telemetryDataCase_ == TelemetryDataOneofCase.SurfaceDetection) {
              subBuilder.MergeFrom(SurfaceDetection);
            }
            input.ReadMessage(subBuilder);
            SurfaceDetection = subBuilder;
            break;
          }
          case 250: {
            global::WUProtos.Data.Client.ClientTelemetryEncounterStart subBuilder = new global::WUProtos.Data.Client.ClientTelemetryEncounterStart();
            if (telemetryDataCase_ == TelemetryDataOneofCase.EncounterStart) {
              subBuilder.MergeFrom(EncounterStart);
            }
            input.ReadMessage(subBuilder);
            EncounterStart = subBuilder;
            break;
          }
          case 258: {
            global::WUProtos.Data.Client.ClientTelemetryPermissionsRequested subBuilder = new global::WUProtos.Data.Client.ClientTelemetryPermissionsRequested();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionRequested) {
              subBuilder.MergeFrom(PermissionRequested);
            }
            input.ReadMessage(subBuilder);
            PermissionRequested = subBuilder;
            break;
          }
          case 266: {
            global::WUProtos.Data.Client.ClientTelemetryPermissionsCheckFailed subBuilder = new global::WUProtos.Data.Client.ClientTelemetryPermissionsCheckFailed();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PermissionCheckFailed) {
              subBuilder.MergeFrom(PermissionCheckFailed);
            }
            input.ReadMessage(subBuilder);
            PermissionCheckFailed = subBuilder;
            break;
          }
          case 274: {
            global::WUProtos.Data.Client.ClientTelemetryDeeplinkTriggered subBuilder = new global::WUProtos.Data.Client.ClientTelemetryDeeplinkTriggered();
            if (telemetryDataCase_ == TelemetryDataOneofCase.DeeplinkTriggered) {
              subBuilder.MergeFrom(DeeplinkTriggered);
            }
            input.ReadMessage(subBuilder);
            DeeplinkTriggered = subBuilder;
            break;
          }
          case 282: {
            global::WUProtos.Data.Client.ClientTelemetryLoginStart subBuilder = new global::WUProtos.Data.Client.ClientTelemetryLoginStart();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LoginStart) {
              subBuilder.MergeFrom(LoginStart);
            }
            input.ReadMessage(subBuilder);
            LoginStart = subBuilder;
            break;
          }
          case 290: {
            global::WUProtos.Data.Client.ClientTelemetryLoginComplete subBuilder = new global::WUProtos.Data.Client.ClientTelemetryLoginComplete();
            if (telemetryDataCase_ == TelemetryDataOneofCase.LoginComplete) {
              subBuilder.MergeFrom(LoginComplete);
            }
            input.ReadMessage(subBuilder);
            LoginComplete = subBuilder;
            break;
          }
          case 298: {
            global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttempt subBuilder = new global::WUProtos.Data.Client.ClientTelemetryPotionsMasterNoteAttempt();
            if (telemetryDataCase_ == TelemetryDataOneofCase.PotionsMasterNoteAttempt) {
              subBuilder.MergeFrom(PotionsMasterNoteAttempt);
            }
            input.ReadMessage(subBuilder);
            PotionsMasterNoteAttempt = subBuilder;
            break;
          }
          case 306: {
            global::WUProtos.Data.Client.ClientTelemetryProfilePortraitAction subBuilder = new global::WUProtos.Data.Client.ClientTelemetryProfilePortraitAction();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfilePortraitAction) {
              subBuilder.MergeFrom(ProfilePortraitAction);
            }
            input.ReadMessage(subBuilder);
            ProfilePortraitAction = subBuilder;
            break;
          }
          case 314: {
            global::WUProtos.Data.Client.ClientTelemetryProfileButtonRandomize subBuilder = new global::WUProtos.Data.Client.ClientTelemetryProfileButtonRandomize();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonRandomize) {
              subBuilder.MergeFrom(ProfileButtonRandomize);
            }
            input.ReadMessage(subBuilder);
            ProfileButtonRandomize = subBuilder;
            break;
          }
          case 322: {
            global::WUProtos.Data.Client.ClientTelemetryProfileButtonLens subBuilder = new global::WUProtos.Data.Client.ClientTelemetryProfileButtonLens();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonLens) {
              subBuilder.MergeFrom(ProfileButtonLens);
            }
            input.ReadMessage(subBuilder);
            ProfileButtonLens = subBuilder;
            break;
          }
          case 330: {
            global::WUProtos.Data.Client.ClientTelemetryProfileButtonAssset subBuilder = new global::WUProtos.Data.Client.ClientTelemetryProfileButtonAssset();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileButtonAsset) {
              subBuilder.MergeFrom(ProfileButtonAsset);
            }
            input.ReadMessage(subBuilder);
            ProfileButtonAsset = subBuilder;
            break;
          }
          case 338: {
            global::WUProtos.Data.Client.ClientTelemetryProfileScreenGrab subBuilder = new global::WUProtos.Data.Client.ClientTelemetryProfileScreenGrab();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ProfileScreengrab) {
              subBuilder.MergeFrom(ProfileScreengrab);
            }
            input.ReadMessage(subBuilder);
            ProfileScreengrab = subBuilder;
            break;
          }
          case 346: {
            global::WUProtos.Data.Client.ClientTelemetryOutpostInteract subBuilder = new global::WUProtos.Data.Client.ClientTelemetryOutpostInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.OutpostInteract) {
              subBuilder.MergeFrom(OutpostInteract);
            }
            input.ReadMessage(subBuilder);
            OutpostInteract = subBuilder;
            break;
          }
          case 354: {
            global::WUProtos.Data.Client.ClientTelemetryGreenhouseInteract subBuilder = new global::WUProtos.Data.Client.ClientTelemetryGreenhouseInteract();
            if (telemetryDataCase_ == TelemetryDataOneofCase.GreenhouseInteract) {
              subBuilder.MergeFrom(GreenhouseInteract);
            }
            input.ReadMessage(subBuilder);
            GreenhouseInteract = subBuilder;
            break;
          }
          case 362: {
            global::WUProtos.Data.Client.ClientTelemetryFamilyDetails subBuilder = new global::WUProtos.Data.Client.ClientTelemetryFamilyDetails();
            if (telemetryDataCase_ == TelemetryDataOneofCase.FamilyDetailsClicked) {
              subBuilder.MergeFrom(FamilyDetailsClicked);
            }
            input.ReadMessage(subBuilder);
            FamilyDetailsClicked = subBuilder;
            break;
          }
          case 370: {
            global::WUProtos.Data.Client.ClientTelemetryStickerDetails subBuilder = new global::WUProtos.Data.Client.ClientTelemetryStickerDetails();
            if (telemetryDataCase_ == TelemetryDataOneofCase.StickerDetailsClicked) {
              subBuilder.MergeFrom(StickerDetailsClicked);
            }
            input.ReadMessage(subBuilder);
            StickerDetailsClicked = subBuilder;
            break;
          }
          case 378: {
            global::WUProtos.Data.Client.ClientTelemetryRegistryInfo subBuilder = new global::WUProtos.Data.Client.ClientTelemetryRegistryInfo();
            if (telemetryDataCase_ == TelemetryDataOneofCase.RegistryInfoClicked) {
              subBuilder.MergeFrom(RegistryInfoClicked);
            }
            input.ReadMessage(subBuilder);
            RegistryInfoClicked = subBuilder;
            break;
          }
          case 386: {
            global::WUProtos.Data.Client.ClientTelemetryRateApp subBuilder = new global::WUProtos.Data.Client.ClientTelemetryRateApp();
            if (telemetryDataCase_ == TelemetryDataOneofCase.RateApp) {
              subBuilder.MergeFrom(RateApp);
            }
            input.ReadMessage(subBuilder);
            RateApp = subBuilder;
            break;
          }
          case 394: {
            global::WUProtos.Data.Client.ClientTelemetryException subBuilder = new global::WUProtos.Data.Client.ClientTelemetryException();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ExceptionInfo) {
              subBuilder.MergeFrom(ExceptionInfo);
            }
            input.ReadMessage(subBuilder);
            ExceptionInfo = subBuilder;
            break;
          }
          case 402: {
            global::WUProtos.Data.Client.ClientTelemetrySettingsARModeToggled subBuilder = new global::WUProtos.Data.Client.ClientTelemetrySettingsARModeToggled();
            if (telemetryDataCase_ == TelemetryDataOneofCase.ArModeToggled) {
              subBuilder.MergeFrom(ArModeToggled);
            }
            input.ReadMessage(subBuilder);
            ArModeToggled = subBuilder;
            break;
          }
          case 410: {
            global::WUProtos.Data.Client.ClientTelemetrySettingsBatteryModeToggled subBuilder = new global::WUProtos.Data.Client.ClientTelemetrySettingsBatteryModeToggled();
            if (telemetryDataCase_ == TelemetryDataOneofCase.BatteryModeToggled) {
              subBuilder.MergeFrom(BatteryModeToggled);
            }
            input.ReadMessage(subBuilder);
            BatteryModeToggled = subBuilder;
            break;
          }
          case 418: {
            global::WUProtos.Data.Client.ClientTelemetrySettingsAuthUpdated subBuilder = new global::WUProtos.Data.Client.ClientTelemetrySettingsAuthUpdated();
            if (telemetryDataCase_ == TelemetryDataOneofCase.AuthUpdated) {
              subBuilder.MergeFrom(AuthUpdated);
            }
            input.ReadMessage(subBuilder);
            AuthUpdated = subBuilder;
            break;
          }
          case 426: {
            global::WUProtos.Data.Client.ClientTelemetryStorePopupOpen subBuilder = new global::WUProtos.Data.Client.ClientTelemetryStorePopupOpen();
            if (telemetryDataCase_ == TelemetryDataOneofCase.StorePopupOpen) {
              subBuilder.MergeFrom(StorePopupOpen);
            }
            input.ReadMessage(subBuilder);
            StorePopupOpen = subBuilder;
            break;
          }
          case 434: {
            global::WUProtos.Data.Client.ClientTelemetryStoreTabOpen subBuilder = new global::WUProtos.Data.Client.ClientTelemetryStoreTabOpen();
            if (telemetryDataCase_ == TelemetryDataOneofCase.StoreTabOpen) {
              subBuilder.MergeFrom(StoreTabOpen);
            }
            input.ReadMessage(subBuilder);
            StoreTabOpen = subBuilder;
            break;
          }
          case 442: {
            global::WUProtos.Data.Client.ClientTelemetryVaultItemImpression subBuilder = new global::WUProtos.Data.Client.ClientTelemetryVaultItemImpression();
            if (telemetryDataCase_ == TelemetryDataOneofCase.VaultPopupOpen) {
              subBuilder.MergeFrom(VaultPopupOpen);
            }
            input.ReadMessage(subBuilder);
            VaultPopupOpen = subBuilder;
            break;
          }
          case 450: {
            global::WUProtos.Data.Client.ClientTelemetryVaultTabImpression subBuilder = new global::WUProtos.Data.Client.ClientTelemetryVaultTabImpression();
            if (telemetryDataCase_ == TelemetryDataOneofCase.VaultTabOpen) {
              subBuilder.MergeFrom(VaultTabOpen);
            }
            input.ReadMessage(subBuilder);
            VaultTabOpen = subBuilder;
            break;
          }
          case 8010: {
            if (serverData_ == null) {
              ServerData = new global::WUProtos.Data.Telemetry.PlatformServerData();
            }
            input.ReadMessage(ServerData);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
