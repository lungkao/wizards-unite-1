// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Inventory/InventoryCollectionItem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Inventory {

  /// <summary>Holder for reflection information generated from WUProtos/Inventory/InventoryCollectionItem.proto</summary>
  public static partial class InventoryCollectionItemReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Inventory/InventoryCollectionItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InventoryCollectionItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBXVVByb3Rvcy9JbnZlbnRvcnkvSW52ZW50b3J5Q29sbGVjdGlvbkl0ZW0u",
            "cHJvdG8SEldVUHJvdG9zLkludmVudG9yeSLkAQoXSW52ZW50b3J5Q29sbGVj",
            "dGlvbkl0ZW0SCgoCaWQYASABKAkSGQoRdGltZXNfZW5jb3VudGVyZWQYAiAB",
            "KAUSFgoOdGltZXNfcmV0dXJuZWQYAyABKAUSJAocZmlyc3RfdGltZV9yZXdh",
            "cmRzX2NvbGxlY3RlZBgEIAEoCBIWCg5mb3VuZF9sb2NhdGlvbhgFIAEoCRIS",
            "Cgpmb3VuZF90aW1lGAYgASgDEg4KBnBsYWNlZBgIIAEoCBIYChBjdXJyZW50",
            "X3JldHVybmVkGAkgASgFEg4KBnNoYXJkcxgKIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.InventoryCollectionItem), global::WUProtos.Inventory.InventoryCollectionItem.Parser, new[]{ "Id", "TimesEncountered", "TimesReturned", "FirstTimeRewardsCollected", "FoundLocation", "FoundTime", "Placed", "CurrentReturned", "Shards" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InventoryCollectionItem : pb::IMessage<InventoryCollectionItem> {
    private static readonly pb::MessageParser<InventoryCollectionItem> _parser = new pb::MessageParser<InventoryCollectionItem>(() => new InventoryCollectionItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventoryCollectionItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Inventory.InventoryCollectionItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryCollectionItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryCollectionItem(InventoryCollectionItem other) : this() {
      id_ = other.id_;
      timesEncountered_ = other.timesEncountered_;
      timesReturned_ = other.timesReturned_;
      firstTimeRewardsCollected_ = other.firstTimeRewardsCollected_;
      foundLocation_ = other.foundLocation_;
      foundTime_ = other.foundTime_;
      placed_ = other.placed_;
      currentReturned_ = other.currentReturned_;
      shards_ = other.shards_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryCollectionItem Clone() {
      return new InventoryCollectionItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "times_encountered" field.</summary>
    public const int TimesEncounteredFieldNumber = 2;
    private int timesEncountered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesEncountered {
      get { return timesEncountered_; }
      set {
        timesEncountered_ = value;
      }
    }

    /// <summary>Field number for the "times_returned" field.</summary>
    public const int TimesReturnedFieldNumber = 3;
    private int timesReturned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesReturned {
      get { return timesReturned_; }
      set {
        timesReturned_ = value;
      }
    }

    /// <summary>Field number for the "first_time_rewards_collected" field.</summary>
    public const int FirstTimeRewardsCollectedFieldNumber = 4;
    private bool firstTimeRewardsCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstTimeRewardsCollected {
      get { return firstTimeRewardsCollected_; }
      set {
        firstTimeRewardsCollected_ = value;
      }
    }

    /// <summary>Field number for the "found_location" field.</summary>
    public const int FoundLocationFieldNumber = 5;
    private string foundLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FoundLocation {
      get { return foundLocation_; }
      set {
        foundLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "found_time" field.</summary>
    public const int FoundTimeFieldNumber = 6;
    private long foundTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FoundTime {
      get { return foundTime_; }
      set {
        foundTime_ = value;
      }
    }

    /// <summary>Field number for the "placed" field.</summary>
    public const int PlacedFieldNumber = 8;
    private bool placed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Placed {
      get { return placed_; }
      set {
        placed_ = value;
      }
    }

    /// <summary>Field number for the "current_returned" field.</summary>
    public const int CurrentReturnedFieldNumber = 9;
    private int currentReturned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentReturned {
      get { return currentReturned_; }
      set {
        currentReturned_ = value;
      }
    }

    /// <summary>Field number for the "shards" field.</summary>
    public const int ShardsFieldNumber = 10;
    private uint shards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Shards {
      get { return shards_; }
      set {
        shards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InventoryCollectionItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InventoryCollectionItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (TimesEncountered != other.TimesEncountered) return false;
      if (TimesReturned != other.TimesReturned) return false;
      if (FirstTimeRewardsCollected != other.FirstTimeRewardsCollected) return false;
      if (FoundLocation != other.FoundLocation) return false;
      if (FoundTime != other.FoundTime) return false;
      if (Placed != other.Placed) return false;
      if (CurrentReturned != other.CurrentReturned) return false;
      if (Shards != other.Shards) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TimesEncountered != 0) hash ^= TimesEncountered.GetHashCode();
      if (TimesReturned != 0) hash ^= TimesReturned.GetHashCode();
      if (FirstTimeRewardsCollected != false) hash ^= FirstTimeRewardsCollected.GetHashCode();
      if (FoundLocation.Length != 0) hash ^= FoundLocation.GetHashCode();
      if (FoundTime != 0L) hash ^= FoundTime.GetHashCode();
      if (Placed != false) hash ^= Placed.GetHashCode();
      if (CurrentReturned != 0) hash ^= CurrentReturned.GetHashCode();
      if (Shards != 0) hash ^= Shards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (TimesEncountered != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimesEncountered);
      }
      if (TimesReturned != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimesReturned);
      }
      if (FirstTimeRewardsCollected != false) {
        output.WriteRawTag(32);
        output.WriteBool(FirstTimeRewardsCollected);
      }
      if (FoundLocation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FoundLocation);
      }
      if (FoundTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(FoundTime);
      }
      if (Placed != false) {
        output.WriteRawTag(64);
        output.WriteBool(Placed);
      }
      if (CurrentReturned != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CurrentReturned);
      }
      if (Shards != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Shards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (TimesEncountered != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesEncountered);
      }
      if (TimesReturned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesReturned);
      }
      if (FirstTimeRewardsCollected != false) {
        size += 1 + 1;
      }
      if (FoundLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FoundLocation);
      }
      if (FoundTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FoundTime);
      }
      if (Placed != false) {
        size += 1 + 1;
      }
      if (CurrentReturned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentReturned);
      }
      if (Shards != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Shards);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InventoryCollectionItem other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TimesEncountered != 0) {
        TimesEncountered = other.TimesEncountered;
      }
      if (other.TimesReturned != 0) {
        TimesReturned = other.TimesReturned;
      }
      if (other.FirstTimeRewardsCollected != false) {
        FirstTimeRewardsCollected = other.FirstTimeRewardsCollected;
      }
      if (other.FoundLocation.Length != 0) {
        FoundLocation = other.FoundLocation;
      }
      if (other.FoundTime != 0L) {
        FoundTime = other.FoundTime;
      }
      if (other.Placed != false) {
        Placed = other.Placed;
      }
      if (other.CurrentReturned != 0) {
        CurrentReturned = other.CurrentReturned;
      }
      if (other.Shards != 0) {
        Shards = other.Shards;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            TimesEncountered = input.ReadInt32();
            break;
          }
          case 24: {
            TimesReturned = input.ReadInt32();
            break;
          }
          case 32: {
            FirstTimeRewardsCollected = input.ReadBool();
            break;
          }
          case 42: {
            FoundLocation = input.ReadString();
            break;
          }
          case 48: {
            FoundTime = input.ReadInt64();
            break;
          }
          case 64: {
            Placed = input.ReadBool();
            break;
          }
          case 72: {
            CurrentReturned = input.ReadInt32();
            break;
          }
          case 80: {
            Shards = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
