// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Inventory/AtlasInventoryItem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Inventory {

  /// <summary>Holder for reflection information generated from WUProtos/Inventory/AtlasInventoryItem.proto</summary>
  public static partial class AtlasInventoryItemReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Inventory/AtlasInventoryItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AtlasInventoryItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitXVVByb3Rvcy9JbnZlbnRvcnkvQXRsYXNJbnZlbnRvcnlJdGVtLnByb3Rv",
            "EhJXVVByb3Rvcy5JbnZlbnRvcnkaKFdVUHJvdG9zL0RhdGEvUGxheWVyL1Bs",
            "YXllclByb2ZpbGUucHJvdG8aNldVUHJvdG9zL0RhdGEvUGxheWVyL1BsYXll",
            "clByb2Zlc3Npb25zUHJvZ3Jlc3NWMy5wcm90bxosV1VQcm90b3MvRGF0YS9Q",
            "bGF5ZXIvUGxheWVyQWNoaWV2ZW1lbnQucHJvdG8aK1dVUHJvdG9zL0ludmVu",
            "dG9yeS9JbnZlbnRvcnlWYXVsdEl0ZW0ucHJvdG8aMFdVUHJvdG9zL0ludmVu",
            "dG9yeS9JbnZlbnRvcnlDb2xsZWN0aW9uSXRlbS5wcm90bxoyV1VQcm90b3Mv",
            "SW52ZW50b3J5L0ludmVudG9yeUNvbGxlY3Rpb25GYW1pbHkucHJvdG8aLVdV",
            "UHJvdG9zL0ludmVudG9yeS9JbnZlbnRvcnlXYWxrYm94SXRlbS5wcm90bxou",
            "V1VQcm90b3MvSW52ZW50b3J5L0ludmVudG9yeUZlYXR1cmVGbGFncy5wcm90",
            "bxotV1VQcm90b3MvSW52ZW50b3J5L0ludmVudG9yeVBvcnRrZXlJdGVtLnBy",
            "b3RvGjBXVVByb3Rvcy9JbnZlbnRvcnkvSW52ZW50b3J5Q29sbGVjdGlvblBh",
            "Z2UucHJvdG8aL1dVUHJvdG9zL0ludmVudG9yeS9JbnZlbnRvcnlWYXVsdENh",
            "cGFjaXR5LnByb3RvGipXVVByb3Rvcy9JbnZlbnRvcnkvSW52ZW50b3J5Q2F1",
            "bGRyb24ucHJvdG8aMVdVUHJvdG9zL0ludmVudG9yeS9JbnZlbnRvcnlFc2Ny",
            "b3dlZFJld2FyZHMucHJvdG8aKldVUHJvdG9zL0ludmVudG9yeS9JbnZlbnRv",
            "cnlRdWVzdExvZy5wcm90bxonV1VQcm90b3MvRGF0YS9CdWZmL0FjdGl2ZUJ1",
            "ZmZMaXN0LnByb3RvIo8IChJBdGxhc0ludmVudG9yeUl0ZW0SNgoHcHJvZmls",
            "ZRgBIAEoCzIjLldVUHJvdG9zLkRhdGEuUGxheWVyLlBsYXllclByb2ZpbGVI",
            "ABI8Cgp2YXVsdF9pdGVtGAIgASgLMiYuV1VQcm90b3MuSW52ZW50b3J5Lklu",
            "dmVudG9yeVZhdWx0SXRlbUgAEkYKD2NvbGxlY3Rpb25faXRlbRgDIAEoCzIr",
            "LldVUHJvdG9zLkludmVudG9yeS5JbnZlbnRvcnlDb2xsZWN0aW9uSXRlbUgA",
            "EkoKEWNvbGxlY3Rpb25fZmFtaWx5GAQgASgLMi0uV1VQcm90b3MuSW52ZW50",
            "b3J5LkludmVudG9yeUNvbGxlY3Rpb25GYW1pbHlIABI7Cgd3YWxrYm94GAUg",
            "ASgLMiguV1VQcm90b3MuSW52ZW50b3J5LkludmVudG9yeVdhbGtib3hJdGVt",
            "SAASQQoMcGxheWVyX2ZsYWdzGAYgASgLMikuV1VQcm90b3MuSW52ZW50b3J5",
            "LkludmVudG9yeUZlYXR1cmVGbGFnc0gAEjsKB3BvcnRrZXkYByABKAsyKC5X",
            "VVByb3Rvcy5JbnZlbnRvcnkuSW52ZW50b3J5UG9ydGtleUl0ZW1IABJFChdw",
            "bGF5ZXJfYWN0aXZlX2J1ZmZfbGlzdBgIIAEoCzIiLldVUHJvdG9zLkRhdGEu",
            "QnVmZi5BY3RpdmVCdWZmTGlzdEgAEkYKD2NvbGxlY3Rpb25fcGFnZRgJIAEo",
            "CzIrLldVUHJvdG9zLkludmVudG9yeS5JbnZlbnRvcnlDb2xsZWN0aW9uUGFn",
            "ZUgAEkQKDnZhdWx0X2NhcGFjaXR5GAsgASgLMiouV1VQcm90b3MuSW52ZW50",
            "b3J5LkludmVudG9yeVZhdWx0Q2FwYWNpdHlIABI5CghjYXVsZHJvbhgMIAEo",
            "CzIlLldVUHJvdG9zLkludmVudG9yeS5JbnZlbnRvcnlDYXVsZHJvbkgAEkgK",
            "EGVzY3Jvd2VkX3Jld2FyZHMYDSABKAsyLC5XVVByb3Rvcy5JbnZlbnRvcnku",
            "SW52ZW50b3J5RXNjcm93ZWRSZXdhcmRzSAASVAoXcHJvZmVzc2lvbnNfcHJv",
            "Z3Jlc3NfdjMYDiABKAsyMS5XVVByb3Rvcy5EYXRhLlBsYXllci5QbGF5ZXJQ",
            "cm9mZXNzaW9uc1Byb2dyZXNzVjNIABI6CglxdWVzdF9sb2cYDyABKAsyJS5X",
            "VVByb3Rvcy5JbnZlbnRvcnkuSW52ZW50b3J5UXVlc3RMb2dIABI+CgthY2hp",
            "ZXZlbWVudBgQIAEoCzInLldVUHJvdG9zLkRhdGEuUGxheWVyLlBsYXllckFj",
            "aGlldmVtZW50SABCBgoEVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Player.PlayerProfileReflection.Descriptor, global::WUProtos.Data.Player.PlayerProfessionsProgressV3Reflection.Descriptor, global::WUProtos.Data.Player.PlayerAchievementReflection.Descriptor, global::WUProtos.Inventory.InventoryVaultItemReflection.Descriptor, global::WUProtos.Inventory.InventoryCollectionItemReflection.Descriptor, global::WUProtos.Inventory.InventoryCollectionFamilyReflection.Descriptor, global::WUProtos.Inventory.InventoryWalkboxItemReflection.Descriptor, global::WUProtos.Inventory.InventoryFeatureFlagsReflection.Descriptor, global::WUProtos.Inventory.InventoryPortkeyItemReflection.Descriptor, global::WUProtos.Inventory.InventoryCollectionPageReflection.Descriptor, global::WUProtos.Inventory.InventoryVaultCapacityReflection.Descriptor, global::WUProtos.Inventory.InventoryCauldronReflection.Descriptor, global::WUProtos.Inventory.InventoryEscrowedRewardsReflection.Descriptor, global::WUProtos.Inventory.InventoryQuestLogReflection.Descriptor, global::WUProtos.Data.Buff.ActiveBuffListReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Inventory.AtlasInventoryItem), global::WUProtos.Inventory.AtlasInventoryItem.Parser, new[]{ "Profile", "VaultItem", "CollectionItem", "CollectionFamily", "Walkbox", "PlayerFlags", "Portkey", "PlayerActiveBuffList", "CollectionPage", "VaultCapacity", "Cauldron", "EscrowedRewards", "ProfessionsProgressV3", "QuestLog", "Achievement" }, new[]{ "Type" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AtlasInventoryItem : pb::IMessage<AtlasInventoryItem> {
    private static readonly pb::MessageParser<AtlasInventoryItem> _parser = new pb::MessageParser<AtlasInventoryItem>(() => new AtlasInventoryItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AtlasInventoryItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Inventory.AtlasInventoryItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryItem(AtlasInventoryItem other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Profile:
          Profile = other.Profile.Clone();
          break;
        case TypeOneofCase.VaultItem:
          VaultItem = other.VaultItem.Clone();
          break;
        case TypeOneofCase.CollectionItem:
          CollectionItem = other.CollectionItem.Clone();
          break;
        case TypeOneofCase.CollectionFamily:
          CollectionFamily = other.CollectionFamily.Clone();
          break;
        case TypeOneofCase.Walkbox:
          Walkbox = other.Walkbox.Clone();
          break;
        case TypeOneofCase.PlayerFlags:
          PlayerFlags = other.PlayerFlags.Clone();
          break;
        case TypeOneofCase.Portkey:
          Portkey = other.Portkey.Clone();
          break;
        case TypeOneofCase.PlayerActiveBuffList:
          PlayerActiveBuffList = other.PlayerActiveBuffList.Clone();
          break;
        case TypeOneofCase.CollectionPage:
          CollectionPage = other.CollectionPage.Clone();
          break;
        case TypeOneofCase.VaultCapacity:
          VaultCapacity = other.VaultCapacity.Clone();
          break;
        case TypeOneofCase.Cauldron:
          Cauldron = other.Cauldron.Clone();
          break;
        case TypeOneofCase.EscrowedRewards:
          EscrowedRewards = other.EscrowedRewards.Clone();
          break;
        case TypeOneofCase.ProfessionsProgressV3:
          ProfessionsProgressV3 = other.ProfessionsProgressV3.Clone();
          break;
        case TypeOneofCase.QuestLog:
          QuestLog = other.QuestLog.Clone();
          break;
        case TypeOneofCase.Achievement:
          Achievement = other.Achievement.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtlasInventoryItem Clone() {
      return new AtlasInventoryItem(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Player.PlayerProfile Profile {
      get { return typeCase_ == TypeOneofCase.Profile ? (global::WUProtos.Data.Player.PlayerProfile) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Profile;
      }
    }

    /// <summary>Field number for the "vault_item" field.</summary>
    public const int VaultItemFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryVaultItem VaultItem {
      get { return typeCase_ == TypeOneofCase.VaultItem ? (global::WUProtos.Inventory.InventoryVaultItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.VaultItem;
      }
    }

    /// <summary>Field number for the "collection_item" field.</summary>
    public const int CollectionItemFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryCollectionItem CollectionItem {
      get { return typeCase_ == TypeOneofCase.CollectionItem ? (global::WUProtos.Inventory.InventoryCollectionItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectionItem;
      }
    }

    /// <summary>Field number for the "collection_family" field.</summary>
    public const int CollectionFamilyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryCollectionFamily CollectionFamily {
      get { return typeCase_ == TypeOneofCase.CollectionFamily ? (global::WUProtos.Inventory.InventoryCollectionFamily) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectionFamily;
      }
    }

    /// <summary>Field number for the "walkbox" field.</summary>
    public const int WalkboxFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryWalkboxItem Walkbox {
      get { return typeCase_ == TypeOneofCase.Walkbox ? (global::WUProtos.Inventory.InventoryWalkboxItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Walkbox;
      }
    }

    /// <summary>Field number for the "player_flags" field.</summary>
    public const int PlayerFlagsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryFeatureFlags PlayerFlags {
      get { return typeCase_ == TypeOneofCase.PlayerFlags ? (global::WUProtos.Inventory.InventoryFeatureFlags) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlayerFlags;
      }
    }

    /// <summary>Field number for the "portkey" field.</summary>
    public const int PortkeyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryPortkeyItem Portkey {
      get { return typeCase_ == TypeOneofCase.Portkey ? (global::WUProtos.Inventory.InventoryPortkeyItem) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Portkey;
      }
    }

    /// <summary>Field number for the "player_active_buff_list" field.</summary>
    public const int PlayerActiveBuffListFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Buff.ActiveBuffList PlayerActiveBuffList {
      get { return typeCase_ == TypeOneofCase.PlayerActiveBuffList ? (global::WUProtos.Data.Buff.ActiveBuffList) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.PlayerActiveBuffList;
      }
    }

    /// <summary>Field number for the "collection_page" field.</summary>
    public const int CollectionPageFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryCollectionPage CollectionPage {
      get { return typeCase_ == TypeOneofCase.CollectionPage ? (global::WUProtos.Inventory.InventoryCollectionPage) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.CollectionPage;
      }
    }

    /// <summary>Field number for the "vault_capacity" field.</summary>
    public const int VaultCapacityFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryVaultCapacity VaultCapacity {
      get { return typeCase_ == TypeOneofCase.VaultCapacity ? (global::WUProtos.Inventory.InventoryVaultCapacity) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.VaultCapacity;
      }
    }

    /// <summary>Field number for the "cauldron" field.</summary>
    public const int CauldronFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryCauldron Cauldron {
      get { return typeCase_ == TypeOneofCase.Cauldron ? (global::WUProtos.Inventory.InventoryCauldron) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Cauldron;
      }
    }

    /// <summary>Field number for the "escrowed_rewards" field.</summary>
    public const int EscrowedRewardsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryEscrowedRewards EscrowedRewards {
      get { return typeCase_ == TypeOneofCase.EscrowedRewards ? (global::WUProtos.Inventory.InventoryEscrowedRewards) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.EscrowedRewards;
      }
    }

    /// <summary>Field number for the "professions_progress_v3" field.</summary>
    public const int ProfessionsProgressV3FieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Player.PlayerProfessionsProgressV3 ProfessionsProgressV3 {
      get { return typeCase_ == TypeOneofCase.ProfessionsProgressV3 ? (global::WUProtos.Data.Player.PlayerProfessionsProgressV3) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.ProfessionsProgressV3;
      }
    }

    /// <summary>Field number for the "quest_log" field.</summary>
    public const int QuestLogFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Inventory.InventoryQuestLog QuestLog {
      get { return typeCase_ == TypeOneofCase.QuestLog ? (global::WUProtos.Inventory.InventoryQuestLog) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.QuestLog;
      }
    }

    /// <summary>Field number for the "achievement" field.</summary>
    public const int AchievementFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Player.PlayerAchievement Achievement {
      get { return typeCase_ == TypeOneofCase.Achievement ? (global::WUProtos.Data.Player.PlayerAchievement) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Achievement;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "Type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Profile = 1,
      VaultItem = 2,
      CollectionItem = 3,
      CollectionFamily = 4,
      Walkbox = 5,
      PlayerFlags = 6,
      Portkey = 7,
      PlayerActiveBuffList = 8,
      CollectionPage = 9,
      VaultCapacity = 11,
      Cauldron = 12,
      EscrowedRewards = 13,
      ProfessionsProgressV3 = 14,
      QuestLog = 15,
      Achievement = 16,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AtlasInventoryItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AtlasInventoryItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Profile, other.Profile)) return false;
      if (!object.Equals(VaultItem, other.VaultItem)) return false;
      if (!object.Equals(CollectionItem, other.CollectionItem)) return false;
      if (!object.Equals(CollectionFamily, other.CollectionFamily)) return false;
      if (!object.Equals(Walkbox, other.Walkbox)) return false;
      if (!object.Equals(PlayerFlags, other.PlayerFlags)) return false;
      if (!object.Equals(Portkey, other.Portkey)) return false;
      if (!object.Equals(PlayerActiveBuffList, other.PlayerActiveBuffList)) return false;
      if (!object.Equals(CollectionPage, other.CollectionPage)) return false;
      if (!object.Equals(VaultCapacity, other.VaultCapacity)) return false;
      if (!object.Equals(Cauldron, other.Cauldron)) return false;
      if (!object.Equals(EscrowedRewards, other.EscrowedRewards)) return false;
      if (!object.Equals(ProfessionsProgressV3, other.ProfessionsProgressV3)) return false;
      if (!object.Equals(QuestLog, other.QuestLog)) return false;
      if (!object.Equals(Achievement, other.Achievement)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Profile) hash ^= Profile.GetHashCode();
      if (typeCase_ == TypeOneofCase.VaultItem) hash ^= VaultItem.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionItem) hash ^= CollectionItem.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionFamily) hash ^= CollectionFamily.GetHashCode();
      if (typeCase_ == TypeOneofCase.Walkbox) hash ^= Walkbox.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayerFlags) hash ^= PlayerFlags.GetHashCode();
      if (typeCase_ == TypeOneofCase.Portkey) hash ^= Portkey.GetHashCode();
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) hash ^= PlayerActiveBuffList.GetHashCode();
      if (typeCase_ == TypeOneofCase.CollectionPage) hash ^= CollectionPage.GetHashCode();
      if (typeCase_ == TypeOneofCase.VaultCapacity) hash ^= VaultCapacity.GetHashCode();
      if (typeCase_ == TypeOneofCase.Cauldron) hash ^= Cauldron.GetHashCode();
      if (typeCase_ == TypeOneofCase.EscrowedRewards) hash ^= EscrowedRewards.GetHashCode();
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) hash ^= ProfessionsProgressV3.GetHashCode();
      if (typeCase_ == TypeOneofCase.QuestLog) hash ^= QuestLog.GetHashCode();
      if (typeCase_ == TypeOneofCase.Achievement) hash ^= Achievement.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Profile) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (typeCase_ == TypeOneofCase.VaultItem) {
        output.WriteRawTag(18);
        output.WriteMessage(VaultItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionItem) {
        output.WriteRawTag(26);
        output.WriteMessage(CollectionItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionFamily) {
        output.WriteRawTag(34);
        output.WriteMessage(CollectionFamily);
      }
      if (typeCase_ == TypeOneofCase.Walkbox) {
        output.WriteRawTag(42);
        output.WriteMessage(Walkbox);
      }
      if (typeCase_ == TypeOneofCase.PlayerFlags) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayerFlags);
      }
      if (typeCase_ == TypeOneofCase.Portkey) {
        output.WriteRawTag(58);
        output.WriteMessage(Portkey);
      }
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
        output.WriteRawTag(66);
        output.WriteMessage(PlayerActiveBuffList);
      }
      if (typeCase_ == TypeOneofCase.CollectionPage) {
        output.WriteRawTag(74);
        output.WriteMessage(CollectionPage);
      }
      if (typeCase_ == TypeOneofCase.VaultCapacity) {
        output.WriteRawTag(90);
        output.WriteMessage(VaultCapacity);
      }
      if (typeCase_ == TypeOneofCase.Cauldron) {
        output.WriteRawTag(98);
        output.WriteMessage(Cauldron);
      }
      if (typeCase_ == TypeOneofCase.EscrowedRewards) {
        output.WriteRawTag(106);
        output.WriteMessage(EscrowedRewards);
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
        output.WriteRawTag(114);
        output.WriteMessage(ProfessionsProgressV3);
      }
      if (typeCase_ == TypeOneofCase.QuestLog) {
        output.WriteRawTag(122);
        output.WriteMessage(QuestLog);
      }
      if (typeCase_ == TypeOneofCase.Achievement) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Achievement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Profile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (typeCase_ == TypeOneofCase.VaultItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionItem);
      }
      if (typeCase_ == TypeOneofCase.CollectionFamily) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFamily);
      }
      if (typeCase_ == TypeOneofCase.Walkbox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Walkbox);
      }
      if (typeCase_ == TypeOneofCase.PlayerFlags) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerFlags);
      }
      if (typeCase_ == TypeOneofCase.Portkey) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Portkey);
      }
      if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerActiveBuffList);
      }
      if (typeCase_ == TypeOneofCase.CollectionPage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionPage);
      }
      if (typeCase_ == TypeOneofCase.VaultCapacity) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VaultCapacity);
      }
      if (typeCase_ == TypeOneofCase.Cauldron) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cauldron);
      }
      if (typeCase_ == TypeOneofCase.EscrowedRewards) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EscrowedRewards);
      }
      if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfessionsProgressV3);
      }
      if (typeCase_ == TypeOneofCase.QuestLog) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuestLog);
      }
      if (typeCase_ == TypeOneofCase.Achievement) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Achievement);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AtlasInventoryItem other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Profile:
          if (Profile == null) {
            Profile = new global::WUProtos.Data.Player.PlayerProfile();
          }
          Profile.MergeFrom(other.Profile);
          break;
        case TypeOneofCase.VaultItem:
          if (VaultItem == null) {
            VaultItem = new global::WUProtos.Inventory.InventoryVaultItem();
          }
          VaultItem.MergeFrom(other.VaultItem);
          break;
        case TypeOneofCase.CollectionItem:
          if (CollectionItem == null) {
            CollectionItem = new global::WUProtos.Inventory.InventoryCollectionItem();
          }
          CollectionItem.MergeFrom(other.CollectionItem);
          break;
        case TypeOneofCase.CollectionFamily:
          if (CollectionFamily == null) {
            CollectionFamily = new global::WUProtos.Inventory.InventoryCollectionFamily();
          }
          CollectionFamily.MergeFrom(other.CollectionFamily);
          break;
        case TypeOneofCase.Walkbox:
          if (Walkbox == null) {
            Walkbox = new global::WUProtos.Inventory.InventoryWalkboxItem();
          }
          Walkbox.MergeFrom(other.Walkbox);
          break;
        case TypeOneofCase.PlayerFlags:
          if (PlayerFlags == null) {
            PlayerFlags = new global::WUProtos.Inventory.InventoryFeatureFlags();
          }
          PlayerFlags.MergeFrom(other.PlayerFlags);
          break;
        case TypeOneofCase.Portkey:
          if (Portkey == null) {
            Portkey = new global::WUProtos.Inventory.InventoryPortkeyItem();
          }
          Portkey.MergeFrom(other.Portkey);
          break;
        case TypeOneofCase.PlayerActiveBuffList:
          if (PlayerActiveBuffList == null) {
            PlayerActiveBuffList = new global::WUProtos.Data.Buff.ActiveBuffList();
          }
          PlayerActiveBuffList.MergeFrom(other.PlayerActiveBuffList);
          break;
        case TypeOneofCase.CollectionPage:
          if (CollectionPage == null) {
            CollectionPage = new global::WUProtos.Inventory.InventoryCollectionPage();
          }
          CollectionPage.MergeFrom(other.CollectionPage);
          break;
        case TypeOneofCase.VaultCapacity:
          if (VaultCapacity == null) {
            VaultCapacity = new global::WUProtos.Inventory.InventoryVaultCapacity();
          }
          VaultCapacity.MergeFrom(other.VaultCapacity);
          break;
        case TypeOneofCase.Cauldron:
          if (Cauldron == null) {
            Cauldron = new global::WUProtos.Inventory.InventoryCauldron();
          }
          Cauldron.MergeFrom(other.Cauldron);
          break;
        case TypeOneofCase.EscrowedRewards:
          if (EscrowedRewards == null) {
            EscrowedRewards = new global::WUProtos.Inventory.InventoryEscrowedRewards();
          }
          EscrowedRewards.MergeFrom(other.EscrowedRewards);
          break;
        case TypeOneofCase.ProfessionsProgressV3:
          if (ProfessionsProgressV3 == null) {
            ProfessionsProgressV3 = new global::WUProtos.Data.Player.PlayerProfessionsProgressV3();
          }
          ProfessionsProgressV3.MergeFrom(other.ProfessionsProgressV3);
          break;
        case TypeOneofCase.QuestLog:
          if (QuestLog == null) {
            QuestLog = new global::WUProtos.Inventory.InventoryQuestLog();
          }
          QuestLog.MergeFrom(other.QuestLog);
          break;
        case TypeOneofCase.Achievement:
          if (Achievement == null) {
            Achievement = new global::WUProtos.Data.Player.PlayerAchievement();
          }
          Achievement.MergeFrom(other.Achievement);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::WUProtos.Data.Player.PlayerProfile subBuilder = new global::WUProtos.Data.Player.PlayerProfile();
            if (typeCase_ == TypeOneofCase.Profile) {
              subBuilder.MergeFrom(Profile);
            }
            input.ReadMessage(subBuilder);
            Profile = subBuilder;
            break;
          }
          case 18: {
            global::WUProtos.Inventory.InventoryVaultItem subBuilder = new global::WUProtos.Inventory.InventoryVaultItem();
            if (typeCase_ == TypeOneofCase.VaultItem) {
              subBuilder.MergeFrom(VaultItem);
            }
            input.ReadMessage(subBuilder);
            VaultItem = subBuilder;
            break;
          }
          case 26: {
            global::WUProtos.Inventory.InventoryCollectionItem subBuilder = new global::WUProtos.Inventory.InventoryCollectionItem();
            if (typeCase_ == TypeOneofCase.CollectionItem) {
              subBuilder.MergeFrom(CollectionItem);
            }
            input.ReadMessage(subBuilder);
            CollectionItem = subBuilder;
            break;
          }
          case 34: {
            global::WUProtos.Inventory.InventoryCollectionFamily subBuilder = new global::WUProtos.Inventory.InventoryCollectionFamily();
            if (typeCase_ == TypeOneofCase.CollectionFamily) {
              subBuilder.MergeFrom(CollectionFamily);
            }
            input.ReadMessage(subBuilder);
            CollectionFamily = subBuilder;
            break;
          }
          case 42: {
            global::WUProtos.Inventory.InventoryWalkboxItem subBuilder = new global::WUProtos.Inventory.InventoryWalkboxItem();
            if (typeCase_ == TypeOneofCase.Walkbox) {
              subBuilder.MergeFrom(Walkbox);
            }
            input.ReadMessage(subBuilder);
            Walkbox = subBuilder;
            break;
          }
          case 50: {
            global::WUProtos.Inventory.InventoryFeatureFlags subBuilder = new global::WUProtos.Inventory.InventoryFeatureFlags();
            if (typeCase_ == TypeOneofCase.PlayerFlags) {
              subBuilder.MergeFrom(PlayerFlags);
            }
            input.ReadMessage(subBuilder);
            PlayerFlags = subBuilder;
            break;
          }
          case 58: {
            global::WUProtos.Inventory.InventoryPortkeyItem subBuilder = new global::WUProtos.Inventory.InventoryPortkeyItem();
            if (typeCase_ == TypeOneofCase.Portkey) {
              subBuilder.MergeFrom(Portkey);
            }
            input.ReadMessage(subBuilder);
            Portkey = subBuilder;
            break;
          }
          case 66: {
            global::WUProtos.Data.Buff.ActiveBuffList subBuilder = new global::WUProtos.Data.Buff.ActiveBuffList();
            if (typeCase_ == TypeOneofCase.PlayerActiveBuffList) {
              subBuilder.MergeFrom(PlayerActiveBuffList);
            }
            input.ReadMessage(subBuilder);
            PlayerActiveBuffList = subBuilder;
            break;
          }
          case 74: {
            global::WUProtos.Inventory.InventoryCollectionPage subBuilder = new global::WUProtos.Inventory.InventoryCollectionPage();
            if (typeCase_ == TypeOneofCase.CollectionPage) {
              subBuilder.MergeFrom(CollectionPage);
            }
            input.ReadMessage(subBuilder);
            CollectionPage = subBuilder;
            break;
          }
          case 90: {
            global::WUProtos.Inventory.InventoryVaultCapacity subBuilder = new global::WUProtos.Inventory.InventoryVaultCapacity();
            if (typeCase_ == TypeOneofCase.VaultCapacity) {
              subBuilder.MergeFrom(VaultCapacity);
            }
            input.ReadMessage(subBuilder);
            VaultCapacity = subBuilder;
            break;
          }
          case 98: {
            global::WUProtos.Inventory.InventoryCauldron subBuilder = new global::WUProtos.Inventory.InventoryCauldron();
            if (typeCase_ == TypeOneofCase.Cauldron) {
              subBuilder.MergeFrom(Cauldron);
            }
            input.ReadMessage(subBuilder);
            Cauldron = subBuilder;
            break;
          }
          case 106: {
            global::WUProtos.Inventory.InventoryEscrowedRewards subBuilder = new global::WUProtos.Inventory.InventoryEscrowedRewards();
            if (typeCase_ == TypeOneofCase.EscrowedRewards) {
              subBuilder.MergeFrom(EscrowedRewards);
            }
            input.ReadMessage(subBuilder);
            EscrowedRewards = subBuilder;
            break;
          }
          case 114: {
            global::WUProtos.Data.Player.PlayerProfessionsProgressV3 subBuilder = new global::WUProtos.Data.Player.PlayerProfessionsProgressV3();
            if (typeCase_ == TypeOneofCase.ProfessionsProgressV3) {
              subBuilder.MergeFrom(ProfessionsProgressV3);
            }
            input.ReadMessage(subBuilder);
            ProfessionsProgressV3 = subBuilder;
            break;
          }
          case 122: {
            global::WUProtos.Inventory.InventoryQuestLog subBuilder = new global::WUProtos.Inventory.InventoryQuestLog();
            if (typeCase_ == TypeOneofCase.QuestLog) {
              subBuilder.MergeFrom(QuestLog);
            }
            input.ReadMessage(subBuilder);
            QuestLog = subBuilder;
            break;
          }
          case 130: {
            global::WUProtos.Data.Player.PlayerAchievement subBuilder = new global::WUProtos.Data.Player.PlayerAchievement();
            if (typeCase_ == TypeOneofCase.Achievement) {
              subBuilder.MergeFrom(Achievement);
            }
            input.ReadMessage(subBuilder);
            Achievement = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
