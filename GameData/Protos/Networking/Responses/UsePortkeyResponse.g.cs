// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WUProtos/Networking/Responses/UsePortkeyResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WUProtos.Networking.Responses {

  /// <summary>Holder for reflection information generated from WUProtos/Networking/Responses/UsePortkeyResponse.proto</summary>
  public static partial class UsePortkeyResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for WUProtos/Networking/Responses/UsePortkeyResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UsePortkeyResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZXVVByb3Rvcy9OZXR3b3JraW5nL1Jlc3BvbnNlcy9Vc2VQb3J0a2V5UmVz",
            "cG9uc2UucHJvdG8SHVdVUHJvdG9zLk5ldHdvcmtpbmcuUmVzcG9uc2VzGidX",
            "VVByb3Rvcy9EYXRhL0xvb3QvTG9vdENvbGxlY3Rpb24ucHJvdG8aL1dVUHJv",
            "dG9zL0RhdGEvUG9ydGtleUJvbnVzR2FtZU5vZGVSZXdhcmRzLnByb3RvIqwC",
            "ChJVc2VQb3J0a2V5UmVzcG9uc2USSAoGc3RhdHVzGAEgASgOMjguV1VQcm90",
            "b3MuTmV0d29ya2luZy5SZXNwb25zZXMuVXNlUG9ydGtleVJlc3BvbnNlLlN0",
            "YXR1cxI7Cg9wb3J0a2V5X3Jld2FyZHMYAiABKAsyIi5XVVByb3Rvcy5EYXRh",
            "Lkxvb3QuTG9vdENvbGxlY3Rpb24SSwoXYWxsX2JvbnVzX25vZGVzX3Jld2Fy",
            "ZHMYBCADKAsyKi5XVVByb3Rvcy5EYXRhLlBvcnRrZXlCb251c0dhbWVOb2Rl",
            "UmV3YXJkcyJCCgZTdGF0dXMSCwoHVU5LTk9XThAAEgsKB1NVQ0NFU1MQARIJ",
            "CgVFUlJPUhACEhMKD0lOVkFMSURfUE9SVEtFWRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::WUProtos.Data.Loot.LootCollectionReflection.Descriptor, global::WUProtos.Data.PortkeyBonusGameNodeRewardsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WUProtos.Networking.Responses.UsePortkeyResponse), global::WUProtos.Networking.Responses.UsePortkeyResponse.Parser, new[]{ "Status", "PortkeyRewards", "AllBonusNodesRewards" }, null, new[]{ typeof(global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UsePortkeyResponse : pb::IMessage<UsePortkeyResponse> {
    private static readonly pb::MessageParser<UsePortkeyResponse> _parser = new pb::MessageParser<UsePortkeyResponse>(() => new UsePortkeyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsePortkeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WUProtos.Networking.Responses.UsePortkeyResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePortkeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePortkeyResponse(UsePortkeyResponse other) : this() {
      status_ = other.status_;
      portkeyRewards_ = other.portkeyRewards_ != null ? other.portkeyRewards_.Clone() : null;
      allBonusNodesRewards_ = other.allBonusNodesRewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePortkeyResponse Clone() {
      return new UsePortkeyResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "portkey_rewards" field.</summary>
    public const int PortkeyRewardsFieldNumber = 2;
    private global::WUProtos.Data.Loot.LootCollection portkeyRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WUProtos.Data.Loot.LootCollection PortkeyRewards {
      get { return portkeyRewards_; }
      set {
        portkeyRewards_ = value;
      }
    }

    /// <summary>Field number for the "all_bonus_nodes_rewards" field.</summary>
    public const int AllBonusNodesRewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::WUProtos.Data.PortkeyBonusGameNodeRewards> _repeated_allBonusNodesRewards_codec
        = pb::FieldCodec.ForMessage(34, global::WUProtos.Data.PortkeyBonusGameNodeRewards.Parser);
    private readonly pbc::RepeatedField<global::WUProtos.Data.PortkeyBonusGameNodeRewards> allBonusNodesRewards_ = new pbc::RepeatedField<global::WUProtos.Data.PortkeyBonusGameNodeRewards>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WUProtos.Data.PortkeyBonusGameNodeRewards> AllBonusNodesRewards {
      get { return allBonusNodesRewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsePortkeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsePortkeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(PortkeyRewards, other.PortkeyRewards)) return false;
      if(!allBonusNodesRewards_.Equals(other.allBonusNodesRewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (portkeyRewards_ != null) hash ^= PortkeyRewards.GetHashCode();
      hash ^= allBonusNodesRewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (portkeyRewards_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PortkeyRewards);
      }
      allBonusNodesRewards_.WriteTo(output, _repeated_allBonusNodesRewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (portkeyRewards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortkeyRewards);
      }
      size += allBonusNodesRewards_.CalculateSize(_repeated_allBonusNodesRewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsePortkeyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.portkeyRewards_ != null) {
        if (portkeyRewards_ == null) {
          PortkeyRewards = new global::WUProtos.Data.Loot.LootCollection();
        }
        PortkeyRewards.MergeFrom(other.PortkeyRewards);
      }
      allBonusNodesRewards_.Add(other.allBonusNodesRewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::WUProtos.Networking.Responses.UsePortkeyResponse.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (portkeyRewards_ == null) {
              PortkeyRewards = new global::WUProtos.Data.Loot.LootCollection();
            }
            input.ReadMessage(PortkeyRewards);
            break;
          }
          case 34: {
            allBonusNodesRewards_.AddEntriesFrom(input, _repeated_allBonusNodesRewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UsePortkeyResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SUCCESS")] Success = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
        [pbr::OriginalName("INVALID_PORTKEY")] InvalidPortkey = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
